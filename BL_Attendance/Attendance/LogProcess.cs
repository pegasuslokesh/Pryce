using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using PegasusDataAccess;
using System.Data.SqlClient;
using System.IO;
using System.Configuration;
using System.Data.OleDb;
using System.Net.Http;

/// <summary>
/// Summary description for LogProcess
/// </summary>
public class LogProcess
{
    Set_ApplicationParameter objAppParam = null;
    Att_ShiftDescription objShift = null;
    Att_PartialLeave_Request objPartialReq = null;
    Att_AttendanceLog objAttLog = null;
    Att_TimeTable objTimeTable = null;
    DataAccessClass objDA = null;
    Att_ShiftManagement objShiftManagement = null;
    Att_AttendanceRegister objAttReg = null;
    EmployeeParameter objEmpParam = null;
    Set_Employee_Holiday objEmpHoliday = null;
    Att_Leave_Request ObjLeaveReq = null;
    EmployeeMaster objEmp = null;
    Att_ScheduleMaster objEmpSch = null;
    Attendance objAttendance = null;
    SystemParameter ObjSysPeram = null;
    NotificationMaster Obj_Notifiacation = null;
    LeaveMaster_deduction objLeavededuction = null;
    DataAccessClass Objda = null;
    Pay_Employee_Attendance objPayEmpAtt = null;
    Pay_Employee_Month objPayEmpMonth = null;
    UserMaster ObjUser = null;
    Set_DocNumber objDocNo = null;
    Ac_ParameterMaster objAcParameter = null;
    Ac_Voucher_Header objVoucherHeader = null;
    DepartmentMaster objDep = null;
    Ac_Voucher_Detail objVoucherDetail = null;
    Att_Employee_Leave objEmpleave = null;
    Pay_Employee_Due_Payment objEmpDuePay = null;
    Pay_Employee_Loan objEmpLoan = null;
    Pay_Employee_Deduction objpayrolldeduc = null;
    Pay_Employe_Allowance objpayrollall = null;
    Pay_Employee_Penalty objPEpenalty = null;
    Pay_Employee_claim objPEClaim = null;
    Common ObjComman = null;
    Set_Pay_Employee_Allow_Deduc ObjAllDeduc = null;
    Set_Allowance ObjAllow = null;
    Set_Deduction ObjDeduc = null;
    EmployeeParameter objempparam = null;
    Set_EmployeeGroup_Master objEmpGroup = null;
    Set_Group_Employee objGroupEmp = null;
    SystemParameter objSys = null;
    Pay_Employee_claim ObjClaim = null;
    Att_Employee_Notification objEmpNotice = null;
    RoleDataPermission objRoleData = null;
    Set_Location_Department objLocDept = null;
    LocationMaster ObjLocationMaster = null;
    HR_Indemnity_Master objIndemnity = null;
    RoleMaster objRole = null;
    Att_Employee_HalfDay objEmpHalfDay = null;
    HR_Leave_Salary objLeaveSal = null;
    HR_EmployeeDetail objEmpDetail = null;
    DataAccessClass da = null;
    Ac_ChartOfAccount objCOA = null;
    Ac_Parameter_Location objAccParameterLocation = null;
    Pay_SalaryPlanDetail objsalaryPlan = null;
    Set_DeductionDetail objdeductiondetail = null;
    Pay_AdvancePayment objAdvancePayment = null;
    Pay_SalaryPlanDetail objsalaryplandetail = null;
    Pay_EmployeeArrear ObjEmpArrear = null;
    CurrencyMaster objCurrency = null;

    string EarlyOut_MinuteDeductionType = string.Empty;
    string LateIn_MinuteDeductionType = string.Empty;
    int Fr_IncrementDuration = 0;
    int Exp_IncrementDuration = 0;
    private string _strConString = "";
    public LogProcess(string strConString)
    {
        //
        // TODO: Add constructor logic here
        //
        objAppParam = new Set_ApplicationParameter(strConString);
        objShift = new Att_ShiftDescription(strConString);
        objPartialReq = new Att_PartialLeave_Request(strConString);
        objAttLog = new Att_AttendanceLog(strConString);
        objTimeTable = new Att_TimeTable(strConString);
        objDA = new DataAccessClass(strConString);
        objShiftManagement = new Att_ShiftManagement(strConString);
        objAttReg = new Att_AttendanceRegister(strConString);
        objEmpParam = new EmployeeParameter(strConString);
        objEmpHoliday = new Set_Employee_Holiday(strConString);
        ObjLeaveReq = new Att_Leave_Request(strConString);
        objEmp = new EmployeeMaster(strConString);
        objEmpSch = new Att_ScheduleMaster(strConString);
        objAttendance = new Attendance(strConString);
        ObjSysPeram = new SystemParameter(strConString);
        Obj_Notifiacation = new NotificationMaster(strConString);
        objLeavededuction = new LeaveMaster_deduction(strConString);
        Objda = new DataAccessClass(strConString);
        objPayEmpAtt = new Pay_Employee_Attendance(strConString);
        objPayEmpMonth = new Pay_Employee_Month(strConString);
        ObjUser = new UserMaster(strConString);
        objDocNo = new Set_DocNumber(strConString);
        objAcParameter = new Ac_ParameterMaster(strConString);
        objVoucherHeader = new Ac_Voucher_Header(strConString);
        objDep = new DepartmentMaster(strConString);
        objVoucherDetail = new Ac_Voucher_Detail(strConString);
        objEmpleave = new Att_Employee_Leave(strConString);
        objEmpDuePay = new Pay_Employee_Due_Payment(strConString);
        objEmpLoan = new Pay_Employee_Loan(strConString);
        objpayrolldeduc = new Pay_Employee_Deduction(strConString);
        objpayrollall = new Pay_Employe_Allowance(strConString);
        objPEpenalty = new Pay_Employee_Penalty(strConString);
        objPEClaim = new Pay_Employee_claim(strConString);
        ObjComman = new Common(strConString);
        ObjAllDeduc = new Set_Pay_Employee_Allow_Deduc(strConString);
        ObjAllow = new Set_Allowance(strConString);
        ObjDeduc = new Set_Deduction(strConString);
        objempparam = new EmployeeParameter(strConString);
        objEmpGroup = new Set_EmployeeGroup_Master(strConString);
        objGroupEmp = new Set_Group_Employee(strConString);
        objSys = new SystemParameter(strConString);
        ObjClaim = new Pay_Employee_claim(strConString);
        objEmpNotice = new Att_Employee_Notification(strConString);
        objRoleData = new RoleDataPermission(strConString);
        objLocDept = new Set_Location_Department(strConString);
        ObjLocationMaster = new LocationMaster(strConString);
        objIndemnity = new HR_Indemnity_Master(strConString);
        objRole = new RoleMaster(strConString);
        objEmpHalfDay = new Att_Employee_HalfDay(strConString);
        objLeaveSal = new HR_Leave_Salary(strConString);
        objEmpDetail = new HR_EmployeeDetail(strConString);
        da = new DataAccessClass(strConString);
        objCOA = new Ac_ChartOfAccount(strConString);
        objAccParameterLocation = new Ac_Parameter_Location(strConString);
        objsalaryPlan = new Pay_SalaryPlanDetail(strConString);
        objdeductiondetail = new Set_DeductionDetail(strConString);
        objAdvancePayment = new Pay_AdvancePayment(strConString);
        objsalaryplandetail = new Pay_SalaryPlanDetail(strConString);
        ObjEmpArrear = new Pay_EmployeeArrear(strConString);
        objCurrency = new CurrencyMaster(strConString);
        _strConString = strConString;
    }

    public void InsertPartIalLogFunctionality(DataTable dtCompanyParameter, string strCompanyId, string strEmpId, DateTime dtFromDate, DateTime dtToDate, string WithKeyPref, string InKey, string OutKey, string PartialInKey, string PartialOutKey, string strUserId, string strTimeZoneId)
    {
        int PartialMinInDay = int.Parse(GetApplicationParameterValueByParamName("Partial Leave Minute Use In A Day", dtCompanyParameter));
        PegasusDataAccess.DataAccessClass objDA = new PegasusDataAccess.DataAccessClass(_strConString);
        DataTable dtPartialRequest = objPartialReq.GetPartialLeaveRequestById(strCompanyId, strEmpId);
        if (dtPartialRequest.Rows.Count > 0)
        {
            dtPartialRequest = new DataView(dtPartialRequest, "Partial_Leave_Date>='" + dtFromDate.ToString() + "'  and Partial_Leave_Date<='" + dtToDate.ToString() + "' and Is_Confirmed='Approved'", "", DataViewRowState.CurrentRows).ToTable();
            if (dtPartialRequest.Rows.Count > 0)
            {
                for (int P = 0; P < dtPartialRequest.Rows.Count; P++)
                {
                    string strTrans_Id = dtPartialRequest.Rows[P]["Trans_Id"].ToString();
                    DateTime strPartialLeaveDate = Convert.ToDateTime(dtPartialRequest.Rows[P]["Partial_Leave_Date"].ToString());
                    string strPLType = dtPartialRequest.Rows[P]["Field1"].ToString();
                    string strTimeTableId = dtPartialRequest.Rows[P]["Field2"].ToString();
                    string strPartialLeaveType = dtPartialRequest.Rows[P]["Partial_Leave_Type"].ToString();
                    string strFromTime = dtPartialRequest.Rows[P]["From_Time"].ToString();
                    string strToTime = dtPartialRequest.Rows[P]["To_Time"].ToString();

                    DateTime InTimePL = new DateTime();
                    DateTime OutTimePL = new DateTime();

                    if (strPartialLeaveType == "0")
                    {
                        //For PL Personal Case
                        if (strTimeTableId != "0" && strTimeTableId != "")
                        {
                            DataTable dtTime = objTimeTable.GetTimeTableMasterById(strCompanyId, strTimeTableId);
                            if (dtTime.Rows.Count > 0)
                            {
                                InTimePL = Convert.ToDateTime(dtTime.Rows[0]["OnDuty_Time"].ToString());
                                OutTimePL = Convert.ToDateTime(dtTime.Rows[0]["OffDuty_Time"].ToString());
                            }
                            DataTable Log = objAttLog.GetAttendanceLogByDateByEmpId1(strEmpId, strPartialLeaveDate.ToString(), strPartialLeaveDate.ToString());
                            if (Log.Rows.Count > 0)
                            {
                                if (strPLType == "B")
                                {
                                    if (WithKeyPref == "Yes")
                                    {
                                        //For With Key In Log
                                        InTimePL = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, InTimePL.Hour, InTimePL.Minute, InTimePL.Second);
                                        DataTable InLog = new DataView(Log, "Func_Code ='" + InKey + "' and Event_Time<='" + InTimePL + "'", "", DataViewRowState.CurrentRows).ToTable();
                                        if (InLog.Rows.Count > 0)
                                        {

                                        }
                                        else
                                        {
                                            InLog = new DataView(Log, "Func_Code ='" + InKey + "' and Event_Time>='" + InTimePL + "'", "", DataViewRowState.CurrentRows).ToTable();
                                            if (InLog.Rows.Count > 0)
                                            {

                                                //PartialLeaveInLog

                                                objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), InTimePL.ToString(), InKey, "In", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());

                                                //PartialLeaveOutLog
                                                DateTime strFirstLog = Convert.ToDateTime(InLog.Rows[0]["Event_Time"].ToString());
                                                DateTime dtOut = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strFirstLog.Hour, strFirstLog.Minute, strFirstLog.Second);
                                                if (strFirstLog.Minute == 00)
                                                {
                                                    dtOut = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strFirstLog.Hour - 1, 59, strFirstLog.Second);
                                                }
                                                else
                                                {
                                                    dtOut = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strFirstLog.Hour, strFirstLog.Minute - 1, strFirstLog.Second);
                                                }
                                                objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtOut.ToString(), PartialOutKey, "Out", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());

                                                //For Update time
                                                if (strFromTime == "")
                                                {
                                                    strFromTime = InTimePL.Hour + ":" + InTimePL.Minute;
                                                    string strql = "Update Att_PartialLeave_Request Set From_Time='" + strFromTime + "' where Trans_Id='" + strTrans_Id + "'";
                                                    int a = objDA.execute_Command(strql);
                                                }
                                                if (strToTime == "")
                                                {
                                                    DateTime strToDateTime = InTimePL.AddMinutes(PartialMinInDay);
                                                    strToTime = strToDateTime.Hour + ":" + strToDateTime.Minute;
                                                    string strql = "Update Att_PartialLeave_Request Set To_Time='" + strToTime + "' where Trans_Id='" + strTrans_Id + "'";
                                                    int a = objDA.execute_Command(strql);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {

                                    }
                                }
                                else if (strPLType == "M")
                                {
                                    if (WithKeyPref == "Yes")
                                    {
                                        DataTable MidLogIn = new DataView(Log, "Func_Code ='" + PartialInKey + "' and Verified_Type='By Device'", "", DataViewRowState.CurrentRows).ToTable();
                                        if (MidLogIn.Rows.Count > 0)
                                        {
                                            DateTime dtPLInLog = Convert.ToDateTime(MidLogIn.Rows[0]["Event_Time"].ToString());
                                            dtPLInLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLInLog.Hour, dtPLInLog.Minute, dtPLInLog.Second);
                                            if (dtPLInLog.Minute == 00)
                                            {
                                                dtPLInLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLInLog.Hour, 01, dtPLInLog.Second);
                                            }
                                            else if (dtPLInLog.Minute == 59)
                                            {
                                                dtPLInLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLInLog.Hour + 1, 00, dtPLInLog.Second);
                                            }
                                            else
                                            {
                                                dtPLInLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLInLog.Hour, dtPLInLog.Minute + 1, dtPLInLog.Second);
                                            }

                                            //PartialLeaveInLog
                                            objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtPLInLog.ToString(), PartialInKey, "In", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());

                                            //For Update time

                                            if (strFromTime == "")
                                            {
                                                strFromTime = dtPLInLog.Hour + ":" + dtPLInLog.Minute;
                                                string strql = "Update Att_PartialLeave_Request Set From_Time='" + strFromTime + "' where Trans_Id='" + strTrans_Id + "'";
                                                int a = objDA.execute_Command(strql);
                                            }
                                            if (strToTime == "")
                                            {
                                                DateTime strToDateTime = dtPLInLog.AddMinutes(PartialMinInDay);
                                                strToTime = strToDateTime.Hour + ":" + strToDateTime.Minute;
                                                string strql = "Update Att_PartialLeave_Request Set To_Time='" + strToTime + "' where Trans_Id='" + strTrans_Id + "'";
                                                int a = objDA.execute_Command(strql);
                                            }
                                        }

                                        DataTable MidLogOut = new DataView(Log, "Func_Code ='" + PartialOutKey + "' and Verified_Type='By Device'", "", DataViewRowState.CurrentRows).ToTable();
                                        if (MidLogOut.Rows.Count > 0)
                                        {
                                            DateTime dtPLOutLog = Convert.ToDateTime(MidLogOut.Rows[0]["Event_Time"].ToString());
                                            dtPLOutLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLOutLog.Hour, dtPLOutLog.Minute, dtPLOutLog.Second);
                                            if (dtPLOutLog.Minute == 00)
                                            {
                                                dtPLOutLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLOutLog.Hour - 1, 59, dtPLOutLog.Second);
                                            }
                                            else
                                            {
                                                dtPLOutLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLOutLog.Hour, dtPLOutLog.Minute - 1, dtPLOutLog.Second);
                                            }

                                            //PartialLeaveOutLog
                                            objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtPLOutLog.ToString(), PartialOutKey, "Out", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                        }
                                    }
                                }
                                else if (strPLType == "E")
                                {
                                    if (WithKeyPref == "Yes")
                                    {
                                        //For With Key In Log
                                        OutTimePL = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, OutTimePL.Hour, OutTimePL.Minute, OutTimePL.Second);
                                        DataTable OutLog = new DataView(Log, "Func_Code ='" + OutKey + "' and Event_Time<='" + OutTimePL + "'", "", DataViewRowState.CurrentRows).ToTable();
                                        if (OutLog.Rows.Count > 0)
                                        {
                                            DateTime strLastLog = Convert.ToDateTime(OutLog.Rows[0]["Event_Time"].ToString());
                                            DateTime dtIn = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strLastLog.Hour, strLastLog.Minute, strLastLog.Second);
                                            if (strLastLog.Minute == 00)
                                            {
                                                dtIn = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strLastLog.Hour, 01, strLastLog.Second);
                                            }
                                            else if (strLastLog.Minute == 59)
                                            {
                                                dtIn = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strLastLog.Hour + 1, 00, strLastLog.Second);
                                            }
                                            else
                                            {
                                                dtIn = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strLastLog.Hour, strLastLog.Minute + 1, strLastLog.Second);
                                            }
                                            //PartialLeaveInLog
                                            objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtIn.ToString(), PartialInKey, "In", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());

                                            //PartialLeaveOutLog
                                            objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), OutTimePL.ToString(), OutKey, "Out", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());

                                            //For Update Time
                                            if (strFromTime == "")
                                            {
                                                strFromTime = dtIn.Hour + ":" + dtIn.Minute;
                                                string strql = "Update Att_PartialLeave_Request Set From_Time='" + strFromTime + "' where Trans_Id='" + strTrans_Id + "'";
                                                int a = objDA.execute_Command(strql);
                                            }
                                            if (strToTime == "")
                                            {
                                                DateTime strToDateTime = dtIn.AddMinutes(PartialMinInDay);
                                                strToTime = strToDateTime.Hour + ":" + strToDateTime.Minute;
                                                string strql = "Update Att_PartialLeave_Request Set To_Time='" + strToTime + "' where Trans_Id='" + strTrans_Id + "'";
                                                int a = objDA.execute_Command(strql);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                //if (strPLType == "B")
                                //{
                                //    //PartialLeaveInLog
                                //    objAttLog.InsertAttendanceLog(strCompanyId, empidlist.Split(',')[i].ToString(), "0", strPartialLeaveDate.ToString(), InTimePL.ToString(), InKey, "In", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());

                                //    //PartialLeaveOutLog
                                //    DateTime strToDateTime = InTimePL.AddMinutes(PartialMinInDay);
                                //    objAttLog.InsertAttendanceLog(strCompanyId, empidlist.Split(',')[i].ToString(), "0", strPartialLeaveDate.ToString(), strToDateTime.ToString(), OutKey, "Out", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());

                                //    //For Update Time
                                //    if (strFromTime == "")
                                //    {
                                //        strFromTime = InTimePL.Hour + ":" + InTimePL.Minute;
                                //        string strql = "Update Att_PartialLeave_Request Set From_Time='" + strFromTime + "' where Trans_Id='" + strTrans_Id + "'";
                                //        int a = objDA.execute_Command(strql);
                                //    }
                                //    if (strToTime == "")
                                //    {
                                //        strToTime = strToDateTime.Hour + ":" + strToDateTime.Minute;
                                //        string strql = "Update Att_PartialLeave_Request Set To_Time='" + strToTime + "' where Trans_Id='" + strTrans_Id + "'";
                                //        int a = objDA.execute_Command(strql);
                                //    }
                                //}
                                //else if (strPLType == "M")
                                //{
                                //}
                                //else if (strPLType == "E")
                                //{
                                //    string strPLHour = (float.Parse(PartialMinInDay.ToString()) / float.Parse("60")).ToString();

                                //    DateTime dtNewInTime = new DateTime();
                                //    if (strPLHour != "" && strPLHour != "0")
                                //    {
                                //        dtNewInTime = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, OutTimePL.Hour - int.Parse(strPLHour), OutTimePL.Minute, OutTimePL.Second);
                                //    }

                                //    //PartialLeaveInLog
                                //    objAttLog.InsertAttendanceLog(strCompanyId, empidlist.Split(',')[i].ToString(), "0", strPartialLeaveDate.ToString(), dtNewInTime.ToString(), InKey, "In", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());

                                //    //PartialLeaveOutLog
                                //    objAttLog.InsertAttendanceLog(strCompanyId, empidlist.Split(',')[i].ToString(), "0", strPartialLeaveDate.ToString(), OutTimePL.ToString(), OutKey, "Out", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());

                                //    //For Update Time
                                //    if (strFromTime == "")
                                //    {
                                //        strFromTime = dtNewInTime.Hour + ":" + dtNewInTime.Minute;
                                //        string strql = "Update Att_PartialLeave_Request Set From_Time='" + strFromTime + "' where Trans_Id='" + strTrans_Id + "'";
                                //        int a = objDA.execute_Command(strql);
                                //    }
                                //    if (strToTime == "")
                                //    {
                                //        strToTime = OutTimePL.Hour + ":" + OutTimePL.Minute;
                                //        string strql = "Update Att_PartialLeave_Request Set To_Time='" + strToTime + "' where Trans_Id='" + strTrans_Id + "'";
                                //        int a = objDA.execute_Command(strql);
                                //    }
                                //}
                            }
                        }
                        //End
                    }
                    else if (strPartialLeaveType == "1")
                    {
                        //For PL Official Case
                        if (strTimeTableId == "0" || strTimeTableId == "")
                        {
                            DataTable Log = objAttLog.GetAttendanceLogByDateByEmpId1(strEmpId, strPartialLeaveDate.ToString(), strPartialLeaveDate.ToString());
                            if (WithKeyPref == "Yes")
                            {
                                //For FromTime
                                string dtFromTimeH = strFromTime.Split(':')[0].ToString();
                                string dtFromTimeM = strFromTime.Split(':')[1].ToString();
                                DateTime dtInLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, int.Parse(dtFromTimeH), int.Parse(dtFromTimeM), strPartialLeaveDate.Second);

                                //For OutTime
                                string dtToTimeH = strToTime.Split(':')[0].ToString();
                                string dtToTimeM = strToTime.Split(':')[1].ToString();
                                DateTime dtOutLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, int.Parse(dtToTimeH), int.Parse(dtToTimeM), strPartialLeaveDate.Second);
                                if (Log.Rows.Count > 0)
                                {
                                    //For Check If In  Middle PL
                                    DataTable dtPLMiddle = new DataView(Log, "Func_Code in ('" + PartialInKey + "', '" + PartialOutKey + "')  and Verified_Type='By Device'", "", DataViewRowState.CurrentRows).ToTable();

                                    DataTable dtPLMorning = new DataView(Log, "Func_Code ='" + InKey + "' and Event_Time<='" + dtInLog + "'", "", DataViewRowState.CurrentRows).ToTable();

                                    DataTable dtPLEvening = new DataView(Log, "Func_Code ='" + OutKey + "' and Event_Time>='" + dtOutLog + "'", "", DataViewRowState.CurrentRows).ToTable();

                                    if (dtPLMiddle.Rows.Count > 0)
                                    {
                                        DataTable MidLogIn = new DataView(Log, "Func_Code ='" + PartialInKey + "' and Verified_Type='By Device'", "", DataViewRowState.CurrentRows).ToTable();
                                        if (MidLogIn.Rows.Count > 0)
                                        {
                                            DateTime dtPLInLog = Convert.ToDateTime(MidLogIn.Rows[0]["Event_Time"].ToString());
                                            dtPLInLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLInLog.Hour, dtPLInLog.Minute, dtPLInLog.Second);
                                            if (dtPLInLog.Minute == 00)
                                            {
                                                dtPLInLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLInLog.Hour, 01, dtPLInLog.Second);
                                            }
                                            else if (dtPLInLog.Minute == 59)
                                            {
                                                dtPLInLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLInLog.Hour + 1, 00, dtPLInLog.Second);
                                            }
                                            else
                                            {
                                                dtPLInLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLInLog.Hour, dtPLInLog.Minute + 1, dtPLInLog.Second);
                                            }

                                            //PartialLeaveInLog
                                            objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtPLInLog.ToString(), PartialInKey, "In", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                        }

                                        DataTable MidLogOut = new DataView(Log, "Func_Code ='" + PartialOutKey + "' and Verified_Type='By Device'", "", DataViewRowState.CurrentRows).ToTable();
                                        if (MidLogOut.Rows.Count > 0)
                                        {
                                            DateTime dtPLOutLog = Convert.ToDateTime(MidLogOut.Rows[0]["Event_Time"].ToString());
                                            dtPLOutLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLOutLog.Hour, dtPLOutLog.Minute, dtPLOutLog.Second);
                                            if (dtPLOutLog.Minute == 00)
                                            {
                                                dtPLOutLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLOutLog.Hour - 1, 59, dtPLOutLog.Second);
                                            }
                                            else
                                            {
                                                dtPLOutLog = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, dtPLOutLog.Hour, dtPLOutLog.Minute - 1, dtPLOutLog.Second);
                                            }

                                            //PartialLeaveOutLog
                                            objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtPLOutLog.ToString(), PartialOutKey, "Out", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                        }
                                    }
                                    else if (dtPLMorning.Rows.Count == 0)
                                    {
                                        //For Morning Check
                                        DataTable InLog = new DataView(Log, "Func_Code ='" + InKey + "' and Event_Time>='" + dtInLog + "'", "", DataViewRowState.CurrentRows).ToTable();
                                        if (InLog.Rows.Count > 0)
                                        {
                                            //PartialLeaveInLog
                                            if (strFromTime != "")
                                            {
                                                objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtInLog.ToString(), InKey, "In", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                            }

                                            //PartialLeaveOutLog
                                            if (strToTime != "")
                                            {
                                                DateTime strFirstLog = Convert.ToDateTime(InLog.Rows[0]["Event_Time"].ToString());
                                                DateTime dtOut = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strFirstLog.Hour, strFirstLog.Minute, strFirstLog.Second);
                                                if (strFirstLog.Minute == 00)
                                                {
                                                    dtOut = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strFirstLog.Hour - 1, 59, strFirstLog.Second);
                                                }
                                                else
                                                {
                                                    dtOut = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strFirstLog.Hour, strFirstLog.Minute - 1, strFirstLog.Second);
                                                }
                                                objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtOut.ToString(), PartialOutKey, "Out", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                            }
                                        }
                                    }
                                    else if (dtPLEvening.Rows.Count == 0)
                                    {
                                        //For Evening
                                        DataTable OutLog = new DataView(Log, "Func_Code ='" + OutKey + "' and Event_Time<='" + dtOutLog + "'", "", DataViewRowState.CurrentRows).ToTable();
                                        if (OutLog.Rows.Count > 0)
                                        {
                                            DateTime strLastLog = Convert.ToDateTime(OutLog.Rows[0]["Event_Time"].ToString());
                                            DateTime dtIn = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strLastLog.Hour, strLastLog.Minute, strLastLog.Second);
                                            if (strLastLog.Minute == 00)
                                            {
                                                dtIn = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strLastLog.Hour, 01, strLastLog.Second);
                                            }
                                            else if (strLastLog.Minute == 59)
                                            {
                                                dtIn = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strLastLog.Hour + 1, 00, strLastLog.Second);
                                            }
                                            else
                                            {
                                                dtIn = new DateTime(strPartialLeaveDate.Year, strPartialLeaveDate.Month, strPartialLeaveDate.Day, strLastLog.Hour, strLastLog.Minute + 1, strLastLog.Second);
                                            }
                                            //PartialLeaveInLog
                                            if (strFromTime != "")
                                            {
                                                objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtIn.ToString(), PartialInKey, "In", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                            }

                                            //PartialLeaveOutLog
                                            if (strToTime != "")
                                            {
                                                //PartialLeaveOutLog
                                                objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtOutLog.ToString(), OutKey, "Out", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    //If No Log Exists For That Day
                                    //PartialLeaveInLog
                                    if (strFromTime != "")
                                    {
                                        objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtInLog.ToString(), InKey, "In", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                    }

                                    //PartialLeaveOutLog
                                    if (strToTime != "")
                                    {
                                        objAttLog.InsertAttendanceLog(strCompanyId, strEmpId, "0", strPartialLeaveDate.ToString(), dtOutLog.ToString(), OutKey, "Out", "By Partial Leave", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                    }
                                }
                            }
                        }
                        //End
                    }
                }
            }
        }
        //End New Concept

    }

    public void ExportToFile(string LogFormat, string Filepath, System.IO.FileMode Mode)
    {
        try
        {
            FileStream fs = new FileStream(Filepath, Mode, FileAccess.Write);
            StreamWriter s = new StreamWriter(fs);
            s.BaseStream.Seek(0, SeekOrigin.End);
            s.WriteLine(LogFormat);
            s.Close();
            fs.Close();
        }
        catch
        {
        }
    }

    public string[] autoLogProcess(string strCompanyId, string strBrandId, string strLocationId, string strFinalPayEmp, string strUserId, string strDepId, DateTime FromDate, DateTime ToDate, string strLoginEmpId, DataTable dtLeaveIntegration, string strTimeZoneId, string strConfig_LeaveIntegration, string strconfig_ErrorFile, string strconfig_Shift_Range_Auto)
    {

        string strErrorMessage = string.Empty;
        string[] strResult = new string[2];
        //DataTable dtLeaveIntegration = new DataTable();
        //try
        //{
        //    dtLeaveIntegration = (DataTable)HttpContext.Current.Session["LeaveIntegration"];
        //}
        //catch
        //{
        //    dtLeaveIntegration = null; 
        //}



        if (Common.getCountryTimeFormatStatic(ToDate.ToString(), strTimeZoneId).AddDays(1).Month == Common.getCountryTimeFormatStatic(ToDate.ToString(), strTimeZoneId).Month)
        {
            ToDate = Common.getCountryTimeFormatStatic(ToDate.ToString(), strTimeZoneId).AddDays(1);
        }

        //if(lastLogProcessDay>0)
        //{
        //    FromDate = ToDate.AddDays(-lastLogProcessDay);
        //}


        DataTable dtLeaveType = objDA.return_DataTable("select Leave_Id,leave_name from att_leavemaster where  IsActive='True' and company_id = '" + strCompanyId + "'");

        Att_Employee_Leave objEmpleave = new Att_Employee_Leave(_strConString);
        Att_HalfDay_Request objHalfDay = new Att_HalfDay_Request(_strConString);
        bool LogProcessstatus = false;
        string strLogProceedEmpList = string.Empty;
        try
        {

            DateTime dtbasefromdate = FromDate;
            int LogFlag = 0;
            string LogBeforeJoin = string.Empty;

            DateTime OutTimeE = new DateTime(1990, 1, 1);
            int b = 0;
            // Selected Emp Id 

            //
            string empidlist = strFinalPayEmp;
            // Modified By Nitin Jain On 06/11/2014




            //Add On 22-07-2015
            string strPLWithTimeWithOutTime = string.Empty;

            //Add On 19-05-2015
            string strLateCountWithOutPresent = string.Empty;

            //Add On 17-04-2015
            string strForWorkHour = string.Empty;

            //Add On 27-03-2014
            bool WithShiftWihtoutFKey = false;
            bool HolidayOnWeekOff = false;
            bool SalIncrementEnable = false;

            bool IsNoClockInLate = false;
            int NoCLockInLateMin = 0;
            bool IsNoClockOutEarly = false;
            bool LogPriorityonLeave = false;
            bool AfterEndingInCountAbsent = false;
            string OnDutyTime = string.Empty;
            int NoClockOutEarlyMin = 0;
            string OffDutyTime = string.Empty;
            string BeginingIn = string.Empty;
            string BeginingOut = string.Empty;
            string EndingIn = string.Empty;
            string EndingOut = string.Empty;
            DateTime dtDOJ = new DateTime();
            DateTime BIn = new DateTime();
            DateTime BOut = new DateTime();
            DateTime EIn = new DateTime();
            DateTime EOut = new DateTime();
            DateTime OnTime = new DateTime();
            OnTime = Convert.ToDateTime("1/1/1900 00:00:00");
            DateTime OffTime = new DateTime();
            OffTime = Convert.ToDateTime("1/1/1900 00:00:00");
            string PartialInKey = string.Empty;
            string PartialOutKey = string.Empty;
            string InKey = string.Empty;
            string OutKey = string.Empty;
            string BreakInKey = string.Empty;
            string BreakOutKey = string.Empty;
            string strLogdetail = string.Empty;
            string WeekOff = string.Empty;
            string WorkCalMethod = string.Empty;

            DataTable dtTimeTable = new DataTable();
            string InTime = string.Empty;
            string OutTime = string.Empty;
            DataTable TempIn = new DataTable();
            DataTable TempOut = new DataTable();
            DataTable TempInOut = new DataTable();
            DataTable dtPartialdetail = new DataTable();
            DataTable DtNextPartailInOut = new DataTable();
            DateTime FinancialYearStartDate = new DateTime();
            DateTime FinancialYearEndDate = new DateTime();
            DataTable dtLeaveSummary = new DataTable();
            DataTable dtLeave1 = new DataTable();
            DataTable dtL = new DataTable();
            DataTable dtLeavesummary = new DataTable();

            bool weekoffsandwich = false;
            bool holidaysandwich = false;
            bool IsWeekOff = false;
            bool IsHoliday = false;
            bool IsLeave = false;
            bool IsAbsent = false;
            bool IsTempShift = false;
            bool IsLate = false;
            bool IsEarlyOut = false;
            bool IsOverTime = true;
            bool IsCompOT = false;
            string InException = string.Empty;
            string OutException = string.Empty;
            bool TempFKey = false;
            int FinancialYearMonth = 0;
            int EffectiveWorkMin = 0;
            int WorkMin = 0;
            int BreakRelaxMin = 0;
            int BreakMin = 0;
            int AssignMin = 0;
            int MaxOt = 0;
            int MinOt = 0;
            int OverTimeMin = 0;
            int LateMin = 0;
            int LateRelaxMin = 0;
            int LatePenaltyMin = 0;
            int EarlyMin = 0;
            int EarlyRelaxMin = 0;
            int EarlyPenaltyMin = 0;
            string Partial_Min_Deduct = string.Empty;
            DataTable dtSchedule = new DataTable();
            string DefaultShiftId = string.Empty;
            string PartialMethod = string.Empty;
            bool NoClockIn = false;
            bool NoClockOut = false;
            string WithKeyPref = string.Empty;
            string ExcludeDaysInReprot = string.Empty;
            string WeekOffOTEnabled = string.Empty;
            string HolidayOTEnabled = string.Empty;
            string BreakInTime = string.Empty;
            string BreakOutTime = string.Empty;
            string ShiftRange = string.Empty;
            string LeaveCountOnWeekOff = string.Empty;
            string strWorkCalcMethod = string.Empty;
            string strleaveYear = string.Empty;
            //On 18-08-2015
            string IsOverTimeApproval = string.Empty;


            DataTable dtCompanyParameter = objAppParam.GetApplicationParameterByCompanyId("", strCompanyId);

            dtCompanyParameter = new DataView(dtCompanyParameter, "Brand_Id='" + strBrandId + "' and Location_Id='" + strLocationId + "'", "", DataViewRowState.CurrentRows).ToTable();

            LeaveCountOnWeekOff = GetApplicationParameterValueByParamName("Leave_Count_On_WeekOff", dtCompanyParameter);
            IsOverTimeApproval = GetApplicationParameterValueByParamName("OverTime Approval", dtCompanyParameter);

            WithKeyPref = GetApplicationParameterValueByParamName("With Key Preference", dtCompanyParameter);

            //Add On 17-04-2015
            DataTable dtWorkHour = new DataTable();
            dtWorkHour = new DataView(dtCompanyParameter, "Param_Name='For Work Hour'", "", DataViewRowState.CurrentRows).ToTable();
            if (dtWorkHour.Rows.Count > 0)
            {
                strForWorkHour = dtWorkHour.Rows[0]["Param_Value"].ToString();
            }
            else
            {
                strForWorkHour = "True";
            }

            //Add On 22-07-2015
            DataTable dtPLTimeWithOutTime = new DataTable();
            dtPLTimeWithOutTime = new DataView(dtCompanyParameter, "Param_Name='PLTimeWithOutTime'", "", DataViewRowState.CurrentRows).ToTable();
            if (dtPLTimeWithOutTime.Rows.Count > 0)
            {
                strPLWithTimeWithOutTime = dtPLTimeWithOutTime.Rows[0]["Param_Value"].ToString();
            }
            else
            {
                strPLWithTimeWithOutTime = "True";
            }

            //Add On 19-05-2015
            DataTable dtLateWithoutPresent = new DataTable();
            dtLateWithoutPresent = new DataView(dtCompanyParameter, "Param_Name='LateEarlyWithoutPresent'", "", DataViewRowState.CurrentRows).ToTable();
            if (dtLateWithoutPresent.Rows.Count > 0)
            {
                strLateCountWithOutPresent = dtLateWithoutPresent.Rows[0]["Param_Value"].ToString();
            }
            else
            {
                strLateCountWithOutPresent = "False";
            }
            //ADD ON 03/01/2018
            FinancialYearMonth = Convert.ToInt32(GetApplicationParameterValueByParamName("FinancialYearStartMonth", dtCompanyParameter));

            if (Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Month < FinancialYearMonth)
            {
                FinancialYearStartDate = new DateTime(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Year - 1, FinancialYearMonth, 1);
                FinancialYearEndDate = FinancialYearStartDate.AddYears(1).AddDays(-1);
            }
            else
            {
                FinancialYearStartDate = new DateTime(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Year, FinancialYearMonth, 1);
                FinancialYearEndDate = FinancialYearStartDate.AddYears(1).AddDays(-1);
            }
            DateTime PrevFinancialDate = FinancialYearStartDate.AddYears(-1);


            //added on 12-july-2018
            LogPriorityonLeave = Convert.ToBoolean(GetApplicationParameterValueByParamName("Logs_priority_OnLeave", dtCompanyParameter));
            //Add On 27-03-2014

            holidaysandwich = Convert.ToBoolean(GetApplicationParameterValueByParamName("Absent_sandwich_on_holiday", dtCompanyParameter));
            weekoffsandwich = Convert.ToBoolean(GetApplicationParameterValueByParamName("Absent_sandwich_on_week_Off", dtCompanyParameter));

            WithShiftWihtoutFKey = Convert.ToBoolean(GetApplicationParameterValueByParamName("WithShiftWithoutFunctionKey", dtCompanyParameter));
            SalIncrementEnable = Convert.ToBoolean(GetApplicationParameterValueByParamName("Salary_Increment_Enable", dtCompanyParameter));

            //Add On 10-08-2015
            HolidayOnWeekOff = Convert.ToBoolean(GetApplicationParameterValueByParamName("Holiday Assign On Week Off", dtCompanyParameter));

            NoClockIn = Convert.ToBoolean(GetApplicationParameterValueByParamName("No_Clock_In_CountAsAbsent", dtCompanyParameter));
            NoClockOut = Convert.ToBoolean(GetApplicationParameterValueByParamName("No_Clock_Out_CountAsAbsent", dtCompanyParameter));
            // No Clock In/Out Late/Early Parameter..... By Nitin jain on 21/10/2014
            IsNoClockInLate = Convert.ToBoolean(GetApplicationParameterValueByParamName("IsNoClockInLate", dtCompanyParameter));
            IsNoClockOutEarly = Convert.ToBoolean(GetApplicationParameterValueByParamName("IsNoClockOutEarly", dtCompanyParameter));
            AfterEndingInCountAbsent = Convert.ToBoolean(GetApplicationParameterValueByParamName("AfterEndingInAbsent", dtCompanyParameter));
            NoCLockInLateMin = Convert.ToInt32(GetApplicationParameterValueByParamName("NoClockInLateMin", dtCompanyParameter));
            NoClockOutEarlyMin = Convert.ToInt32(GetApplicationParameterValueByParamName("NoClockOutEarlyMin", dtCompanyParameter));
            //........................................................................

            PartialMethod = GetApplicationParameterValueByParamName("Partial_Penalty_Method", dtCompanyParameter);


            Partial_Min_Deduct = GetApplicationParameterValueByParamName("Partial_Penalty_Min_Deduct", dtCompanyParameter);
            DefaultShiftId = GetApplicationParameterValueByParamName("Default_Shift", dtCompanyParameter);
            // Company Level Over Time Parameter
            IsCompOT = Convert.ToBoolean(GetApplicationParameterValueByParamName("IsOverTime", dtCompanyParameter));
            MaxOt = int.Parse(GetApplicationParameterValueByParamName("Max Over Time Min", dtCompanyParameter));
            MinOt = int.Parse(GetApplicationParameterValueByParamName("Min OVer Time Min", dtCompanyParameter));
            WeekOff = GetApplicationParameterValueByParamName("Week Off Days", dtCompanyParameter);
            PartialInKey = GetApplicationParameterValueByParamName("Partial Leave In  Func Key", dtCompanyParameter);
            PartialOutKey = GetApplicationParameterValueByParamName("Partial Leave Out  Func Key", dtCompanyParameter);


            InKey = GetApplicationParameterValueByParamName("In Func Key", dtCompanyParameter);
            OutKey = GetApplicationParameterValueByParamName("Out Func Key", dtCompanyParameter);
            BreakInKey = GetApplicationParameterValueByParamName("Break In Func Key", dtCompanyParameter);
            BreakOutKey = GetApplicationParameterValueByParamName("Break Out Func Key", dtCompanyParameter);
            // Modified On 29/08/2014 For Shift Range....
            ShiftRange = GetApplicationParameterValueByParamName("Shift Range", dtCompanyParameter);
            // ..........................................
            ExcludeDaysInReprot = GetApplicationParameterValueByParamName("Exclude Day As Absent or IsOff", dtCompanyParameter);
            LateIn_MinuteDeductionType = GetApplicationParameterValueByParamName("LateIn_MinuteDeduction_Type", dtCompanyParameter);
            EarlyOut_MinuteDeductionType = GetApplicationParameterValueByParamName("EarlyOut_MinuteDeduction_Type", dtCompanyParameter);
            WeekOffOTEnabled = GetApplicationParameterValueByParamName("WeekOffOTEnable", dtCompanyParameter);
            HolidayOTEnabled = GetApplicationParameterValueByParamName("HolidayOTEnable", dtCompanyParameter);
            //Here we get default shift data
            DataTable dtShift = new DataTable();
            dtShift = objShift.GetShiftDescriptionByShiftId(DefaultShiftId);

            string strValue = string.Empty;
            int counter = 0;

            DataTable dtLog = new DataTable();
            DataTable dtPartial = new DataTable();
            DataTable dtBreakInOut = new DataTable();
            DataTable dtPartialLog = new DataTable();
            DataTable dtLogTemp = new DataTable();
            DataTable dtregistersandwich = new DataTable();
            DataTable dtHalfDay = objHalfDay.GetHalfDayRequest(strCompanyId);
            dtHalfDay = new DataView(dtHalfDay, "Is_Confirmed='Approved'", "", DataViewRowState.CurrentRows).ToTable();
            DataTable dtEmpHalfDay = new DataTable();
            string strCheckIn_by_deviceId = "0";
            string strCheckOut_by_deviceId = "0";
            string strBreak_in = "1/1/1900";
            string strBreak_Out = "1/1/1900";
            string strLeave_Type_Id = "0";
            string strHoliday_Id = "0";
            int HalfDaycount = 0;

            //added rollback transaction on 07-09-2017
            //added by jitendra upadhyay for code optimization


            //DataTable dtEmpLog = objAttLog.GetAttendanceLog(strCompanyId);


            //dtEmpLog = new DataView(dtEmpLog, "Event_Date >='" + Convert.ToDateTime(txtFromDate.Text).AddDays(-1).ToString() + "' and Event_Date<='" + Convert.ToDateTime(txtToDate.Text).AddDays(1).ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();

            //Here loop of employee will start
            for (int i = 0; i < empidlist.Split(',').Length; i++)
            {

                if (empidlist.Split(',')[i] == "" || empidlist.Split(',')[i] == "0")
                {
                    continue;
                }
                string strEmpCode = string.Empty;
                string EmployeeLevel = "Employee";
                DataTable dt = objDA.return_DataTable("SELECT Field1,Emp_code,DOJ FROM Set_EmployeeMaster where set_EmployeeMaster.Emp_Id = " + empidlist.Split(',')[i].ToString() + "");
                //DataTable dt = objEmp.GetEmployeeMasterById(strCompanyId, empidlist.Split(',')[i].ToString());
                if (dt.Rows.Count > 0)
                {
                    EmployeeLevel = dt.Rows[0]["Field1"].ToString();
                    dtDOJ = DateTime.Parse(dt.Rows[0]["DOJ"].ToString());
                    strErrorMessage = dt.Rows[0]["Emp_Code"].ToString();
                    strEmpCode = dt.Rows[0]["Emp_Code"].ToString();
                }

                counter++;

                strLogProceedEmpList += empidlist.Split(',')[i].ToString() + ",";
                if (dtHalfDay.Rows.Count > 0)
                {
                    dtEmpHalfDay = new DataView(dtHalfDay, "Emp_Id=" + empidlist.Split(',')[i].ToString() + "", "", DataViewRowState.CurrentRows).ToTable();
                }
                FromDate = new DateTime(dtbasefromdate.Year, dtbasefromdate.Month, dtbasefromdate.Day);
                if (strPLWithTimeWithOutTime == "False")
                {
                    //Add New Concept Of Log Insert For Partial Leave On 20-07-2015 By Lokesh
                    InsertPartIalLogFunctionality(dtCompanyParameter, strCompanyId, empidlist.Split(',')[i].ToString(), FromDate, ToDate, WithKeyPref, InKey, OutKey, PartialInKey, PartialOutKey, strUserId, strTimeZoneId);
                }

                //Create objects of data tables



                //Get log from Att_AttendanceLog table


                //dtLog = new DataView(dtEmpLog, "Emp_Id=" + empidlist.Split(',')[i] + "", "", DataViewRowState.CurrentRows).ToTable();

                dtLog = objAttLog.GetAttendanceLogByDateByEmpId1(empidlist.Split(',')[i], FromDate.AddDays(-1).ToString(), ToDate.AddDays(1).ToString());
                dtLogTemp = dtLog;
                //dtLog = objAttLog.GetAttendanceLogByDateByEmpId1(empidlist.Split(',')[i], FromDate.AddDays(-1).ToString(), ToDate.AddDays(1).ToString());
                //If key base then go to if condition
                if (WithKeyPref == "Yes")
                {
                    dtBreakInOut = new DataView(dtLog, "Func_Code in('" + BreakInKey + "','" + BreakOutKey + "') ", "", DataViewRowState.CurrentRows).ToTable();

                    if (PartialInKey != "" && PartialOutKey != "")
                    {
                        // Avoid Partial Key Log In DataTable
                        dtPartialLog = new DataView(dtLog, "Func_Code in('" + PartialInKey + "','" + PartialOutKey + "') ", "", DataViewRowState.CurrentRows).ToTable();
                    }

                    dtLog = new DataView(dtLog, "Func_Code in('" + InKey + "','" + OutKey + "') ", "", DataViewRowState.CurrentRows).ToTable();
                }

                WorkCalMethod = GetWorkCalculationMethod(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter);
                strWorkCalcMethod = WorkCalMethod;


                // Delete Record in Attendace Register Acc to EmpId and From Date to To Date
                //string FinalDate = new DateTime(FromDate.Year, FromDate.Month, DateTime.DaysInMonth(FromDate.Year, FromDate.Month)).ToString("dd-MMM-yyyy").ToString();
                objAttReg.DeleteAttendanceRegister(empidlist.Split(',')[i].ToString(), FromDate.ToString(), ToDate.ToString());
                dtLog = dtLogTemp;
                //While loop start between from date and to date

                //Date For Test On 19-05-2015
                //FromDate = DateTime.Parse("12/17/2015 12:00:00 AM");
                //ToDate = DateTime.Parse("12/17/2015 12:00:00 AM");
                //dtSchedule = objEmpSch.GetSheduleDescription(empidlist.Split(',')[i].ToString());
                DataTable dtLeaveInfo = new DataTable();
                while (FromDate <= ToDate)
                {
                    IsHoliday = false;
                    strLogdetail = "";
                    dtLog = dtLogTemp;
                    IsLeave = false;
                    TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                    strLogdetail = String.Join(",", TempInOut.AsEnumerable().Select(x => x.Field<string>("Event_Time1").ToString()).ToArray());

                    dtLeaveInfo = IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());

                    strCheckIn_by_deviceId = "0";
                    strCheckOut_by_deviceId = "0";
                    strBreak_in = "1/1/1900";
                    strBreak_Out = "1/1/1900";
                    strLeave_Type_Id = "0";
                    strHoliday_Id = "0";
                    HalfDaycount = 0;

                    //here we getting data from client database so we will run code accroding the app config setting
                    //if  ConfigurationManager.AppSettings["DBLogicalName"].ToString()=1 then we will fetch data from client database otherwise no
                    //we added this code for sultan center

                    if (strConfig_LeaveIntegration == "1")
                    {
                        //if (HttpContext.Current.Session["LeaveIntegration"] != null)
                        //{
                        if (dtLeaveIntegration != null)
                        {
                            try
                            {
                                DataTable dtLeaveIntegration1 = new DataView(dtLeaveIntegration, "'" + FromDate.ToString() + "'>=fromdate and '" + FromDate.ToString() + "'<=todate and employeecode='" + strEmpCode + "' ", "", DataViewRowState.CurrentRows).ToTable();
                                if (dtLeaveIntegration1.Rows.Count > 0)
                                {
                                    IsLeave = true;
                                    DataTable dtLeaveType1 = new DataView(dtLeaveType, "Leave_Name='" + dtLeaveIntegration1.Rows[0]["shiftnameleavetype"].ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();
                                    if (dtLeaveType1.Rows.Count > 0)
                                    {
                                        strLeave_Type_Id = dtLeaveType1.Rows[0]["Leave_Id"].ToString();
                                    }
                                }
                                else if (dtLeaveInfo.Rows.Count > 0)
                                {
                                    IsLeave = true;
                                    strLeave_Type_Id = dtLeaveInfo.Rows[0]["Leave_Type_Id"].ToString();

                                }
                            }
                            catch (Exception ex)
                            {
                                if (strconfig_ErrorFile == "1")
                                {
                                    ExportToFile(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString() + "'" + ex.Message.ToString() + "'", "C:\\PegasusSQL\\LogProcessError.txt", FileMode.Append);
                                }
                                IsLeave = false;
                            }
                        }
                    }
                    else
                    {
                        //IsLeave = IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                        if (dtLeaveInfo.Rows.Count > 0)
                        {
                            IsLeave = true;
                            strLeave_Type_Id = dtLeaveInfo.Rows[0]["Leave_Type_Id"].ToString();
                        }
                    }

                    if (!IsLeave)
                    {
                        IsHoliday = objEmpHoliday.GetEmployeeHolidayOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                    }

                    if (dtEmpHalfDay != null && dtEmpHalfDay.Rows.Count > 0)
                    {
                        try
                        {
                            HalfDaycount = new DataView(dtEmpHalfDay, "HalfDay_Date='" + FromDate + "'", "", DataViewRowState.CurrentRows).ToTable().Rows.Count;
                        }
                        catch
                        {
                            HalfDaycount = 0;
                        }
                    }

                    //here we are checking that if employee applied for leave for specific date but we found log then leave remaining balance will be increase by 1 and also we will update row in leave request child table as counted .
                    //when log priority on leave parameter is true
                    //if (ConfigurationManager.AppSettings["LeaveIntegration"].ToString().Trim() == "0" && IsLeave)
                    //{

                    //    if (LogPriorityonLeave)
                    //    {
                    //        if (TempInOut.Rows.Count > 0)
                    //        {
                    //            IsLeave = false;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        dtLog = new DataView(dtLog, "Event_Date='1/1/1900'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                    //    }


                    //    strLeave_Type_Id = updateEmployeeaLeavebalance(empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtLog, LogPriorityonLeave);


                    //}



                    if (IsHoliday)
                    {
                        strHoliday_Id = objEmpHoliday.GetEmployeeHolidayIDOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                    }


                    try
                    {
                        strBreak_in = new DataView(dtBreakInOut, "Event_Date='" + FromDate.ToString() + "' and Func_Code in('" + BreakInKey + "')", "Event_Time", DataViewRowState.CurrentRows).ToTable().Rows[0]["Event_Time"].ToString();
                    }
                    catch
                    {
                        strBreak_in = "1/1/1900";
                    }
                    try
                    {
                        strBreak_Out = new DataView(dtBreakInOut, "Event_Date='" + FromDate.ToString() + "' and Func_Code in('" + BreakOutKey + "')", "Event_Time desc", DataViewRowState.CurrentRows).ToTable().Rows[0]["Event_Time"].ToString();
                    }
                    catch
                    {
                        strBreak_Out = "1/1/1900";
                    }



                    TempFKey = false;
                    IsOverTime = false;
                    OverTimeMin = 0;
                    IsLate = false;
                    LateMin = 0;
                    IsEarlyOut = false;
                    EarlyMin = 0;
                    AssignMin = 0;
                    WorkMin = 0;
                    LateRelaxMin = 0;
                    LatePenaltyMin = 0;
                    EarlyRelaxMin = 0;
                    EarlyPenaltyMin = 0;
                    EffectiveWorkMin = 0;
                    InException = string.Empty;
                    OutException = string.Empty;
                    //Here We are Getting Schedule of Particular Date Only
                    dtSchedule = objEmpSch.GetSheduleDescriptionByEmpId(empidlist.Split(',')[i].ToString(), FromDate.ToString());

                    //DtDOJ

                    // if Employee Has no Schedule then we will run else part  otherwise if
                    if (dtSchedule.Rows.Count > 0)
                    {

                        // OnTime = Convert.ToDateTime(dtSchedule.Rows[t]["OnDuty_Time"].ToString());
                        // OffTime = Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString());
                        bool bCheck = false;

                        if (strconfig_Shift_Range_Auto == "True")
                        {

                            for (int t = 0; t < dtSchedule.Rows.Count; t++)
                            {
                                if (dtSchedule.Rows[t]["OnDuty_Time"].ToString() == "" || dtSchedule.Rows[t]["OffDuty_Time"].ToString() == "")
                                {
                                    continue;
                                }


                                if (dtSchedule.Rows.Count == 1)
                                {
                                    if (Convert.ToDateTime(dtSchedule.Rows[t]["OnDuty_Time"].ToString()) < Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString()))
                                    {
                                        bCheck = true;
                                    }
                                }
                                else
                                {
                                    if (Convert.ToDateTime(dtSchedule.Rows[dtSchedule.Rows.Count - 1]["OnDuty_Time"].ToString()) < Convert.ToDateTime(dtSchedule.Rows[dtSchedule.Rows.Count - 1]["OffDuty_Time"].ToString()))
                                    {
                                        bCheck = true;
                                    }

                                }


                            }
                        }


                        if (bCheck)
                        {
                            string[] arrResult;

                            //public string[] UpdateTimetable(DateTime OndutyTime1, DateTime Offdutytime1, DateTime OndutyTime2, DateTime Offdutytime2, int mIndex, int tSize, string lEndingOut)
                            for (int t = 0; t < dtSchedule.Rows.Count; t++)
                            {
                                if (dtSchedule.Rows.Count == 1)
                                {
                                    arrResult = UpdateTimetable(Convert.ToDateTime(dtSchedule.Rows[t]["OnDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString()), t, dtSchedule.Rows.Count, "NA");
                                    dtSchedule.Rows[t]["Beginning_In"] = arrResult[0].ToString();
                                    dtSchedule.Rows[t]["Ending_In"] = arrResult[1].ToString();
                                    dtSchedule.Rows[t]["Beginning_Out"] = arrResult[2].ToString();
                                    dtSchedule.Rows[t]["Ending_Out"] = arrResult[3].ToString();
                                    dtSchedule.AcceptChanges();
                                }
                                else if ((dtSchedule.Rows.Count - 1) == t)
                                {
                                    arrResult = UpdateTimetable(Convert.ToDateTime(dtSchedule.Rows[t]["OnDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString()), t, dtSchedule.Rows.Count, dtSchedule.Rows[t - 1]["Ending_Out"].ToString());
                                    dtSchedule.Rows[t]["Beginning_In"] = arrResult[0].ToString();
                                    dtSchedule.Rows[t]["Ending_In"] = arrResult[1].ToString();
                                    dtSchedule.Rows[t]["Beginning_Out"] = arrResult[2].ToString();
                                    dtSchedule.Rows[t]["Ending_Out"] = arrResult[3].ToString();
                                    dtSchedule.AcceptChanges();

                                }
                                else
                                {
                                    if (t == 0)
                                    {
                                        arrResult = UpdateTimetable(Convert.ToDateTime(dtSchedule.Rows[t]["OnDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t + 1]["OnDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t + 1]["OffDuty_Time"].ToString()), t, dtSchedule.Rows.Count, "NA");
                                    }
                                    else
                                    {


                                        arrResult = UpdateTimetable(Convert.ToDateTime(dtSchedule.Rows[t]["OnDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t + 1]["OnDuty_Time"].ToString()), Convert.ToDateTime(dtSchedule.Rows[t + 1]["OffDuty_Time"].ToString()), t, dtSchedule.Rows.Count, dtSchedule.Rows[t - 1]["Ending_Out"].ToString());

                                    }
                                    dtSchedule.Rows[t]["Beginning_In"] = arrResult[0].ToString();
                                    dtSchedule.Rows[t]["Ending_In"] = arrResult[1].ToString();
                                    dtSchedule.Rows[t]["Beginning_Out"] = arrResult[2].ToString();
                                    dtSchedule.Rows[t]["Ending_Out"] = arrResult[3].ToString();
                                    dtSchedule.AcceptChanges();

                                }
                            }


                        }



                        //for loop for schedule on particular date only
                        for (int t = 0; t < dtSchedule.Rows.Count; t++)
                        {




                            ////Add On 27-03-2014
                            TempFKey = WithShiftWihtoutFKey;

                            OverTimeMin = 0;
                            IsLate = false;
                            LateMin = 0;
                            IsEarlyOut = false;
                            EarlyMin = 0;
                            AssignMin = 0;
                            WorkMin = 0;
                            LateRelaxMin = 0;
                            LatePenaltyMin = 0;
                            EffectiveWorkMin = 0;
                            EarlyRelaxMin = 0;
                            EarlyPenaltyMin = 0;

                            if (!Convert.ToBoolean(dtSchedule.Rows[t]["Is_Off"].ToString()))
                            {
                                OnDutyTime = GetTime24(dtSchedule.Rows[t]["OnDuty_Time"].ToString());
                                OffDutyTime = GetTime24(dtSchedule.Rows[t]["OffDuty_Time"].ToString());
                                BeginingIn = dtSchedule.Rows[t]["Beginning_In"].ToString();
                                EndingIn = dtSchedule.Rows[t]["Ending_In"].ToString();
                                BeginingOut = dtSchedule.Rows[t]["Beginning_Out"].ToString();
                                EndingOut = dtSchedule.Rows[t]["Ending_Out"].ToString();

                                BIn = Convert.ToDateTime(dtSchedule.Rows[t]["Beginning_In"].ToString());
                                EIn = Convert.ToDateTime(dtSchedule.Rows[t]["Ending_In"].ToString());
                                BOut = Convert.ToDateTime(dtSchedule.Rows[t]["Beginning_Out"].ToString());
                                EOut = Convert.ToDateTime(dtSchedule.Rows[t]["Ending_Out"].ToString());
                                OnTime = Convert.ToDateTime(dtSchedule.Rows[t]["OnDuty_Time"].ToString());
                                OffTime = Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString());
                                try
                                {
                                    BreakRelaxMin = int.Parse(dtSchedule.Rows[t]["Field1"].ToString());
                                }
                                catch (Exception Ex)
                                {

                                }


                                //


                                //for get log detail accorrding assigned shift

                                strLogdetail = "";
                                BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);

                                if (Convert.ToDateTime(dtSchedule.Rows[t]["OnDuty_Time"].ToString()) < Convert.ToDateTime(dtSchedule.Rows[t]["OffDuty_Time"].ToString()))
                                {
                                    EOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EOut.Hour, EOut.Minute, EOut.Second);
                                }
                                else
                                {
                                    EOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EOut.Hour, EOut.Minute, EOut.Second);
                                }
                                DataTable dtloginfo = new DataView(dtLog, "Event_Time>='" + BIn + "'  and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                strLogdetail = String.Join(",", dtloginfo.AsEnumerable().Select(x => x.Field<string>("Event_Time1").ToString()).ToArray());
                                //foreach (DataRow dr in dtloginfo.Rows)
                                //{
                                //    strLogdetail += dr["Event_Time1"].ToString() + ",";
                                //}


                                BreakMin = int.Parse(dtSchedule.Rows[t]["Break_Min"].ToString());
                                AssignMin = int.Parse(dtSchedule.Rows[t]["Work_Minute"].ToString());
                                AssignMin += BreakRelaxMin + BreakMin;


                                if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                {
                                    TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                    OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                    OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);



                                }
                                else
                                {
                                    // Modified By Nitin Jain , Date 04/08/2014
                                    if (Convert.ToDateTime(BeginingIn) > Convert.ToDateTime(OnDutyTime))
                                    {
                                        TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    else
                                    {
                                        TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }

                                    if (Convert.ToDateTime(BeginingIn) >= Convert.ToDateTime(OnDutyTime))
                                    {
                                        OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                        OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                    }
                                    else
                                    {
                                        OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                        OffTime = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                    }
                                }


                                try
                                {
                                    strBreak_in = new DataView(dtBreakInOut, "Func_Code in('" + BreakInKey + "') and Event_Time>='" + OnTime + "' and Event_Time<='" + OffTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable().Rows[0]["Event_Time"].ToString();
                                }
                                catch (Exception ex)
                                {
                                    strBreak_in = "1/1/1900";
                                }

                                try
                                {
                                    strBreak_Out = new DataView(dtBreakInOut, "Func_Code in('" + BreakOutKey + "') and Event_Time>='" + OnTime + "' and Event_Time<='" + OffTime + "'", "Event_Time desc", DataViewRowState.CurrentRows).ToTable().Rows[0]["Event_Time"].ToString();
                                }
                                catch (Exception ex)
                                {
                                    strBreak_Out = "1/1/1900";
                                }




                                /////
                                //If Log Exists
                                if (TempInOut.Rows.Count > 0)
                                {
                                    //InTime

                                    if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingIn))
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            //Add On 27-03-2014
                                            if (Convert.ToBoolean(TempFKey))
                                            {
                                                TempIn = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            else
                                            {
                                                TempIn = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "' and Func_Code='" + InKey + "' ", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                        }
                                        else
                                        {
                                            TempIn = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);
                                        EIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EIn.Hour, EIn.Minute, EIn.Second);
                                        TempIn = new DataView(TempIn, "Event_Time>='" + BIn + "'  and Event_Time<='" + EIn + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    else
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            //Add On 27-03-2015
                                            if (Convert.ToBoolean(TempFKey))
                                            {
                                                if (Convert.ToDateTime(BeginingIn) > Convert.ToDateTime(OnDutyTime))
                                                {
                                                    TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                }
                                                else
                                                {
                                                    TempIn = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                }
                                            }
                                            else
                                            {
                                                TempIn = new DataView(dtLog, "Func_Code='" + InKey + "' and Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                        }
                                        else
                                        {
                                            // Modified By Nitin Jain , Modified Date 04/08/2014
                                            if (Convert.ToDateTime(BeginingIn) > Convert.ToDateTime(OnDutyTime))
                                            {
                                                TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            else
                                            {
                                                TempIn = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                        }
                                        // Modified By Nitin Jain , Modified Date 04/08/2014
                                        if (Convert.ToDateTime(BeginingIn) > Convert.ToDateTime(OnDutyTime))
                                        {
                                            BIn = new DateTime(FromDate.AddDays(-1).Year, FromDate.AddDays(-1).Month, FromDate.AddDays(-1).Day, BIn.Hour, BIn.Minute, BIn.Second);
                                            EIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EIn.Hour, EIn.Minute, EIn.Second);

                                            TempIn = new DataView(TempInOut, "Event_Time>='" + BIn + "'  and Event_Time<='" + EIn + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);
                                            EIn = new DateTime(FromDate.AddDays(+1).Year, FromDate.AddDays(+1).Month, FromDate.AddDays(+1).Day, EIn.Hour, EIn.Minute, EIn.Second);

                                            TempIn = new DataView(TempIn, "Event_Time>='" + BIn + "'  and Event_Time<='" + EIn + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                    }

                                    if (TempIn.Rows.Count > 0)
                                    {
                                        InTime = TempIn.Rows[0]["Event_Time"].ToString();

                                        strCheckIn_by_deviceId = TempIn.Rows[0]["Device_Id"].ToString();
                                    }
                                    else
                                    {
                                        InTime = "1/1/1900";
                                    }

                                    //Out Time
                                    if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            //Add On 27-03-2015
                                            if (Convert.ToBoolean(TempFKey))
                                            {
                                                TempOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            else
                                            {
                                                TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                        }
                                        else
                                        {
                                            TempOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        BOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BOut.Hour, BOut.Minute, BOut.Second);
                                        EOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EOut.Hour, EOut.Minute, EOut.Second);
                                        TempOut = new DataView(TempOut, "Event_Time>='" + BOut + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    else
                                    {
                                        if (Convert.ToDateTime(BeginingOut) <= Convert.ToDateTime(EndingOut))
                                        {
                                            if (WithKeyPref == "Yes")
                                            {
                                                //Add On 27-03-2015
                                                if (Convert.ToBoolean(TempFKey))
                                                {
                                                    if (Convert.ToDateTime(BeginingIn) > Convert.ToDateTime(OnDutyTime))
                                                    {
                                                        TempOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                        BOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BOut.Hour, BOut.Minute, BOut.Second);
                                                        EOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EOut.Hour, EOut.Minute, EOut.Second);
                                                        TempOut = new DataView(TempOut, "Event_Time>='" + BOut + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    }
                                                    else
                                                    {
                                                        TempOut = new DataView(dtLog, "Event_Date='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                        BOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, BOut.Hour, BOut.Minute, BOut.Second);
                                                        EOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EOut.Hour, EOut.Minute, EOut.Second);
                                                        TempOut = new DataView(TempOut, "Event_Time>='" + BOut + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    }
                                                }
                                                else
                                                {
                                                    TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                }
                                            }
                                            else
                                            {
                                                // Modified By Nitin Jain , Modified Date 04/08/2014
                                                if (Convert.ToDateTime(BeginingIn) > Convert.ToDateTime(OnDutyTime))
                                                {
                                                    TempOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    BOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BOut.Hour, BOut.Minute, BOut.Second);
                                                    EOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EOut.Hour, EOut.Minute, EOut.Second);
                                                    TempOut = new DataView(TempOut, "Event_Time>='" + BOut + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                }
                                                else
                                                {
                                                    TempOut = new DataView(dtLog, "Event_Date='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    BOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, BOut.Hour, BOut.Minute, BOut.Second);
                                                    EOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EOut.Hour, EOut.Minute, EOut.Second);
                                                    TempOut = new DataView(TempOut, "Event_Time>='" + BOut + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (WithKeyPref == "Yes")
                                            {
                                                //Add On 27-03-2015
                                                if (Convert.ToBoolean(TempFKey))
                                                {
                                                    TempOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                }
                                                else
                                                {
                                                    TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                }
                                            }
                                            else
                                            {
                                                TempOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            BOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BOut.Hour, BOut.Minute, BOut.Second);
                                            EOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EOut.Hour, EOut.Minute, EOut.Second);

                                            TempOut = new DataView(TempOut, "Event_Time>='" + BOut + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                    }
                                    if (TempOut.Rows.Count > 0)
                                    {
                                        //update on 01-05-2015
                                        if (TempOut.Rows.Count == 2)
                                        {
                                            //Update For MEW On 12-06-2015
                                            OutTime = TempOut.Rows[1]["Event_Time"].ToString();


                                            strCheckOut_by_deviceId = TempOut.Rows[1]["Device_Id"].ToString();

                                            if (Convert.ToDateTime(InTime) < Convert.ToDateTime(OutTime))
                                            {

                                            }
                                            else
                                            {
                                                OutTime = "";
                                            }
                                        }
                                        else
                                        {
                                            OutTime = "";
                                        }

                                        if (OutTime == "")
                                        {
                                            OutTime = TempOut.Rows[TempOut.Rows.Count - 1]["Event_Time"].ToString();

                                            strCheckOut_by_deviceId = TempOut.Rows[TempOut.Rows.Count - 1]["Device_Id"].ToString();


                                            if (Convert.ToDateTime(InTime) > Convert.ToDateTime(OutTime))
                                            {
                                                InTime = "1/1/1900";
                                            }
                                            else
                                            {
                                                OutTime = TempOut.Rows[TempOut.Rows.Count - 1]["Event_Time"].ToString();

                                                strCheckOut_by_deviceId = TempOut.Rows[TempOut.Rows.Count - 1]["Device_Id"].ToString();

                                            }
                                        }
                                        //OutTime = TempOut.Rows[TempOut.Rows.Count - 1]["Event_Time"].ToString();
                                    }
                                    else
                                    {

                                        OutTime = "1/1/1900";
                                        //OutTime = InTime;
                                    }


                                    // COde Commented on 29/09/2014...............

                                    if (InTime == "1/1/1900" || OutTime == "1/1/1900")
                                    {
                                        if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                        {

                                            TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                            BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);
                                            EOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EOut.Hour, EOut.Minute, EOut.Second);

                                            TempInOut = new DataView(TempInOut, "Event_Time>='" + BIn + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                        }
                                        else
                                        {
                                            //Modified By Nitin Jain, Modified Date 04/08/2014
                                            if (Convert.ToDateTime(BeginingIn) > Convert.ToDateTime(OnDutyTime))
                                            {
                                                TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                BIn = new DateTime(FromDate.AddDays(-1).Year, FromDate.AddDays(-1).Month, FromDate.AddDays(-1).Day, BIn.Hour, BIn.Minute, BIn.Second);
                                                EOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EOut.Hour, EOut.Minute, EOut.Second);
                                                TempInOut = new DataView(TempInOut, "Event_Time>='" + BIn + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            else
                                            {
                                                TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);
                                                EOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EOut.Hour, EOut.Minute, EOut.Second);
                                                TempInOut = new DataView(TempInOut, "Event_Time>='" + BIn + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                        }
                                        if (TempInOut.Rows.Count > 0)
                                        {
                                            if (WithKeyPref == "Yes")
                                            {
                                                //Add On 27-03-2015
                                                if (Convert.ToBoolean(TempFKey))
                                                {
                                                    InTime = TempInOut.Rows[0]["Event_Time"].ToString();

                                                    strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                    OutTime = TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString();
                                                    strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                                }
                                                else
                                                {
                                                    DataTable DtIn = new DataView(TempInOut, "Func_Code='" + InKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    DataTable DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    try
                                                    {
                                                        InTime = DtIn.Rows[0]["Event_Time"].ToString();
                                                        strCheckIn_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();
                                                    }
                                                    catch
                                                    {
                                                        InTime = "1/1/1900";
                                                        //comment on 01-05-2015
                                                        //try
                                                        //{
                                                        //    InTime = DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString();
                                                        //}
                                                        //catch
                                                        //{
                                                        //    InTime = OutTime;
                                                        //}
                                                    }
                                                    try
                                                    {
                                                        OutTime = DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString();
                                                        strCheckOut_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();

                                                    }
                                                    catch
                                                    {
                                                        //Update On 10-03-2015
                                                        //OutTime = InTime;
                                                    }
                                                }
                                            }
                                            else
                                            {

                                                //updated by jitendra upadhyay on 13-10-2017
                                                //out time was showing in intime and before now it was not checking in and out time according time table

                                                //code start
                                                InTime = TempInOut.Rows[0]["Event_Time"].ToString();

                                                strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                OutTime = TempInOut.Rows[0]["Event_Time"].ToString();
                                                strCheckOut_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                if (Convert.ToDateTime(InTime) >= Convert.ToDateTime(BIn) && Convert.ToDateTime(InTime) <= Convert.ToDateTime(EIn))
                                                {
                                                    InTime = TempInOut.Rows[0]["Event_Time"].ToString();
                                                    strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                }
                                                else
                                                {
                                                    InTime = "1/1/1900";
                                                }

                                                if (Convert.ToDateTime(OutTime) >= Convert.ToDateTime(BOut) && Convert.ToDateTime(OutTime) <= Convert.ToDateTime(EOut))
                                                {
                                                    //code modified by jitendra upadhyay on 15-05-2018 and commented old code
                                                    //start
                                                    if (TempInOut.Rows.Count == 1)
                                                    {
                                                        OutTime = TempInOut.Rows[0]["Event_Time"].ToString();
                                                    }
                                                    else
                                                    {
                                                        OutTime = TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString();
                                                    }
                                                    //end
                                                    //OutTime = TempInOut.Rows[0]["Event_Time"].ToString();
                                                    strCheckOut_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();

                                                }
                                                else
                                                {
                                                    OutTime = "1/1/1900";
                                                }
                                                //code end

                                                //new DataView(dTempInOut, "", "", DataViewRowState.CurrentRows).ToTable();

                                                //InTime = TempInOut.Rows[0]["Event_Time"].ToString();
                                                //OutTime = TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString();
                                            }
                                        }
                                    }
                                    // ......................................

                                    if (InTime == "1/1/1900" && OutTime != "1/1/1900")
                                    {
                                        if (NoClockIn || IsNoClockInLate)
                                        {
                                            if (IsHoliday)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                continue;
                                            }
                                            else
                                            {
                                                if (NoClockIn)
                                                {
                                                    //objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "InLogMissing", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    continue;
                                                }
                                                else
                                                {
                                                    LateMin = NoCLockInLateMin;
                                                    IsLate = true;
                                                    strValue = GetLateRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, LateMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Late_Min"].ToString()));
                                                    LateRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                    LatePenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", OutTime.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    continue;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (IsHoliday)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                continue;
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                continue;
                                            }
                                        }
                                    }
                                    //
                                    if (InTime != "1/1/1900" && OutTime == "1/1/1900")
                                    {
                                        if (NoClockOut || IsNoClockOutEarly)
                                        {
                                            if (IsHoliday)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                continue;
                                            }
                                            else
                                            {
                                                if (NoClockOut)
                                                {
                                                    //objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "OutLogMissing", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    continue;
                                                }
                                                else
                                                {
                                                    EarlyMin = NoClockOutEarlyMin;
                                                    IsEarlyOut = true;
                                                    strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Early_Min"].ToString()));
                                                    EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                    EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), "1/1/1900", false.ToString(), "0", "0", "0", IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    continue;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (IsHoliday)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                continue;
                                            }
                                            else
                                            {
                                                if (strLateCountWithOutPresent == "True")
                                                {
                                                    //Add New Code On 19-05-2015

                                                    //Effective Work calculation    

                                                    if (WorkCalMethod == "PairWise")
                                                    {
                                                        //Pair Wise Start
                                                        if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                                        {
                                                            //same day log
                                                            TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'   and  Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                            TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                            OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                            OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                        }
                                                        else
                                                        {
                                                            //next day and same day log
                                                            // Modified By Nitin Jain , Modified Date 04/08/2014
                                                            if (Convert.ToDateTime(BeginingIn) >= Convert.ToDateTime(OnDutyTime))
                                                            {
                                                                TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                                OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                            }
                                                            else
                                                            {
                                                                TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                                OffTime = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                            }
                                                        }

                                                        dtPartialdetail = TempInOut;
                                                        //ViewState["DtPratial"] = TempInOut;
                                                        DateTime InTimeF = Convert.ToDateTime("1/1/1900");
                                                        DateTime OutTimeF = Convert.ToDateTime("1/1/1900");
                                                        InTime = Convert.ToDateTime("1/1/1900").ToString();
                                                        for (int l = 0; l < TempInOut.Rows.Count; l++)
                                                        {

                                                            if (TempInOut.Rows.Count == l)
                                                            {
                                                                // Modified By Nitin Jain , Modified Date 04/08/2014
                                                                InTime = TempInOut.Rows[l]["Event_Time"].ToString();

                                                                strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                                if (Convert.ToDateTime(InTime) < BOut)
                                                                {
                                                                    InTimeF = Convert.ToDateTime(InTime);
                                                                    OutTimeF = Convert.ToDateTime("1/1/1900");
                                                                }
                                                                else
                                                                {
                                                                    OutTimeF = Convert.ToDateTime(InTime);
                                                                    InTimeF = Convert.ToDateTime("1/1/1900");
                                                                }
                                                                OutException = "Out";
                                                            }
                                                            else if (TempInOut.Rows.Count > 1 && l == 0)
                                                            {
                                                                InTime = TempInOut.Rows[l]["Event_Time"].ToString();

                                                                strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();

                                                                InTimeF = Convert.ToDateTime(TempInOut.Rows[l]["Event_Time"].ToString());

                                                                strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();


                                                                try
                                                                {
                                                                    OutTimeF = Convert.ToDateTime(TempInOut.Rows[l + 1]["Event_Time"].ToString());
                                                                    strCheckOut_by_deviceId = TempInOut.Rows[l + 1]["Device_Id"].ToString();
                                                                }
                                                                catch
                                                                {
                                                                    OutException = "Out";
                                                                }
                                                                WorkMin += objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                                            }
                                                            else if (l % 2 == 0)
                                                            {
                                                                try
                                                                {
                                                                    InTimeF = Convert.ToDateTime(TempInOut.Rows[l]["Event_Time"].ToString());
                                                                    strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                                    OutTimeF = Convert.ToDateTime(TempInOut.Rows[l + 1]["Event_Time"].ToString());
                                                                    strCheckOut_by_deviceId = TempInOut.Rows[l + 1]["Device_Id"].ToString();
                                                                    WorkMin += objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                                                }
                                                                catch
                                                                {
                                                                    OutException = "Out";
                                                                }
                                                            }
                                                        }

                                                        WorkMin += BreakRelaxMin;
                                                        WorkMin = WorkMin + BreakMin;

                                                        try
                                                        {
                                                            // Modified By Nitin Jain , Modified Date 04/08/2014
                                                            InTimeF = Convert.ToDateTime(InTime);
                                                            if (Convert.ToDateTime(InTimeF) < BOut && OutTimeF == InTimeF)
                                                            {
                                                                InTimeF = Convert.ToDateTime(InTime);
                                                                OutTimeF = Convert.ToDateTime("1/1/1900");
                                                            }
                                                            else if (Convert.ToDateTime(InTimeF) >= BOut && OutTimeF == InTimeF)
                                                            {
                                                                OutTimeF = Convert.ToDateTime(InTimeF);
                                                                InTimeF = Convert.ToDateTime("1/1/1900");
                                                            }
                                                            else
                                                            {

                                                            }
                                                        }
                                                        catch
                                                        {
                                                            InTimeF = Convert.ToDateTime("1/1/1900");
                                                        }
                                                        if (InTimeF > OnTime)
                                                        {
                                                            //condition add on date 18 Jan 2014 kunal
                                                            if (InTimeF.Hour == OnTime.Hour && InTimeF.Minute == OnTime.Minute)
                                                            {
                                                                //Do Nothing 
                                                            }
                                                            else
                                                            {
                                                                LateMin = objAttendance.GetTimeDifference(Convert.ToDateTime(OnTime), InTimeF);
                                                                IsLate = true;
                                                                strValue = GetLateRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, LateMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Late_Min"].ToString()));
                                                                LateRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                LatePenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                            }
                                                        }
                                                        // Modified By Nitin Jain , Modified Date 04/08/2014
                                                        if (OutTimeF < OffTime && OutTimeF <= EOut)
                                                        {
                                                            if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                            {
                                                                // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                OutTimeE = Convert.ToDateTime("01/01/1900");
                                                            }
                                                            else
                                                            {
                                                                OutTimeE = OutTimeF;
                                                            }
                                                            // Modified By Nitin Jain , Modified Date 04/08/2014

                                                            //Modified On 20-08-2015
                                                            if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                            {
                                                                EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                            }
                                                            else
                                                            {
                                                                EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                            }
                                                            //EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffDutyTime));

                                                            IsEarlyOut = true;

                                                            strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Early_Min"].ToString()));
                                                            EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                            EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);

                                                        }
                                                        // pri
                                                        else
                                                        {
                                                            if (OutTimeF <= BOut && OutTimeF <= EOut)
                                                            {
                                                                if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                                {
                                                                    // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                    OutTimeE = Convert.ToDateTime("01/01/1900");
                                                                }
                                                                else
                                                                {
                                                                    OutTimeE = OutTimeF;

                                                                }

                                                                //Modified On 20-08-2015
                                                                if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                                {
                                                                    EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                                }
                                                                else
                                                                {
                                                                    EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                                }
                                                                //EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffDutyTime));
                                                                IsEarlyOut = true;
                                                                strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Early_Min"].ToString()));
                                                                EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);

                                                            }

                                                        }
                                                        // Modification By Nitin JAIN
                                                        // Modified by Priya Jain(1.04.2014)
                                                        //IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                        //IsHoliday = objEmpHoliday.GetEmployeeHolidayOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                        OutTimeE = OutTimeF;
                                                        if (IsWeekOff == false && IsHoliday == false && IsLeave == false)
                                                        {
                                                            if (NoClockIn == true || NoClockOut == true)
                                                            {
                                                                if ((Convert.ToDateTime(InTimeF) < Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                                {
                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    continue;
                                                                }
                                                                if ((Convert.ToDateTime(InTimeF) > Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                                {
                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), OutTimeE.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    continue;
                                                                }
                                                                // Modified By Nitin Jain , Modified Date 04/08/2014
                                                                if ((Convert.ToDateTime(OutTimeE) >= Convert.ToDateTime(BOut)) && InTimeF == Convert.ToDateTime("1/1/1900"))
                                                                {
                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    continue;
                                                                }
                                                            }

                                                        }

                                                        if (OutTimeF < OffTime)
                                                        {
                                                            //condition add on date 18 Jan 2014 kunal
                                                            if (OutTimeF.Hour == OffTime.Hour && OutTimeF.Minute == OffTime.Minute)
                                                            {
                                                                //Do Nothing 
                                                            }
                                                            else
                                                            {
                                                                //Modified On 20-08-2015
                                                                if (OutTimeF == Convert.ToDateTime("1/1/1900"))
                                                                {
                                                                    EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                                }
                                                                else
                                                                {
                                                                    EarlyMin = objAttendance.GetTimeDifference(OutTimeF, Convert.ToDateTime(OffTime));
                                                                }

                                                                //EarlyMin = objAttendance.GetTimeDifference(Convert.ToDateTime(OutTimeF), OffTime);
                                                                IsEarlyOut = true;
                                                                strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Early_Min"].ToString()));
                                                                EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                            }

                                                        }
                                                        int PartialViolationMin = 0;
                                                        int PartialMin = 0;
                                                        strValue = GetPartialViolationMin(empidlist.Split(',')[i].ToString(), FromDate, dtSchedule.Rows[t]["TimeTable_Id"].ToString(), strCompanyId, strBrandId, strLocationId, strWorkCalcMethod, dtPartialdetail, DtNextPartailInOut, strTimeZoneId);
                                                        PartialMin = int.Parse(strValue.Split('-')[0]);
                                                        PartialViolationMin = int.Parse(strValue.Split('-')[1]);
                                                        WorkMin += PartialMin;
                                                        if (PartialMethod == "Min")
                                                        {
                                                            //PartialViolationMin = Convert.ToInt32(PartialViolationMin) * Convert.ToInt32(Partial_Min_Deduct);
                                                            PartialViolationMin = Convert.ToInt32(PartialViolationMin);
                                                        }

                                                        //Update For Posta On 17-04-2015
                                                        EffectiveWorkMin = WorkMin;

                                                        OverTimeMin = objAttendance.GetOverTimeMin(empidlist.Split(',')[i].ToString(), InTimeF, OutTimeF, Convert.ToDateTime(OnTime), Convert.ToDateTime(OffTime), EffectiveWorkMin, strCompanyId, strBrandId, strLocationId, dtSchedule.Rows[t]["Field2"].ToString());


                                                        if (IsHoliday)
                                                        {
                                                            WorkMin = AssignMin;
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }
                                                        else
                                                        {
                                                            LateMin = 0;
                                                            EarlyMin = 0;

                                                            if (LatePenaltyMin > 0)
                                                            {

                                                                LateMin = LatePenaltyMin;
                                                                LatePenaltyMin = 0;
                                                            }

                                                            if (EarlyPenaltyMin > 0)
                                                            {
                                                                EarlyMin = EarlyPenaltyMin;
                                                                EarlyPenaltyMin = 0;
                                                            }

                                                            if (InTimeF == OutTimeF && NoClockIn == false && NoClockOut == false)
                                                            {

                                                                //modified by jitendra on 26-04-2018 for show late and early when any one(in and out) log not exists but employee showing present for sultan center 
                                                                //commentd old line and replace with new

                                                                //objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id);
                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                            }
                                                            else
                                                            {
                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), PartialMin.ToString(), PartialViolationMin.ToString(), WorkMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                            }
                                                        }
                                                        //Pair Wise End
                                                    }
                                                    else
                                                    {
                                                        //Calculation of inout method

                                                        DateTime InTimeFL = Convert.ToDateTime(InTime);
                                                        DateTime OutTimeFE = Convert.ToDateTime(OutTime);
                                                        if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                                        {
                                                            //same day log
                                                            TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'   and  Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                            OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                            OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                        }
                                                        else
                                                        {//next day and same day log
                                                         // Modified By Nitin Jain , Modified Date 04/08/2014
                                                            if (Convert.ToDateTime(BeginingIn) >= Convert.ToDateTime(OnDutyTime))
                                                            {
                                                                TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                                OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                            }
                                                            else
                                                            {
                                                                TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                                //Update On 26-03-2015
                                                                OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                                //OffTime = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                            }
                                                        }
                                                        //Modify By  Priya Jain(04.04.2014)
                                                        // ViewState["DtNextPartailInOut"] = TempInOut;


                                                        DtNextPartailInOut = TempInOut;
                                                        if (TempInOut.Rows.Count > 0)
                                                        {
                                                            if (WithKeyPref == "Yes")
                                                            {
                                                                //Add On 27-03-2015
                                                                if (Convert.ToBoolean(TempFKey))
                                                                {
                                                                    InTimeFL = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());

                                                                    strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();

                                                                    OutTimeFE = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());
                                                                    strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                                                    if (TempInOut.Rows.Count == 1)
                                                                    {
                                                                        OutException = "Out";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    DataTable DtIn = new DataView(TempInOut, "Func_Code='" + InKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                    DataTable DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                    // Modified By Nitin Jain On 28/08/2014 For Break In Out .......
                                                                    DataTable DtBreakIn = new DataView(TempInOut, "Func_Code='" + BreakInKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                    DataTable DtBreakOut = new DataView(TempInOut, "Func_Code='" + BreakOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                    // .............................................................
                                                                    try
                                                                    {
                                                                        InTimeFL = Convert.ToDateTime(DtIn.Rows[0]["Event_Time"].ToString());


                                                                        strCheckIn_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();

                                                                    }
                                                                    catch
                                                                    {
                                                                        InTimeFL = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                                        strCheckIn_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();

                                                                    }
                                                                    try
                                                                    {
                                                                        OutTimeFE = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());

                                                                        strCheckOut_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();
                                                                    }
                                                                    catch
                                                                    {
                                                                        OutTimeFE = Convert.ToDateTime(DtIn.Rows[0]["Event_Time"].ToString());
                                                                        strCheckOut_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();
                                                                        OutException = "Out";
                                                                        // OutTimeF = InTimeF;
                                                                    }
                                                                    if (DtIn.Rows.Count == 0)
                                                                    {
                                                                        InException = "In";
                                                                    }

                                                                    if (DtOut.Rows.Count == 0)
                                                                    {
                                                                        OutException = "Out";
                                                                    }
                                                                    if (InException != "In" && OutException != "Out")
                                                                    {
                                                                        try
                                                                        {
                                                                            BreakInTime = DtBreakIn.Rows[0]["Event_Time"].ToString();
                                                                        }
                                                                        catch
                                                                        {
                                                                            BreakInTime = "00:00";
                                                                        }
                                                                        try
                                                                        {
                                                                            BreakOutTime = DtBreakOut.Rows[0]["Event_Time"].ToString();
                                                                        }
                                                                        catch
                                                                        {
                                                                            BreakOutTime = "00:00";
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                InTimeFL = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());
                                                                strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                                OutTimeFE = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());
                                                                strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                                                if (TempInOut.Rows.Count == 1)
                                                                {
                                                                    OutException = "Out";
                                                                }
                                                            }
                                                        }

                                                        // IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());

                                                        if (IsLeave == true)
                                                        {


                                                            WorkMin = objAttendance.GetTimeDifference(InTimeFL, OutTimeFE);
                                                            WorkMin += BreakRelaxMin;
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTimeFE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", WorkMin.ToString(), AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                            continue;
                                                        }


                                                        ////***                                               
                                                        if (Convert.ToDateTime(InTimeFL) > Convert.ToDateTime(OnTime))
                                                        {
                                                            if (InTimeFL.Hour == OnTime.Hour && InTimeFL.Minute == OnTime.Minute)
                                                            {
                                                                //Do Nothing 
                                                            }
                                                            else
                                                            {
                                                                // Update on 15/12/2014 to Calculate late min from EIn insted of OnDuty Time
                                                                LateMin = objAttendance.GetTimeDifference(OnTime, InTimeFL);
                                                                // LateMin = objAttendance.GetTimeDifference(Convert.ToDateTime(EIn), InTimeF);
                                                                IsLate = true;
                                                                strValue = GetLateRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, LateMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Late_Min"].ToString()));
                                                                LateRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                LatePenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                            }
                                                        }
                                                        // Modified by Nitin Jain ON 01-Apr-2014
                                                        if (OutTimeFE < OffTime && OutTimeFE <= EOut)
                                                        {
                                                            if (InTimeFL == OutTimeFE && InTimeFL < BOut)
                                                            {
                                                                if (WithKeyPref == "Yes")
                                                                {
                                                                    //Add On 27-03-2015
                                                                    if (Convert.ToBoolean(TempFKey))
                                                                    {
                                                                        OutTimeFE = Convert.ToDateTime("01/01/1900");
                                                                    }
                                                                    else
                                                                    {
                                                                        OutTimeFE = InTimeFL;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    OutTimeFE = Convert.ToDateTime("01/01/1900");

                                                                    // OutTimeF = InTimeF;
                                                                }
                                                            }
                                                            else if (InTimeFL == OutTimeFE && InTimeFL > BOut)
                                                            {
                                                                InTimeFL = Convert.ToDateTime("01/01/1900");
                                                                InException = "In";
                                                                OutException = "";
                                                            }
                                                            else
                                                            {

                                                            }

                                                            if (OutTimeFE.ToString("dd/MM/yyyy") == "01/01/1900")
                                                            {
                                                                // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                OutTimeE = Convert.ToDateTime("01/01/1900");
                                                                OutException = "Out";
                                                            }
                                                            else
                                                            {
                                                                OutTimeE = OutTimeFE;
                                                            }

                                                            // Modified by nitin jain on 31-03-2014
                                                            //Modified On 20-08-2015
                                                            if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                            {
                                                                EarlyMin = objAttendance.GetTimeDifference(InTimeFL, Convert.ToDateTime(OffTime));
                                                            }
                                                            else
                                                            {
                                                                EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                            }

                                                            IsEarlyOut = true;
                                                            strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Early_Min"].ToString()));
                                                            EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                            EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);

                                                        }
                                                        // Modified By Priya Jain on 02-04-2014
                                                        else
                                                        {

                                                            if (OutTimeFE > BOut && OutTimeFE <= EOut)
                                                            {

                                                                if (InTimeFL == OutTimeFE && OutTimeFE < BOut)
                                                                {
                                                                    OutTimeFE = Convert.ToDateTime("01/01/1900");
                                                                }
                                                                else if (InTimeFL == OutTimeFE && OutTimeFE > BOut)
                                                                {
                                                                    InTimeFL = Convert.ToDateTime("01/01/1900");
                                                                }
                                                                else
                                                                {
                                                                }

                                                                if (OutTimeFE.ToString("dd/MM/yyyy") == "01/01/1900")
                                                                {
                                                                    // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                    OutTimeE = Convert.ToDateTime("01/01/1900");
                                                                }
                                                                else
                                                                {
                                                                    OutTimeE = OutTimeFE;
                                                                }
                                                            }
                                                        }
                                                        // Modified By Priya Jain(01.04.2014)
                                                        //commented by jitendra on 08/12/2017
                                                        // IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                        //IsHoliday = objEmpHoliday.GetEmployeeHolidayOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());

                                                        if (IsWeekOff == false && IsHoliday == false && IsLeave == false)
                                                        {
                                                            if (NoClockIn == true || NoClockOut == true)
                                                            {
                                                                if (((Convert.ToDateTime(InTimeFL) < Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900")))
                                                                {
                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    continue;
                                                                }
                                                                if ((Convert.ToDateTime(OutTimeE) > Convert.ToDateTime(BOut)) && InTimeFL == Convert.ToDateTime("1/1/1900"))
                                                                {
                                                                    if (NoClockIn == true)
                                                                    {
                                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    }
                                                                    else
                                                                    {
                                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    }
                                                                    continue;
                                                                }
                                                                if ((((Convert.ToDateTime(InTimeFL) > Convert.ToDateTime(EIn)) || Convert.ToDateTime(InTimeFL) < Convert.ToDateTime(BIn)) && NoClockIn == true))
                                                                {
                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    continue;
                                                                }
                                                                if ((((Convert.ToDateTime(OutTimeE) > Convert.ToDateTime(EOut)) || Convert.ToDateTime(OutTimeE) < Convert.ToDateTime(EIn)) && NoClockOut == true))
                                                                {
                                                                    if (OutException == "Out")
                                                                    {
                                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), "01/01/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                        continue;
                                                                    }
                                                                }
                                                            }
                                                        }


                                                        int PartialViolationMin = 0;
                                                        int PartialMin = 0;

                                                        strValue = GetPartialViolationMin(empidlist.Split(',')[i].ToString(), FromDate, dtSchedule.Rows[t]["TimeTable_Id"].ToString(), strCompanyId, strBrandId, strLocationId, strWorkCalcMethod, dtPartialdetail, DtNextPartailInOut, strTimeZoneId);

                                                        PartialMin = int.Parse(strValue.Split('-')[0]);
                                                        PartialViolationMin = int.Parse(strValue.Split('-')[1]);
                                                        LateMin = 0;
                                                        EarlyMin = 0;

                                                        if (LatePenaltyMin > 0)
                                                        {
                                                            LateMin = LatePenaltyMin;
                                                            //LatePenaltyMin = 0;
                                                        }
                                                        //WorkMin = WorkMin - BreakMin;

                                                        if (EarlyPenaltyMin > 0)
                                                        {
                                                            EarlyMin = EarlyPenaltyMin;
                                                            EarlyPenaltyMin = 0;
                                                        }

                                                        OverTimeMin = objAttendance.GetOverTimeMin(empidlist.Split(',')[i].ToString(), InTimeFL, OutTimeFE, Convert.ToDateTime(OnTime), Convert.ToDateTime(OffTime), EffectiveWorkMin, strCompanyId, strBrandId, strLocationId, dtSchedule.Rows[t]["Field2"].ToString());
                                                        if (IsHoliday)
                                                        {
                                                            if (HolidayOTEnabled == "1")
                                                            {
                                                                //Update On 27-03-2015
                                                                WorkMin = EffectiveWorkMin;
                                                                //if (MaxOt < WorkMin)
                                                                //{
                                                                //    WorkMin = MaxOt;
                                                                //}
                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTimeFE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                continue;
                                                            }
                                                            else
                                                            {
                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTimeFE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (InTimeFL == Convert.ToDateTime("01/01/1900") || OutTimeE == Convert.ToDateTime("01/01/1900"))
                                                            {
                                                                if (InException == "In" && NoClockIn == true)
                                                                {
                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), Convert.ToDateTime("01/01/1900").ToString(), InTimeFL.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    continue;
                                                                }
                                                                else if (OutException == "Out" && NoClockIn == true)
                                                                {
                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), Convert.ToDateTime("01/01/1900").ToString(), InTimeFL.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    continue;
                                                                    // objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), Convert.ToDateTime("01/01/1900").ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                                                }
                                                                else
                                                                {
                                                                    // objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTimeFE.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), PartialMin.ToString(), PartialViolationMin.ToString(), WorkMin.ToString(), AssignMin.ToString(), InException, OutException, BreakInTime, BreakOutTime, "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //End New Code On 19-05-2015
                                                }
                                                else
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    continue;
                                                }
                                            }
                                        }
                                    }
                                    if (InTime == "1/1/1900" && OutTime == "1/1/1900")
                                    {
                                        if (IsHoliday)
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }

                                        else if (IsLeave)
                                        {
                                            bool IsPaid = false;

                                            IsPaid = ObjLeaveReq.IsPaidLeave(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                            if (IsPaid)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                        }
                                        else
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                    }
                                    else
                                    {
                                        //Effective Work calculation
                                        TempIn = new DataTable();
                                        TempOut = new DataTable();
                                        TempInOut = new DataTable();
                                        if (WorkCalMethod == "PairWise")
                                        {
                                            if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                            {//same day log

                                                TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'   and  Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();



                                                TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();


                                                OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);

                                            }
                                            else
                                            {//next day and same day log

                                                // Modified By Nitin Jain , Modified Date 04/08/2014
                                                if (Convert.ToDateTime(BeginingIn) >= Convert.ToDateTime(OnDutyTime))
                                                {
                                                    TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                    OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                }
                                                else
                                                {
                                                    TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                    OffTime = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                }
                                            }

                                            dtPartialdetail = TempInOut;
                                            //ViewState["DtPratial"] = TempInOut;
                                            DateTime InTimeF = Convert.ToDateTime("1/1/1900");
                                            DateTime OutTimeF = Convert.ToDateTime("1/1/1900");
                                            //InTime = Convert.ToDateTime("1/1/1900").ToString();
                                            for (int l = 0; l < TempInOut.Rows.Count; l++)
                                            {

                                                if (TempInOut.Rows.Count == l)
                                                {
                                                    // Modified By Nitin Jain , Modified Date 04/08/2014
                                                    InTime = TempInOut.Rows[l]["Event_Time"].ToString();

                                                    strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                    if (Convert.ToDateTime(InTime) < BOut)
                                                    {
                                                        InTimeF = Convert.ToDateTime(InTime);
                                                        OutTimeF = Convert.ToDateTime("1/1/1900");
                                                    }
                                                    else
                                                    {
                                                        OutTimeF = Convert.ToDateTime(InTime);
                                                        InTimeF = Convert.ToDateTime("1/1/1900");
                                                    }
                                                    OutException = "Out";
                                                }
                                                else if (TempInOut.Rows.Count > 1 && l == 0)
                                                {
                                                    InTime = TempInOut.Rows[l]["Event_Time"].ToString();
                                                    strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                    InTimeF = Convert.ToDateTime(TempInOut.Rows[l]["Event_Time"].ToString());

                                                    strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                    try
                                                    {
                                                        OutTimeF = Convert.ToDateTime(TempInOut.Rows[l + 1]["Event_Time"].ToString());
                                                        strCheckOut_by_deviceId = TempInOut.Rows[l + 1]["Device_Id"].ToString();
                                                    }
                                                    catch
                                                    {
                                                        OutException = "Out";
                                                    }
                                                    WorkMin += objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                                }
                                                else if (l % 2 == 0)
                                                {
                                                    try
                                                    {
                                                        InTimeF = Convert.ToDateTime(TempInOut.Rows[l]["Event_Time"].ToString());
                                                        strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                        OutTimeF = Convert.ToDateTime(TempInOut.Rows[l + 1]["Event_Time"].ToString());
                                                        strCheckOut_by_deviceId = TempInOut.Rows[l + 1]["Device_Id"].ToString();
                                                        WorkMin += objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                                    }
                                                    catch
                                                    {
                                                        OutException = "Out";
                                                    }
                                                }
                                            }

                                            WorkMin += BreakRelaxMin;
                                            WorkMin = WorkMin + BreakMin;

                                            try
                                            {
                                                // Modified By Nitin Jain , Modified Date 04/08/2014
                                                InTimeF = Convert.ToDateTime(InTime);
                                                if (Convert.ToDateTime(InTimeF) < BOut && OutTimeF == InTimeF)
                                                {
                                                    InTimeF = Convert.ToDateTime(InTime);
                                                    OutTimeF = Convert.ToDateTime("1/1/1900");
                                                }
                                                else if (Convert.ToDateTime(InTimeF) >= BOut && OutTimeF == InTimeF)
                                                {
                                                    OutTimeF = Convert.ToDateTime(InTimeF);
                                                    InTimeF = Convert.ToDateTime("1/1/1900");
                                                }
                                                else
                                                {
                                                }
                                            }
                                            catch
                                            {
                                                InTimeF = Convert.ToDateTime("1/1/1900");
                                            }

                                            string strIsLateMin = string.Empty;
                                            if (InTimeF > OnTime)
                                            {
                                                //condition add on date 18 Jan 2014 kunal
                                                if (InTimeF.Hour == OnTime.Hour && InTimeF.Minute == OnTime.Minute)
                                                {
                                                    //Do Nothing 
                                                }
                                                else
                                                {
                                                    LateMin = objAttendance.GetTimeDifference(Convert.ToDateTime(OnTime), InTimeF);
                                                    IsLate = true;
                                                    strValue = GetLateRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, LateMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Late_Min"].ToString()));
                                                    LateRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                    LatePenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                }

                                            }
                                            // Modified By Nitin Jain , Modified Date 04/08/2014
                                            if (OutTimeF < OffTime && OutTimeF <= EOut)
                                            {
                                                if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                {
                                                    // OutTimeE = Convert.ToDateTime(InTimeF);
                                                    OutTimeE = Convert.ToDateTime("01/01/1900");
                                                }
                                                else
                                                {
                                                    OutTimeE = OutTimeF;
                                                }

                                                // Modified By Nitin Jain , Modified Date 04/08/2014
                                                //Modified On 20-08-2015
                                                if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                {
                                                    EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                }
                                                else
                                                {
                                                    EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                }

                                                IsEarlyOut = true;
                                                strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Early_Min"].ToString()));
                                                EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);

                                            }
                                            // pri
                                            else
                                            {
                                                if (OutTimeF <= BOut && OutTimeF <= EOut)
                                                {
                                                    if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                    {
                                                        // OutTimeE = Convert.ToDateTime(InTimeF);
                                                        OutTimeE = Convert.ToDateTime("01/01/1900");
                                                    }
                                                    else
                                                    {
                                                        OutTimeE = OutTimeF;
                                                    }

                                                    //Modified On 20-08-2015
                                                    if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                    {
                                                        EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                    }
                                                    else
                                                    {
                                                        EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                    }
                                                    IsEarlyOut = true;
                                                    strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Early_Min"].ToString()));
                                                    EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                    EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);

                                                }

                                            }
                                            // Modification By Nitin JAIN
                                            // Modified by Priya Jain(1.04.2014)
                                            //08-12-2017
                                            //IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                            //IsHoliday = objEmpHoliday.GetEmployeeHolidayOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                            OutTimeE = OutTimeF;
                                            if (IsWeekOff == false && IsHoliday == false && IsLeave == false)
                                            {

                                                //Lokesh02042016-2
                                                if (AfterEndingInCountAbsent)
                                                {
                                                    if (Convert.ToDateTime(EIn) <= Convert.ToDateTime(InTimeF))
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "01/01/1900", "01/01/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        continue;
                                                    }
                                                }


                                                if (NoClockIn == true || NoClockOut == true)
                                                {
                                                    if ((Convert.ToDateTime(InTimeF) < Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        continue;
                                                    }
                                                    if ((Convert.ToDateTime(InTimeF) > Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), OutTimeE.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        continue;
                                                    }
                                                    // Modified By Nitin Jain , Modified Date 04/08/2014
                                                    if ((Convert.ToDateTime(OutTimeE) >= Convert.ToDateTime(BOut)) && InTimeF == Convert.ToDateTime("1/1/1900"))
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        continue;
                                                    }
                                                }

                                            }

                                            if (OutTimeF < OffTime)
                                            {
                                                //condition add on date 18 Jan 2014 kunal
                                                if (OutTimeF.Hour == OffTime.Hour && OutTimeF.Minute == OffTime.Minute)
                                                {
                                                    //Do Nothing 
                                                }
                                                else
                                                {
                                                    //Modidief On 20-08-2015
                                                    if (OutTimeF == Convert.ToDateTime("1/1/1900"))
                                                    {
                                                        EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                    }
                                                    else
                                                    {
                                                        EarlyMin = objAttendance.GetTimeDifference(Convert.ToDateTime(OutTimeF), OffTime);
                                                    }

                                                    IsEarlyOut = true;
                                                    strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Early_Min"].ToString()));
                                                    EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                    EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                }

                                            }
                                            int PartialViolationMin = 0;
                                            int PartialMin = 0;
                                            strValue = GetPartialViolationMin(empidlist.Split(',')[i].ToString(), FromDate, dtSchedule.Rows[t]["TimeTable_Id"].ToString(), strCompanyId, strBrandId, strLocationId, strWorkCalcMethod, dtPartialdetail, DtNextPartailInOut, strTimeZoneId);
                                            PartialMin = int.Parse(strValue.Split('-')[0]);
                                            PartialViolationMin = int.Parse(strValue.Split('-')[1]);
                                            WorkMin += PartialMin;
                                            if (PartialMethod == "Min")
                                            {
                                                //PartialViolationMin = Convert.ToInt32(PartialViolationMin) * Convert.ToInt32(Partial_Min_Deduct);
                                                PartialViolationMin = Convert.ToInt32(PartialViolationMin);
                                            }

                                            //Update For Posta On 17-04-2015
                                            EffectiveWorkMin = WorkMin;
                                            if (strForWorkHour == "True")
                                            {
                                                WorkMin = int.Parse(getWorkMinute(WorkMin.ToString(), AssignMin.ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                            }
                                            else
                                            {
                                                EffectiveWorkMin = WorkMin;
                                            }

                                            OverTimeMin = objAttendance.GetOverTimeMin(empidlist.Split(',')[i].ToString(), InTimeF, OutTimeF, Convert.ToDateTime(OnTime), Convert.ToDateTime(OffTime), EffectiveWorkMin, strCompanyId, strBrandId, strLocationId, dtSchedule.Rows[t]["Field2"].ToString());


                                            if (IsHoliday)
                                            {

                                                WorkMin = AssignMin;
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            else
                                            {
                                                LateMin = 0;
                                                EarlyMin = 0;

                                                if (LatePenaltyMin > 0)
                                                {
                                                    LateMin = LatePenaltyMin;
                                                    LatePenaltyMin = 0;
                                                }

                                                if (EarlyPenaltyMin > 0)
                                                {

                                                    EarlyMin = EarlyPenaltyMin;
                                                    EarlyPenaltyMin = 0;

                                                }
                                                if (InTimeF == OutTimeF && NoClockIn == false && NoClockOut == false)
                                                {
                                                    //modified by jitendra on 26-04-2018 for show late and early when any one(in and out) log not exists but employee showing present for sultan center 
                                                    //commentd old line and replace with new
                                                    //objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id);


                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }
                                                else
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), PartialMin.ToString(), PartialViolationMin.ToString(), WorkMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //Calculation of inout method
                                            DateTime InTimeF = Convert.ToDateTime("1/1/1900");
                                            DateTime OutTimeF = Convert.ToDateTime("1/1/1900");

                                            if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                            {//same day log
                                                TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'   and  Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);

                                            }
                                            else
                                            {//next day and same day log
                                             // Modified By Nitin Jain , Modified Date 04/08/2014
                                                if (Convert.ToDateTime(BeginingIn) > Convert.ToDateTime(OnDutyTime))
                                                {
                                                    TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    ////condition updated by jitendra for get next day log a
                                                    //TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                    OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                }
                                                else
                                                {
                                                    TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                    //Update On 26-03-2015
                                                    // OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                    //updated on 09/10/2017 
                                                    //overtime calculation was incorrect 
                                                    OffTime = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                }
                                            }
                                            //Modify By  Priya Jain(04.04.2014)
                                            //ViewState["DtNextPartailInOut"] = TempInOut;
                                            DtNextPartailInOut = TempInOut;
                                            if (TempInOut.Rows.Count > 0)
                                            {
                                                if (WithKeyPref == "Yes")
                                                {
                                                    //Add On 27-03-2015
                                                    if (Convert.ToBoolean(TempFKey))
                                                    {
                                                        InTimeF = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());
                                                        strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                        OutTimeF = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());
                                                        strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                                        if (TempInOut.Rows.Count == 1)
                                                        {
                                                            OutException = "Out";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        DataTable DtIn = new DataView(TempInOut, "Func_Code='" + InKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                        DataTable DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                        // Modified By Nitin Jain On 28/08/2014 For Break In Out .......
                                                        DataTable DtBreakIn = new DataView(TempInOut, "Func_Code='" + BreakInKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                        DataTable DtBreakOut = new DataView(TempInOut, "Func_Code='" + BreakOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                        // .............................................................
                                                        try
                                                        {
                                                            InTimeF = Convert.ToDateTime(DtIn.Rows[0]["Event_Time"].ToString());
                                                            strCheckIn_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();
                                                        }
                                                        catch
                                                        {
                                                            InTimeF = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                            strCheckIn_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();
                                                        }
                                                        try
                                                        {
                                                            OutTimeF = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                            strCheckOut_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();
                                                        }
                                                        catch
                                                        {
                                                            OutTimeF = Convert.ToDateTime(DtIn.Rows[0]["Event_Time"].ToString());
                                                            strCheckOut_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();
                                                            OutException = "Out";
                                                            // OutTimeF = InTimeF;
                                                        }
                                                        if (DtIn.Rows.Count == 0)
                                                        {
                                                            InException = "In";
                                                        }

                                                        if (DtOut.Rows.Count == 0)
                                                        {
                                                            OutException = "Out";
                                                        }
                                                        if (InException != "In" && OutException != "Out")
                                                        {
                                                            try
                                                            {
                                                                BreakInTime = DtBreakIn.Rows[0]["Event_Time"].ToString();
                                                            }
                                                            catch
                                                            {
                                                                BreakInTime = "00:00";
                                                            }
                                                            try
                                                            {
                                                                BreakOutTime = DtBreakOut.Rows[0]["Event_Time"].ToString();
                                                            }
                                                            catch
                                                            {
                                                                BreakOutTime = "00:00";
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    InTimeF = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());
                                                    strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                    OutTimeF = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());
                                                    strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                                    if (TempInOut.Rows.Count == 1)
                                                    {
                                                        OutException = "Out";
                                                    }
                                                }
                                            }


                                            // IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());




                                            if (IsLeave == true)
                                            {
                                                WorkMin = objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                                WorkMin += BreakRelaxMin;
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", WorkMin.ToString(), AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                continue;
                                            }

                                            ////***

                                            if (InTimeF > Convert.ToDateTime(OnTime))
                                            {
                                                if (InTimeF.Hour == OnTime.Hour && InTimeF.Minute == OnTime.Minute)
                                                {
                                                    //Do Nothing 
                                                }
                                                else
                                                {
                                                    // Update on 15/12/2014 to Calculate late min from EIn insted of OnDuty Time
                                                    LateMin = objAttendance.GetTimeDifference(Convert.ToDateTime(OnTime), InTimeF);
                                                    // LateMin = objAttendance.GetTimeDifference(Convert.ToDateTime(EIn), InTimeF);
                                                    IsLate = true;
                                                    strValue = GetLateRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, LateMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Late_Min"].ToString()));
                                                    LateRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                    LatePenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                }
                                            }
                                            // Modified by Nitin Jain ON 01-Apr-2014
                                            if (OutTimeF < OffTime && OutTimeF <= EOut)
                                            {
                                                if (InTimeF == OutTimeF && InTimeF < BOut)
                                                {
                                                    if (WithKeyPref == "Yes")
                                                    {
                                                        //Add On 27-03-2015
                                                        if (Convert.ToBoolean(TempFKey))
                                                        {
                                                            OutTimeF = Convert.ToDateTime("01/01/1900");
                                                        }
                                                        else
                                                        {
                                                            OutTimeF = InTimeF;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        OutTimeF = Convert.ToDateTime("01/01/1900");

                                                        // OutTimeF = InTimeF;
                                                    }
                                                }
                                                else if (InTimeF == OutTimeF && InTimeF > BOut)
                                                {
                                                    InTimeF = Convert.ToDateTime("01/01/1900");
                                                    InException = "In";
                                                    OutException = "";
                                                }
                                                else
                                                {
                                                }

                                                if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                {
                                                    // OutTimeE = Convert.ToDateTime(InTimeF);
                                                    OutTimeE = Convert.ToDateTime("01/01/1900");
                                                    OutException = "Out";
                                                }
                                                else
                                                {
                                                    OutTimeE = OutTimeF;
                                                }

                                                // Modified by nitin jain on 31-03-2014
                                                //Modified On 20-08-2015
                                                if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                {
                                                    EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                }
                                                else
                                                {
                                                    EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                }

                                                if (EarlyMin > 0)
                                                {
                                                    IsEarlyOut = true;
                                                    strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(dtSchedule.Rows[t]["Early_Min"].ToString()));
                                                    EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                    EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                }
                                                else
                                                {
                                                    IsEarlyOut = false;
                                                    EarlyRelaxMin = 0;
                                                    EarlyPenaltyMin = 0;
                                                }
                                            }
                                            // Modified By Priya Jain on 02-04-2014
                                            else
                                            {

                                                if (OutTimeF > BOut && OutTimeF <= EOut)
                                                {

                                                    if (InTimeF == OutTimeF && OutTimeF < BOut)
                                                    {
                                                        OutTimeF = Convert.ToDateTime("01/01/1900");
                                                    }
                                                    else if (InTimeF == OutTimeF && OutTimeF > BOut)
                                                    {
                                                        InTimeF = Convert.ToDateTime("01/01/1900");
                                                    }
                                                    else
                                                    {

                                                    }

                                                    if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                    {
                                                        // OutTimeE = Convert.ToDateTime(InTimeF);
                                                        OutTimeE = Convert.ToDateTime("01/01/1900");
                                                    }
                                                    else
                                                    {
                                                        OutTimeE = OutTimeF;
                                                    }
                                                }

                                            }
                                            // Modified By Priya Jain(01.04.2014)
                                            //IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                            //IsHoliday = objEmpHoliday.GetEmployeeHolidayOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                            //if (IsLeave == true)
                                            //{
                                            //    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                            //    break;
                                            //}
                                            if (IsWeekOff == false && IsHoliday == false && IsLeave == false)
                                            {

                                                //Lokesh02042016-1                                           
                                                if (AfterEndingInCountAbsent)
                                                {
                                                    if (Convert.ToDateTime(EIn) <= Convert.ToDateTime(InTimeF))
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "01/01/1900", "01/01/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        continue;
                                                    }
                                                }

                                                if (NoClockIn == true || NoClockOut == true)
                                                {
                                                    if (((Convert.ToDateTime(InTimeF) < Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900")))
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        continue;
                                                    }
                                                    if ((Convert.ToDateTime(OutTimeE) > Convert.ToDateTime(BOut)) && InTimeF == Convert.ToDateTime("1/1/1900"))
                                                    {
                                                        if (NoClockIn == true)
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }
                                                        else
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }
                                                        continue;
                                                    }
                                                    if ((((Convert.ToDateTime(InTimeF) > Convert.ToDateTime(EIn)) || Convert.ToDateTime(InTimeF) < Convert.ToDateTime(BIn)) && NoClockIn == true))
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        continue;
                                                    }
                                                    if ((((Convert.ToDateTime(OutTimeE) > Convert.ToDateTime(EOut)) || Convert.ToDateTime(OutTimeE) < Convert.ToDateTime(EIn)) && NoClockOut == true))
                                                    {
                                                        if (OutException == "Out")
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), "01/01/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                            continue;
                                                        }
                                                    }
                                                }
                                            }


                                            int PartialViolationMin = 0;
                                            int PartialMin = 0;
                                            strValue = GetPartialViolationMin(empidlist.Split(',')[i].ToString(), FromDate, dtSchedule.Rows[t]["TimeTable_Id"].ToString(), strCompanyId, strBrandId, strLocationId, strWorkCalcMethod, dtPartialdetail, DtNextPartailInOut, strTimeZoneId);
                                            PartialMin = int.Parse(strValue.Split('-')[0]);
                                            PartialViolationMin = int.Parse(strValue.Split('-')[1]);
                                            LateMin = 0;
                                            EarlyMin = 0;

                                            if (LatePenaltyMin > 0)
                                            {
                                                LateMin = LatePenaltyMin;
                                                //LatePenaltyMin = 0;
                                            }

                                            WorkMin = objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                            WorkMin += BreakRelaxMin;

                                            //WorkMin = WorkMin - BreakMin;

                                            if (EarlyPenaltyMin > 0)
                                            {
                                                EarlyMin = EarlyPenaltyMin;
                                                EarlyPenaltyMin = 0;
                                            }

                                            //Update For Posta On 17-04-2015
                                            EffectiveWorkMin = WorkMin;
                                            if (strForWorkHour == "True")
                                            {
                                                WorkMin = int.Parse(getWorkMinute(WorkMin.ToString(), AssignMin.ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                            }
                                            else
                                            {
                                                EffectiveWorkMin = WorkMin;
                                            }

                                            //OverTimeMin = objAttendance.GetOverTimeMinNic(FromDate,  empidlist.Split(',')[i].ToString(), InTimeF, OutTimeF, Convert.ToDateTime(OnTime), Convert.ToDateTime(OffTime), EffectiveWorkMin, strCompanyId, strBrandId, strLocationId, dtSchedule.Rows[t]["Field2"].ToString());

                                            OverTimeMin = 0;
                                            if (IsHoliday)
                                            {
                                                if (HolidayOTEnabled == "1")
                                                {
                                                    //Update On 27-03-2015
                                                    WorkMin = EffectiveWorkMin;
                                                    //if (MaxOt < WorkMin)
                                                    //{
                                                    //    WorkMin = MaxOt;
                                                    //}                                             

                                                    //for overtime approval if we need then we will do 18-08-2015

                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }
                                                else
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }
                                            }
                                            else
                                            {
                                                if (InTimeF == Convert.ToDateTime("01/01/1900") || OutTimeE == Convert.ToDateTime("01/01/1900"))
                                                {
                                                    if (InException == "In" && NoClockIn == true)
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), Convert.ToDateTime("01/01/1900").ToString(), InTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                    else if (OutException == "Out" && NoClockIn == true)
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), Convert.ToDateTime("01/01/1900").ToString(), InTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        // objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), Convert.ToDateTime("01/01/1900").ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                                    }
                                                    else
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                }
                                                else
                                                {
                                                    if (InException == "" && OutException == "" && WithKeyPref == "Yes")
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), PartialMin.ToString(), PartialViolationMin.ToString(), WorkMin.ToString(), AssignMin.ToString(), InException, OutException, BreakInTime, BreakOutTime, "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                    else
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), PartialMin.ToString(), PartialViolationMin.ToString(), WorkMin.ToString(), AssignMin.ToString(), InException, OutException, "00:00", "00:00", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (IsHoliday)
                                    {
                                        if (FromDate >= dtDOJ)
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                        else
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                    }

                                    else if (IsLeave)
                                    {

                                        bool IsPaid = false;

                                        IsPaid = ObjLeaveReq.IsPaidLeave(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                        if (IsPaid)
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                        else
                                        {
                                            //Modified By Priya Jain(01.03.2014)
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                    }
                                    //else if (NoClockIn == false && NoClockOut == false)
                                    //{
                                    //    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                    //}
                                    else
                                    {
                                        DateTime dtTodayDate = DateTime.Now;

                                        if (FromDate > dtTodayDate)
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", "0", "", "", "NoDay", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                        else
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }

                                    }
                                }
                            }
                            else
                            {
                                //Here Code Off WeekOff

                                DateTime InTimeF = Convert.ToDateTime("1/1/1900");
                                DateTime OutTimeF = Convert.ToDateTime("1/1/1900");

                                try
                                {

                                    if (Convert.ToDateTime(BeginingIn) > Convert.ToDateTime(EndingOut))
                                    {
                                        BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);
                                        EOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EOut.Hour, EOut.Minute, EOut.Second);

                                        TempInOut = new DataView(dtLog, "Event_Time>='" + BIn + "'  and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    else
                                    {
                                        TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "' ", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                }
                                catch
                                {
                                    TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "' ", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                }


                                if (TempInOut.Rows.Count > 0)
                                {
                                    if (WithKeyPref == "Yes")
                                    {
                                        //Add On 27-03-2015
                                        if (Convert.ToBoolean(TempFKey))
                                        {
                                            InTimeF = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());
                                            strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                            OutTimeF = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());
                                            strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                            if (TempInOut.Rows.Count == 1)
                                            {
                                                OutException = "Out";
                                                OutTimeF = Convert.ToDateTime("1/1/1900");
                                            }
                                        }
                                        else
                                        {
                                            DataTable DtIn = new DataView(TempInOut, "Func_Code='" + InKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            DataTable DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            try
                                            {
                                                InTimeF = Convert.ToDateTime(DtIn.Rows[0]["Event_Time"].ToString());

                                                strCheckIn_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();
                                            }
                                            catch
                                            {

                                            }
                                            try
                                            {
                                                OutTimeF = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                strCheckOut_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();
                                            }
                                            catch
                                            {

                                            }
                                            //here Code modified on date 18 March 2014 Kunal

                                            if (DtIn.Rows.Count == 0)
                                            {
                                                InException = "In";
                                            }

                                            if (DtOut.Rows.Count == 0)
                                            {
                                                OutException = "Out";
                                            }
                                        }
                                    }
                                    else
                                    {
                                        InTimeF = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());
                                        strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                        OutTimeF = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());
                                        strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                        if (TempInOut.Rows.Count == 1)
                                        {
                                            OutException = "Out";
                                            OutTimeF = Convert.ToDateTime("1/1/1900");
                                        }
                                    }
                                }



                                // Modified On 10/01/2014 by nitin jain
                                if ((InTimeF == Convert.ToDateTime("1/1/1900")) || (OutTimeF == Convert.ToDateTime("1/1/1900")))
                                {
                                    OverTimeMin = 0;
                                }
                                else
                                {
                                    OverTimeMin = objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                }
                                //......................................

                                //Add On 10-08-2015


                                //this condition added by jitendra upadhyay on 18-02-2017
                                //condition for enable efffect of leave count on week off parameter 
                                //in future if error will come due to this first if condition please remove it
                                //because before now it was not here 
                                //code start
                                if (IsLeave && LeaveCountOnWeekOff.Trim() == "True")
                                {

                                    bool IsPaid = false;

                                    IsPaid = ObjLeaveReq.IsPaidLeave(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                    if (IsPaid)
                                    {
                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                    }
                                    else
                                    {
                                        //Modified By Priya Jain(01.03.2014)
                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                    }

                                }

                                //code end
                                else if (HolidayOnWeekOff == true)
                                {

                                    if (IsHoliday)
                                    {

                                        if (HolidayOTEnabled == "1")
                                        {
                                            if (OverTimeMin == 0)
                                            {
                                                AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                                OverTimeMin = 0;
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", OverTimeMin.ToString(), "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", OverTimeMin.ToString(), "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }

                                            //Update On 27-03-2015
                                            //// WorkMin = EffectiveWorkMin;
                                            //if (MaxOt < WorkMin)
                                            //{
                                            //    WorkMin = MaxOt;
                                            //}
                                            //// objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                        }
                                        else
                                        {
                                            AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                            //Update On 26-03-2015
                                            //if (OverTimeMin > AssignMin)
                                            //{
                                            //    OverTimeMin = AssignMin;
                                            //}
                                            OverTimeMin = 0;
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", OverTimeMin.ToString(), "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            ////objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                        }
                                    }
                                    else
                                    {
                                        if (WeekOffOTEnabled.ToString() == "1")
                                        {
                                            // Modified On 10/07/2014 By Nitin Jain

                                            //Update On 27-03-2015
                                            //if (Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString())) < OverTimeMin)
                                            //{
                                            //    OverTimeMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString()));
                                            //}

                                            //Update On 16-06-2015 For MEW
                                            if (OverTimeMin == 0)
                                            {
                                                AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                                OverTimeMin = 0;
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                        }
                                        else
                                        {
                                            AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                            //Update On 26-03-2015
                                            //if (OverTimeMin > AssignMin)
                                            //{
                                            //    OverTimeMin = AssignMin;
                                            //}
                                            OverTimeMin = 0;
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                    }
                                }
                                else
                                {
                                    if (WeekOffOTEnabled.ToString() == "1")
                                    {
                                        // Modified On 10/07/2014 By Nitin Jain

                                        //Update On 27-03-2015
                                        //if (Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString())) < OverTimeMin)
                                        //{
                                        //    OverTimeMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString()));
                                        //}

                                        //Update On 16-06-2015 For MEW
                                        if (OverTimeMin == 0)
                                        {
                                            AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                            OverTimeMin = 0;
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                        else
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                    }
                                    else
                                    {
                                        AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                        //Update On 26-03-2015
                                        //if (OverTimeMin > AssignMin)
                                        //{
                                        //    OverTimeMin = AssignMin;
                                        //}
                                        OverTimeMin = 0;

                                        //Add Code On 02-06-2016 By Lokesh
                                        if (FromDate >= dtDOJ)
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                        else
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                    }
                                }
                                //here week off code end
                            }
                        }
                    }
                    else
                    {
                        // Employee Has Not Schedule






                        if (DefaultShiftId != "" && DefaultShiftId != "0")
                        {
                            // Means Default Shift Exists in COmpany

                            //// Here we will find company level week off

                            //// This information will also get with company level
                            //// Log Data
                            //// From Date -1 From +1
                            //DataTable dtLogOnDate = new DataTable();
                            //dtLogOnDate = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();


                            // / How many time table has in that shift
                            DataTable dtShiftAllDate = objEmpSch.GetSheduleDescriptionByEmpId(empidlist.Split(',')[i].ToString(), FromDate.ToString());
                            // dtShiftAllDate = new DataView(dtShiftAllDate, "Att_Date='" + FromDate + "'", "", DataViewRowState.CurrentRows).ToTable();
                            if (dtShiftAllDate.Rows.Count == 0)
                            {
                                // Default Shift Day Code 
                                DataTable defaultShift = objShift.GetShiftDescriptionByShiftId(DefaultShiftId);

                                if (defaultShift.Rows.Count > 0)
                                {
                                    string strCycleType = defaultShift.Rows[0]["Cycle_Type"].ToString().Split('-')[0].ToString();

                                    switch (strCycleType)
                                    {
                                        case "Week":
                                            string DayofWeek = FromDate.DayOfWeek.ToString();
                                            switch (DayofWeek)
                                            {
                                                case "Monday":
                                                    DayofWeek = "1";
                                                    break;
                                                case "Tuesday":
                                                    DayofWeek = "2";
                                                    break;
                                                case "Wednesday":
                                                    DayofWeek = "3";
                                                    break;
                                                case "Thursday":
                                                    DayofWeek = "4";
                                                    break;
                                                case "Friday":
                                                    DayofWeek = "5";
                                                    break;
                                                case "Saturday":
                                                    DayofWeek = "6";
                                                    break;
                                                case "Sunday":
                                                    DayofWeek = "7";
                                                    break;

                                            }
                                            defaultShift = new DataView(defaultShift, "Cycle_Day='" + DayofWeek.ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();

                                            break;
                                        case "Month":
                                            string strMonthDay = FromDate.Day.ToString();

                                            defaultShift = new DataView(defaultShift, "Cycle_Day='" + strMonthDay.ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();


                                            break;
                                        case "Day":
                                            defaultShift = new DataView(defaultShift, "Cycle_Day='1'", "", DataViewRowState.CurrentRows).ToTable();

                                            break;
                                    }

                                }

                                if (defaultShift.Rows.Count > 0)
                                {


                                    DataTable DtDefaultTime = objShiftManagement.GetShifByTansId(defaultShift.Rows[0]["Trans_Id"].ToString());
                                    if (DtDefaultTime.Rows.Count > 0)
                                    {

                                        //code added for sultan center on 10-07-2018 by mr. prahlad khatri and jitendra upadhyay
                                        //code start

                                        bool bCheck = false;

                                        for (int t = 0; t < DtDefaultTime.Rows.Count; t++)
                                        {
                                            if (DtDefaultTime.Rows[t]["OnDuty_Time"].ToString() == "" || DtDefaultTime.Rows[t]["OffDuty_Time"].ToString() == "")
                                            {
                                                continue;
                                            }


                                            if (DtDefaultTime.Rows.Count == 1)
                                            {
                                                if (Convert.ToDateTime(DtDefaultTime.Rows[t]["OnDuty_Time"].ToString()) < Convert.ToDateTime(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString()))
                                                {
                                                    bCheck = true;
                                                }
                                            }
                                            else
                                            {
                                                if (Convert.ToDateTime(DtDefaultTime.Rows[DtDefaultTime.Rows.Count - 1]["OnDuty_Time"].ToString()) < Convert.ToDateTime(DtDefaultTime.Rows[DtDefaultTime.Rows.Count - 1]["OffDuty_Time"].ToString()))
                                                {
                                                    bCheck = true;
                                                }

                                            }


                                        }


                                        if (bCheck)
                                        {
                                            string[] arrResult;

                                            //public string[] UpdateTimetable(DateTime OndutyTime1, DateTime Offdutytime1, DateTime OndutyTime2, DateTime Offdutytime2, int mIndex, int tSize, string lEndingOut)
                                            for (int t = 0; t < DtDefaultTime.Rows.Count; t++)
                                            {
                                                if (DtDefaultTime.Rows.Count == 1)
                                                {
                                                    arrResult = UpdateTimetable(Convert.ToDateTime(DtDefaultTime.Rows[t]["OnDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString()), t, DtDefaultTime.Rows.Count, "NA");
                                                    DtDefaultTime.Rows[t]["Beginning_In"] = arrResult[0].ToString();
                                                    DtDefaultTime.Rows[t]["Ending_In"] = arrResult[1].ToString();
                                                    DtDefaultTime.Rows[t]["Beginning_Out"] = arrResult[2].ToString();
                                                    DtDefaultTime.Rows[t]["Ending_Out"] = arrResult[3].ToString();
                                                    DtDefaultTime.AcceptChanges();
                                                }
                                                else if ((DtDefaultTime.Rows.Count - 1) == t)
                                                {
                                                    arrResult = UpdateTimetable(Convert.ToDateTime(DtDefaultTime.Rows[t]["OnDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString()), t, DtDefaultTime.Rows.Count, DtDefaultTime.Rows[t - 1]["Ending_Out"].ToString());
                                                    DtDefaultTime.Rows[t]["Beginning_In"] = arrResult[0].ToString();
                                                    DtDefaultTime.Rows[t]["Ending_In"] = arrResult[1].ToString();
                                                    DtDefaultTime.Rows[t]["Beginning_Out"] = arrResult[2].ToString();
                                                    DtDefaultTime.Rows[t]["Ending_Out"] = arrResult[3].ToString();
                                                    DtDefaultTime.AcceptChanges();

                                                }
                                                else
                                                {
                                                    if (t == 0)
                                                    {
                                                        arrResult = UpdateTimetable(Convert.ToDateTime(DtDefaultTime.Rows[t]["OnDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t + 1]["OnDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t + 1]["OffDuty_Time"].ToString()), t, DtDefaultTime.Rows.Count, "NA");
                                                    }
                                                    else
                                                    {


                                                        arrResult = UpdateTimetable(Convert.ToDateTime(DtDefaultTime.Rows[t]["OnDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t + 1]["OnDuty_Time"].ToString()), Convert.ToDateTime(DtDefaultTime.Rows[t + 1]["OffDuty_Time"].ToString()), t, DtDefaultTime.Rows.Count, DtDefaultTime.Rows[t - 1]["Ending_Out"].ToString());

                                                    }
                                                    DtDefaultTime.Rows[t]["Beginning_In"] = arrResult[0].ToString();
                                                    DtDefaultTime.Rows[t]["Ending_In"] = arrResult[1].ToString();
                                                    DtDefaultTime.Rows[t]["Beginning_Out"] = arrResult[2].ToString();
                                                    DtDefaultTime.Rows[t]["Ending_Out"] = arrResult[3].ToString();
                                                    DtDefaultTime.AcceptChanges();

                                                }
                                            }


                                        }

                                        //code end











                                        for (int t = 0; t < DtDefaultTime.Rows.Count; t++)
                                        {
                                            OnDutyTime = GetTime24(DtDefaultTime.Rows[t]["OnDuty_Time"].ToString());
                                            OffDutyTime = GetTime24(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString());
                                            BeginingIn = DtDefaultTime.Rows[t]["Beginning_In"].ToString();
                                            EndingIn = DtDefaultTime.Rows[t]["Ending_In"].ToString();
                                            BeginingOut = DtDefaultTime.Rows[t]["Beginning_Out"].ToString();
                                            EndingOut = DtDefaultTime.Rows[t]["Ending_Out"].ToString();

                                            BIn = Convert.ToDateTime(DtDefaultTime.Rows[t]["Beginning_In"].ToString());
                                            EIn = Convert.ToDateTime(DtDefaultTime.Rows[t]["Ending_In"].ToString());
                                            BOut = Convert.ToDateTime(DtDefaultTime.Rows[t]["Beginning_Out"].ToString());
                                            EOut = Convert.ToDateTime(DtDefaultTime.Rows[t]["Ending_Out"].ToString());
                                            OnTime = Convert.ToDateTime(DtDefaultTime.Rows[t]["OnDuty_Time"].ToString());
                                            OffTime = Convert.ToDateTime(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString());

                                            AssignMin = int.Parse(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));


                                            //for get log detail accorrding assigned shift
                                            //start
                                            strLogdetail = "";
                                            BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);

                                            if (Convert.ToDateTime(DtDefaultTime.Rows[t]["OnDuty_Time"].ToString()) < Convert.ToDateTime(DtDefaultTime.Rows[t]["OffDuty_Time"].ToString()))
                                            {
                                                EOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EOut.Hour, EOut.Minute, EOut.Second);
                                            }
                                            else
                                            {
                                                EOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EOut.Hour, EOut.Minute, EOut.Second);
                                            }
                                            DataTable dtloginfo = new DataView(dtLog, "Event_Time>='" + BIn + "'  and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                            strLogdetail = String.Join(",", dtloginfo.AsEnumerable().Select(x => x.Field<string>("Event_Time1").ToString()).ToArray());

                                            //foreach (DataRow dr in dtloginfo.Rows)
                                            //{
                                            //    strLogdetail += dr["Event_Time1"].ToString() + ",";
                                            //}
                                            //end

                                            //

                                            if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                            {
                                                TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);

                                            }
                                            else
                                            {
                                                TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                if (Convert.ToDateTime(BeginingIn) >= Convert.ToDateTime(OnDutyTime))
                                                {
                                                    OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                    OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                }
                                                else
                                                {
                                                    OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                    OffTime = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                }

                                            }


                                            try
                                            {
                                                strBreak_in = new DataView(dtBreakInOut, "Func_Code in('" + BreakInKey + "') and Event_Time>='" + OnTime + "' and Event_Time<='" + OffTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable().Rows[0]["Event_Time"].ToString();
                                            }
                                            catch
                                            {
                                                strBreak_in = "1/1/1900";
                                            }

                                            try
                                            {
                                                strBreak_Out = new DataView(dtBreakInOut, "Func_Code in('" + BreakOutKey + "') and Event_Time>='" + OnTime + "' and Event_Time<='" + OffTime + "'", "Event_Time desc", DataViewRowState.CurrentRows).ToTable().Rows[0]["Event_Time"].ToString();
                                            }
                                            catch
                                            {
                                                strBreak_Out = "1/1/1900";
                                            }





                                            //If Log Exists
                                            if (TempInOut.Rows.Count > 0)
                                            {
                                                //InTime

                                                if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingIn))
                                                {

                                                    if (WithKeyPref == "Yes")
                                                    {
                                                        TempIn = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "' and Func_Code='" + InKey + "' ", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    }
                                                    else
                                                    {
                                                        TempIn = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    }
                                                    BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);
                                                    EIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EIn.Hour, EIn.Minute, EIn.Second);
                                                    TempIn = new DataView(TempIn, "Event_Time>='" + BIn + "'  and Event_Time<='" + EIn + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                }
                                                else
                                                {
                                                    if (WithKeyPref == "Yes")
                                                    {
                                                        TempIn = new DataView(dtLog, "Func_Code='" + InKey + "' and Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    }
                                                    else
                                                    {
                                                        TempIn = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    }
                                                    BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);
                                                    EIn = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EIn.Hour, EIn.Minute, EIn.Second);

                                                    TempIn = new DataView(TempIn, "Event_Time>='" + BIn + "'  and Event_Time<='" + EIn + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                }

                                                if (TempIn.Rows.Count > 0)
                                                {

                                                    InTime = TempIn.Rows[0]["Event_Time"].ToString();
                                                    strCheckIn_by_deviceId = TempIn.Rows[0]["Device_Id"].ToString();
                                                }
                                                else
                                                {
                                                    InTime = "1/1/1900";
                                                }


                                                // Out Time


                                                if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                                {
                                                    if (WithKeyPref == "Yes")
                                                    {
                                                        TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    }
                                                    else
                                                    {
                                                        TempOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    }
                                                    BOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BOut.Hour, BOut.Minute, BOut.Second);
                                                    EOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EOut.Hour, EOut.Minute, EOut.Second);
                                                    TempOut = new DataView(TempOut, "Event_Time>='" + BOut + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                }
                                                else
                                                {
                                                    if (Convert.ToDateTime(BeginingOut) <= Convert.ToDateTime(EndingOut))
                                                    {
                                                        if (WithKeyPref == "Yes")
                                                        {
                                                            TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                        }
                                                        else
                                                        {
                                                            TempOut = new DataView(dtLog, "Event_Date='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                        }
                                                        BOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, BOut.Hour, BOut.Minute, BOut.Second);
                                                        EOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EOut.Hour, EOut.Minute, EOut.Second);


                                                        TempOut = new DataView(TempOut, "Event_Time>='" + BOut + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                    }
                                                    else
                                                    {
                                                        if (WithKeyPref == "Yes")
                                                        {
                                                            TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                        }
                                                        else
                                                        {
                                                            TempOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                        }
                                                        BOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BOut.Hour, BOut.Minute, BOut.Second);
                                                        EOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EOut.Hour, EOut.Minute, EOut.Second);


                                                        TempOut = new DataView(TempOut, "Event_Time>='" + BOut + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                    }
                                                }

                                                if (TempOut.Rows.Count > 0)
                                                {

                                                    OutTime = TempOut.Rows[TempOut.Rows.Count - 1]["Event_Time"].ToString();
                                                    strCheckOut_by_deviceId = TempOut.Rows[TempOut.Rows.Count - 1]["Device_Id"].ToString();
                                                }
                                                else
                                                {
                                                    OutTime = "1/1/1900";
                                                }

                                                //if (InTime == "1/1/1900" || OutTime == "1/1/1900")
                                                //{
                                                //    if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                                //    {
                                                //        TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                //        BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);
                                                //        EOut = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, EOut.Hour, EOut.Minute, EOut.Second);

                                                //        TempInOut = new DataView(TempInOut, "Event_Time>='" + BIn + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                //    }
                                                //    else
                                                //    {
                                                //        TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                //        BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);
                                                //        EOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EOut.Hour, EOut.Minute, EOut.Second);

                                                //        TempInOut = new DataView(TempInOut, "Event_Time>='" + BIn + "' and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                //    }
                                                //    if (TempInOut.Rows.Count > 0)
                                                //    {
                                                //        if (WithKeyPref == "Yes")
                                                //        {
                                                //            DataTable DtIn = new DataView(TempInOut, "Func_Code='" + InKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                //            DataTable DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                //            try
                                                //            {
                                                //                InTime = DtIn.Rows[0]["Event_Time"].ToString();
                                                //            }
                                                //            catch
                                                //            {

                                                //            }
                                                //            try
                                                //            {
                                                //                OutTime = DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString();
                                                //            }
                                                //            catch
                                                //            {

                                                //            }
                                                //        }
                                                //        else
                                                //        {
                                                //            InTime = TempInOut.Rows[0]["Event_Time"].ToString();
                                                //            try
                                                //            {
                                                //                OutTime = TempInOut.Rows[TempOut.Rows.Count - 1]["Event_Time"].ToString();
                                                //            }
                                                //            catch
                                                //            {
                                                //            }
                                                //        }
                                                //    }
                                                //}

                                                if (InTime == "1/1/1900" && OutTime != "1/1/1900")
                                                {
                                                    if (NoClockIn)
                                                    {
                                                        if (IsHoliday)
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DefaultShiftId.ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                            continue;
                                                        }
                                                        else
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DefaultShiftId.ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (IsHoliday)
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DefaultShiftId.ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                            continue;
                                                        }
                                                        else
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DefaultShiftId.ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                            continue;
                                                        }

                                                    }
                                                }

                                                if (InTime != "1/1/1900" && OutTime == "1/1/1900")
                                                {
                                                    if (NoClockOut)
                                                    {
                                                        if (IsHoliday)
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DefaultShiftId.ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                            continue;
                                                        }
                                                        else
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DefaultShiftId.ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (IsHoliday)
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtShift.Rows[0]["Shift_Id"].ToString(), false.ToString(), dtShift.Rows[0]["TimeTable_Id"].ToString(), dtShift.Rows[0]["OnDuty_Time"].ToString(), dtShift.Rows[0]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                            continue;
                                                        }
                                                        else
                                                        {

                                                            if (strLateCountWithOutPresent == "True")
                                                            {
                                                                //Add New Code On 19-05-2015

                                                                //Effective Work calculation    

                                                                if (WorkCalMethod == "PairWise")
                                                                {
                                                                    //Pair Wise Start
                                                                    if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                                                    {
                                                                        //same day log
                                                                        TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'   and  Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                        TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                        OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                                        OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                                    }
                                                                    else
                                                                    {
                                                                        //next day and same day log
                                                                        // Modified By Nitin Jain , Modified Date 04/08/2014
                                                                        if (Convert.ToDateTime(BeginingIn) >= Convert.ToDateTime(OnDutyTime))
                                                                        {
                                                                            TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                            TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                            OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                                            OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                                        }
                                                                        else
                                                                        {
                                                                            TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                            TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                            OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                                            OffTime = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                                        }
                                                                    }

                                                                    dtPartialdetail = TempInOut;

                                                                    //ViewState["DtPratial"] = TempInOut;
                                                                    DateTime InTimeF = Convert.ToDateTime("1/1/1900");
                                                                    DateTime OutTimeF = Convert.ToDateTime("1/1/1900");
                                                                    InTime = Convert.ToDateTime("1/1/1900").ToString();
                                                                    for (int l = 0; l < TempInOut.Rows.Count; l++)
                                                                    {

                                                                        if (TempInOut.Rows.Count == l)
                                                                        {
                                                                            // Modified By Nitin Jain , Modified Date 04/08/2014
                                                                            InTime = TempInOut.Rows[l]["Event_Time"].ToString();

                                                                            strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();


                                                                            if (Convert.ToDateTime(InTime) < BOut)
                                                                            {
                                                                                InTimeF = Convert.ToDateTime(InTime);
                                                                                OutTimeF = Convert.ToDateTime("1/1/1900");
                                                                            }
                                                                            else
                                                                            {
                                                                                OutTimeF = Convert.ToDateTime(InTime);
                                                                                InTimeF = Convert.ToDateTime("1/1/1900");
                                                                            }
                                                                            OutException = "Out";
                                                                        }
                                                                        else if (TempInOut.Rows.Count > 1 && l == 0)
                                                                        {
                                                                            InTime = TempInOut.Rows[l]["Event_Time"].ToString();

                                                                            strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();

                                                                            InTimeF = Convert.ToDateTime(TempInOut.Rows[l]["Event_Time"].ToString());

                                                                            strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                                            try
                                                                            {
                                                                                OutTimeF = Convert.ToDateTime(TempInOut.Rows[l + 1]["Event_Time"].ToString());
                                                                                strCheckOut_by_deviceId = TempInOut.Rows[l + 1]["Device_Id"].ToString();
                                                                            }
                                                                            catch
                                                                            {
                                                                                OutException = "Out";
                                                                            }
                                                                            WorkMin += objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                                                        }
                                                                        else if (l % 2 == 0)
                                                                        {
                                                                            try
                                                                            {
                                                                                InTimeF = Convert.ToDateTime(TempInOut.Rows[l]["Event_Time"].ToString());
                                                                                strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                                                OutTimeF = Convert.ToDateTime(TempInOut.Rows[l + 1]["Event_Time"].ToString());
                                                                                strCheckOut_by_deviceId = TempInOut.Rows[l + 1]["Device_Id"].ToString();
                                                                                WorkMin += objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                                                            }
                                                                            catch
                                                                            {
                                                                                OutException = "Out";
                                                                            }
                                                                        }
                                                                    }

                                                                    WorkMin += BreakRelaxMin;
                                                                    WorkMin = WorkMin + BreakMin;

                                                                    try
                                                                    {
                                                                        // Modified By Nitin Jain , Modified Date 04/08/2014
                                                                        InTimeF = Convert.ToDateTime(InTime);
                                                                        if (Convert.ToDateTime(InTimeF) < BOut && OutTimeF == InTimeF)
                                                                        {
                                                                            InTimeF = Convert.ToDateTime(InTime);
                                                                            OutTimeF = Convert.ToDateTime("1/1/1900");
                                                                        }
                                                                        else if (Convert.ToDateTime(InTimeF) >= BOut && OutTimeF == InTimeF)
                                                                        {
                                                                            OutTimeF = Convert.ToDateTime(InTimeF);
                                                                            InTimeF = Convert.ToDateTime("1/1/1900");
                                                                        }
                                                                        else
                                                                        {
                                                                        }
                                                                    }
                                                                    catch
                                                                    {
                                                                        InTimeF = Convert.ToDateTime("1/1/1900");
                                                                    }
                                                                    if (InTimeF > OnTime)
                                                                    {
                                                                        //condition add on date 18 Jan 2014 kunal
                                                                        if (InTimeF.Hour == OnTime.Hour && InTimeF.Minute == OnTime.Minute)
                                                                        {
                                                                            //Do Nothing 
                                                                        }
                                                                        else
                                                                        {
                                                                            LateMin = objAttendance.GetTimeDifference(Convert.ToDateTime(OnTime), InTimeF);
                                                                            IsLate = true;
                                                                            strValue = GetLateRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, LateMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Late_Min"].ToString()));
                                                                            LateRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                            LatePenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                                        }

                                                                    }
                                                                    // Modified By Nitin Jain , Modified Date 04/08/2014
                                                                    if (OutTimeF < OffTime && OutTimeF <= EOut)
                                                                    {
                                                                        if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                                        {
                                                                            // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                            OutTimeE = Convert.ToDateTime("01/01/1900");
                                                                        }
                                                                        else
                                                                        {
                                                                            OutTimeE = OutTimeF;
                                                                        }
                                                                        // Modified By Nitin Jain , Modified Date 04/08/2014
                                                                        //Modified On 20-08-2015
                                                                        if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                                        {
                                                                            EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                                        }
                                                                        else
                                                                        {
                                                                            EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                                        }

                                                                        //EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffDutyTime));
                                                                        IsEarlyOut = true;
                                                                        strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Early_Min"].ToString()));
                                                                        EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                        EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);

                                                                    }
                                                                    // pri
                                                                    else
                                                                    {
                                                                        if (OutTimeF <= BOut && OutTimeF <= EOut)
                                                                        {
                                                                            if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                                            {
                                                                                // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                                OutTimeE = Convert.ToDateTime("01/01/1900");
                                                                            }
                                                                            else
                                                                            {
                                                                                OutTimeE = OutTimeF;
                                                                            }

                                                                            //Modified On 20-08-2015
                                                                            if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                                            {
                                                                                EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                                            }
                                                                            else
                                                                            {
                                                                                EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                                            }

                                                                            //EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffDutyTime));
                                                                            IsEarlyOut = true;
                                                                            strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Early_Min"].ToString()));
                                                                            EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                            EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);

                                                                        }

                                                                    }
                                                                    // Modification By Nitin JAIN
                                                                    // Modified by Priya Jain(1.04.2014)
                                                                    //IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                                    //IsHoliday = objEmpHoliday.GetEmployeeHolidayOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                                    OutTimeE = OutTimeF;
                                                                    if (IsWeekOff == false && IsHoliday == false && IsLeave == false)
                                                                    {
                                                                        if (NoClockIn == true || NoClockOut == true)
                                                                        {
                                                                            if ((Convert.ToDateTime(InTimeF) < Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                                            {
                                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                                continue;
                                                                            }
                                                                            if ((Convert.ToDateTime(InTimeF) > Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                                            {
                                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), OutTimeE.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                                continue;
                                                                            }
                                                                            // Modified By Nitin Jain , Modified Date 04/08/2014
                                                                            if ((Convert.ToDateTime(OutTimeE) >= Convert.ToDateTime(BOut)) && InTimeF == Convert.ToDateTime("1/1/1900"))
                                                                            {
                                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                                continue;
                                                                            }
                                                                        }

                                                                    }

                                                                    if (OutTimeF < OffTime)
                                                                    {
                                                                        //condition add on date 18 Jan 2014 kunal
                                                                        if (OutTimeF.Hour == OffTime.Hour && OutTimeF.Minute == OffTime.Minute)
                                                                        {
                                                                            //Do Nothing 
                                                                        }
                                                                        else
                                                                        {
                                                                            //Modified On 20-08-2015
                                                                            if (OutTimeF == Convert.ToDateTime("1/1/1900"))
                                                                            {
                                                                                EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                                            }
                                                                            else
                                                                            {
                                                                                EarlyMin = objAttendance.GetTimeDifference(OutTimeF, Convert.ToDateTime(OffTime));
                                                                            }

                                                                            //EarlyMin = objAttendance.GetTimeDifference(Convert.ToDateTime(OutTimeF), OffTime);
                                                                            IsEarlyOut = true;
                                                                            strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Early_Min"].ToString()));


                                                                            EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                            EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                                        }

                                                                    }
                                                                    int PartialViolationMin = 0;
                                                                    int PartialMin = 0;
                                                                    strValue = GetPartialViolationMin(empidlist.Split(',')[i].ToString(), FromDate, dtSchedule.Rows[t]["TimeTable_Id"].ToString(), strCompanyId, strBrandId, strLocationId, strWorkCalcMethod, dtPartialdetail, DtNextPartailInOut, strTimeZoneId);
                                                                    PartialMin = int.Parse(strValue.Split('-')[0]);
                                                                    PartialViolationMin = int.Parse(strValue.Split('-')[1]);
                                                                    WorkMin += PartialMin;
                                                                    if (PartialMethod == "Min")
                                                                    {
                                                                        //PartialViolationMin = Convert.ToInt32(PartialViolationMin) * Convert.ToInt32(Partial_Min_Deduct);
                                                                        PartialViolationMin = Convert.ToInt32(PartialViolationMin);
                                                                    }

                                                                    //Update For Posta On 17-04-2015
                                                                    EffectiveWorkMin = WorkMin;

                                                                    OverTimeMin = objAttendance.GetOverTimeMin(empidlist.Split(',')[i].ToString(), InTimeF, OutTimeF, Convert.ToDateTime(OnTime), Convert.ToDateTime(OffTime), EffectiveWorkMin, strCompanyId, strBrandId, strLocationId, dtSchedule.Rows[t]["Field2"].ToString());


                                                                    if (IsHoliday)
                                                                    {

                                                                        WorkMin = AssignMin;
                                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    }
                                                                    else
                                                                    {
                                                                        LateMin = 0;
                                                                        EarlyMin = 0;

                                                                        if (LatePenaltyMin > 0)
                                                                        {

                                                                            LateMin = LatePenaltyMin;
                                                                            LatePenaltyMin = 0;
                                                                        }

                                                                        if (EarlyPenaltyMin > 0)
                                                                        {
                                                                            EarlyMin = EarlyPenaltyMin;
                                                                            EarlyPenaltyMin = 0;
                                                                        }

                                                                        if (InTimeF == OutTimeF && NoClockIn == false && NoClockOut == false)
                                                                        {


                                                                            //modified by jitendra on 26-04-2018 for show late and early when any one(in and out) log not exists but employee showing present for sultan center 
                                                                            //commentd old line and added  new

                                                                            //objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id);

                                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                        }
                                                                        else
                                                                        {
                                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), PartialMin.ToString(), PartialViolationMin.ToString(), WorkMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                        }
                                                                    }
                                                                    //Pair Wise End
                                                                }
                                                                else
                                                                {
                                                                    //Calculation of inout method

                                                                    DateTime InTimeFL = Convert.ToDateTime(InTime);
                                                                    DateTime OutTimeFE = Convert.ToDateTime(OutTime);
                                                                    if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                                                    {
                                                                        //same day log
                                                                        TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'   and  Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                        OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                                        OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                                    }
                                                                    else
                                                                    {//next day and same day log
                                                                     // Modified By Nitin Jain , Modified Date 04/08/2014
                                                                        if (Convert.ToDateTime(BeginingIn) >= Convert.ToDateTime(OnDutyTime))
                                                                        {
                                                                            TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                            TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                            OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                                            OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                                        }
                                                                        else
                                                                        {
                                                                            TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                            TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                            OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                                            //Update On 26-03-2015
                                                                            OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                                            //OffTime = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, OffTime.Hour, OffTime.Minute, OffTime.Second);
                                                                        }
                                                                    }
                                                                    //Modify By  Priya Jain(04.04.2014)
                                                                    // ViewState["DtNextPartailInOut"] = TempInOut;
                                                                    DtNextPartailInOut = TempInOut;
                                                                    if (TempInOut.Rows.Count > 0)
                                                                    {
                                                                        if (WithKeyPref == "Yes")
                                                                        {
                                                                            //Add On 27-03-2015
                                                                            if (Convert.ToBoolean(TempFKey))
                                                                            {
                                                                                InTimeFL = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());
                                                                                strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                                                OutTimeFE = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());
                                                                                strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                                                                if (TempInOut.Rows.Count == 1)
                                                                                {
                                                                                    OutException = "Out";
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                DataTable DtIn = new DataView(TempInOut, "Func_Code='" + InKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                                DataTable DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                                // Modified By Nitin Jain On 28/08/2014 For Break In Out .......
                                                                                DataTable DtBreakIn = new DataView(TempInOut, "Func_Code='" + BreakInKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                                DataTable DtBreakOut = new DataView(TempInOut, "Func_Code='" + BreakOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                                // .............................................................
                                                                                try
                                                                                {
                                                                                    InTimeFL = Convert.ToDateTime(DtIn.Rows[0]["Event_Time"].ToString());
                                                                                    strCheckIn_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();
                                                                                }
                                                                                catch
                                                                                {
                                                                                    InTimeFL = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                                                    strCheckIn_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();
                                                                                }
                                                                                try
                                                                                {
                                                                                    OutTimeFE = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                                                    strCheckOut_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();
                                                                                }
                                                                                catch
                                                                                {
                                                                                    OutTimeFE = Convert.ToDateTime(DtIn.Rows[0]["Event_Time"].ToString());
                                                                                    strCheckOut_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();
                                                                                    OutException = "Out";
                                                                                    // OutTimeF = InTimeF;
                                                                                }
                                                                                if (DtIn.Rows.Count == 0)
                                                                                {
                                                                                    InException = "In";
                                                                                }

                                                                                if (DtOut.Rows.Count == 0)
                                                                                {
                                                                                    OutException = "Out";
                                                                                }
                                                                                if (InException != "In" && OutException != "Out")
                                                                                {
                                                                                    try
                                                                                    {
                                                                                        BreakInTime = DtBreakIn.Rows[0]["Event_Time"].ToString();
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                        BreakInTime = "00:00";
                                                                                    }
                                                                                    try
                                                                                    {
                                                                                        BreakOutTime = DtBreakOut.Rows[0]["Event_Time"].ToString();
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                        BreakOutTime = "00:00";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            InTimeFL = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());
                                                                            strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                                            OutTimeFE = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());
                                                                            strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                                                            if (TempInOut.Rows.Count == 1)
                                                                            {
                                                                                OutException = "Out";
                                                                            }
                                                                        }
                                                                    }

                                                                    //IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                                    if (IsLeave == true)
                                                                    {
                                                                        WorkMin = objAttendance.GetTimeDifference(InTimeFL, OutTimeFE);
                                                                        WorkMin += BreakRelaxMin;
                                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTimeFE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", WorkMin.ToString(), AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                        continue;
                                                                    }
                                                                    ////***                                               
                                                                    if (Convert.ToDateTime(InTimeFL) > Convert.ToDateTime(OnTime))
                                                                    {
                                                                        if (InTimeFL.Hour == OnTime.Hour && InTimeFL.Minute == OnTime.Minute)
                                                                        {
                                                                            //Do Nothing 
                                                                        }
                                                                        else
                                                                        {
                                                                            // Update on 15/12/2014 to Calculate late min from EIn insted of OnDuty Time
                                                                            LateMin = objAttendance.GetTimeDifference(OnTime, InTimeFL);
                                                                            // LateMin = objAttendance.GetTimeDifference(Convert.ToDateTime(EIn), InTimeF);
                                                                            IsLate = true;
                                                                            strValue = GetLateRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, LateMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Late_Min"].ToString()));
                                                                            LateRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                            LatePenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                                        }
                                                                    }
                                                                    // Modified by Nitin Jain ON 01-Apr-2014
                                                                    if (OutTimeFE < OffTime && OutTimeFE <= EOut)
                                                                    {
                                                                        if (InTimeFL == OutTimeFE && InTimeFL < BOut)
                                                                        {
                                                                            if (WithKeyPref == "Yes")
                                                                            {
                                                                                //Add On 27-03-2015
                                                                                if (Convert.ToBoolean(TempFKey))
                                                                                {
                                                                                    OutTimeFE = Convert.ToDateTime("01/01/1900");
                                                                                }
                                                                                else
                                                                                {
                                                                                    OutTimeFE = InTimeFL;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                OutTimeFE = Convert.ToDateTime("01/01/1900");

                                                                                // OutTimeF = InTimeF;
                                                                            }
                                                                        }
                                                                        else if (InTimeFL == OutTimeFE && InTimeFL > BOut)
                                                                        {
                                                                            InTimeFL = Convert.ToDateTime("01/01/1900");
                                                                            InException = "In";
                                                                            OutException = "";
                                                                        }
                                                                        else
                                                                        {
                                                                        }

                                                                        if (OutTimeFE.ToString("dd/MM/yyyy") == "01/01/1900")
                                                                        {
                                                                            // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                            OutTimeE = Convert.ToDateTime("01/01/1900");
                                                                            OutException = "Out";
                                                                        }
                                                                        else
                                                                        {
                                                                            OutTimeE = OutTimeFE;
                                                                        }

                                                                        // Modified by nitin jain on 31-03-2014
                                                                        //Modified On 20-08-2015
                                                                        if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                                        {
                                                                            EarlyMin = objAttendance.GetTimeDifference(InTimeFL, Convert.ToDateTime(OffTime));
                                                                        }
                                                                        else
                                                                        {
                                                                            EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                                        }

                                                                        //EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                                        IsEarlyOut = true;
                                                                        strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Early_Min"].ToString()));
                                                                        EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                        EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);

                                                                    }
                                                                    // Modified By Priya Jain on 02-04-2014
                                                                    else
                                                                    {

                                                                        if (OutTimeFE > BOut && OutTimeFE <= EOut)
                                                                        {

                                                                            if (InTimeFL == OutTimeFE && OutTimeFE < BOut)
                                                                            {
                                                                                OutTimeFE = Convert.ToDateTime("01/01/1900");
                                                                            }
                                                                            else if (InTimeFL == OutTimeFE && OutTimeFE > BOut)
                                                                            {
                                                                                InTimeFL = Convert.ToDateTime("01/01/1900");
                                                                            }
                                                                            else
                                                                            {
                                                                            }

                                                                            if (OutTimeFE.ToString("dd/MM/yyyy") == "01/01/1900")
                                                                            {
                                                                                // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                                OutTimeE = Convert.ToDateTime("01/01/1900");
                                                                            }
                                                                            else
                                                                            {
                                                                                OutTimeE = OutTimeFE;
                                                                            }
                                                                        }
                                                                    }
                                                                    // Modified By Priya Jain(01.04.2014)
                                                                    //IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                                    //IsHoliday = objEmpHoliday.GetEmployeeHolidayOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());

                                                                    if (IsWeekOff == false && IsHoliday == false && IsLeave == false)
                                                                    {
                                                                        if (NoClockIn == true || NoClockOut == true)
                                                                        {
                                                                            if (((Convert.ToDateTime(InTimeFL) < Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900")))
                                                                            {
                                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                                continue;
                                                                            }
                                                                            if ((Convert.ToDateTime(OutTimeE) > Convert.ToDateTime(BOut)) && InTimeFL == Convert.ToDateTime("1/1/1900"))
                                                                            {
                                                                                if (NoClockIn == true)
                                                                                {
                                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                                }
                                                                                else
                                                                                {
                                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                                }
                                                                                continue;
                                                                            }
                                                                            if ((((Convert.ToDateTime(InTimeFL) > Convert.ToDateTime(EIn)) || Convert.ToDateTime(InTimeFL) < Convert.ToDateTime(BIn)) && NoClockIn == true))
                                                                            {
                                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                                continue;
                                                                            }
                                                                            if ((((Convert.ToDateTime(OutTimeE) > Convert.ToDateTime(EOut)) || Convert.ToDateTime(OutTimeE) < Convert.ToDateTime(EIn)) && NoClockOut == true))
                                                                            {
                                                                                if (OutException == "Out")
                                                                                {
                                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), "01/01/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                                    continue;
                                                                                }
                                                                            }
                                                                        }
                                                                    }


                                                                    int PartialViolationMin = 0;
                                                                    int PartialMin = 0;

                                                                    strValue = GetPartialViolationMin(empidlist.Split(',')[i].ToString(), FromDate, dtSchedule.Rows[t]["TimeTable_Id"].ToString(), strCompanyId, strBrandId, strLocationId, strWorkCalcMethod, dtPartialdetail, DtNextPartailInOut, strTimeZoneId);
                                                                    PartialMin = int.Parse(strValue.Split('-')[0]);
                                                                    PartialViolationMin = int.Parse(strValue.Split('-')[1]);
                                                                    LateMin = 0;
                                                                    EarlyMin = 0;

                                                                    if (LatePenaltyMin > 0)
                                                                    {
                                                                        LateMin = LatePenaltyMin;
                                                                        //LatePenaltyMin = 0;
                                                                    }
                                                                    //WorkMin = WorkMin - BreakMin;

                                                                    if (EarlyPenaltyMin > 0)
                                                                    {
                                                                        EarlyMin = EarlyPenaltyMin;
                                                                        EarlyPenaltyMin = 0;
                                                                    }

                                                                    OverTimeMin = objAttendance.GetOverTimeMin(empidlist.Split(',')[i].ToString(), InTimeFL, OutTimeFE, Convert.ToDateTime(OnTime), Convert.ToDateTime(OffTime), EffectiveWorkMin, strCompanyId, strBrandId, strLocationId, dtSchedule.Rows[t]["Field2"].ToString());
                                                                    if (IsHoliday)
                                                                    {
                                                                        if (HolidayOTEnabled == "1")
                                                                        {
                                                                            //Update On 27-03-2015
                                                                            WorkMin = EffectiveWorkMin;
                                                                            //if (MaxOt < WorkMin)
                                                                            //{
                                                                            //    WorkMin = MaxOt;
                                                                            //}
                                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTimeFE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                            continue;
                                                                        }
                                                                        else
                                                                        {
                                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTimeFE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                            continue;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if (InTimeFL == Convert.ToDateTime("01/01/1900") || OutTimeE == Convert.ToDateTime("01/01/1900"))
                                                                        {
                                                                            if (InException == "In" && NoClockIn == true)
                                                                            {
                                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), Convert.ToDateTime("01/01/1900").ToString(), InTimeFL.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                                continue;
                                                                            }
                                                                            else if (OutException == "Out" && NoClockIn == true)
                                                                            {
                                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), Convert.ToDateTime("01/01/1900").ToString(), InTimeFL.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                                continue;
                                                                                // objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), Convert.ToDateTime("01/01/1900").ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                                                            }
                                                                            else
                                                                            {
                                                                                // objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeFL.ToString(), OutTimeFE.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), PartialMin.ToString(), PartialViolationMin.ToString(), WorkMin.ToString(), AssignMin.ToString(), InException, OutException, BreakInTime, BreakOutTime, "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                                continue;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                //End New Code On 19-05-2015
                                                            }
                                                            else
                                                            {
                                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtShift.Rows[0]["Shift_Id"].ToString(), false.ToString(), dtShift.Rows[0]["TimeTable_Id"].ToString(), dtShift.Rows[0]["OnDuty_Time"].ToString(), dtShift.Rows[0]["OffDuty_Time"].ToString(), InTime.ToString(), "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (InTime == "1/1/1900" && OutTime == "1/1/1900")
                                                {
                                                    if (IsHoliday)
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                    else if (IsLeave)
                                                    {
                                                        bool IsPaid = false;

                                                        IsPaid = ObjLeaveReq.IsPaidLeave(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                        if (IsPaid)
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }
                                                        else
                                                        {
                                                            //modified by priya jain(1-04-2014)
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }




                                                    }

                                                    else
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);


                                                    }
                                                }
                                                else
                                                {//Effective Work calculation
                                                    TempIn = new DataTable();
                                                    TempOut = new DataTable();
                                                    TempInOut = new DataTable();
                                                    if (WorkCalMethod == "PairWise")
                                                    {
                                                        if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                                        {//same day log
                                                            TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'   and  Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                            TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();


                                                            OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                            OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);

                                                        }
                                                        else
                                                        {//next day and same day log

                                                            TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();


                                                            TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                            OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                            OffTime = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, OffTime.Hour, OffTime.Minute, OffTime.Second);

                                                        }
                                                        dtPartialdetail = TempInOut;

                                                        //ViewState["DtPratial"] = TempInOut;
                                                        DateTime InTimeF = Convert.ToDateTime("1/1/1900");
                                                        DateTime OutTimeF = Convert.ToDateTime("1/1/1900");
                                                        InTime = Convert.ToDateTime("1/1/1900").ToString();
                                                        for (int l = 0; l < TempInOut.Rows.Count; l++)
                                                        {

                                                            if (TempInOut.Rows.Count == 1)
                                                            {
                                                                InTime = TempInOut.Rows[l]["Event_Time"].ToString();

                                                                strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                            }
                                                            else if (TempInOut.Rows.Count > 1 && l == 0)
                                                            {
                                                                InTime = TempInOut.Rows[l]["Event_Time"].ToString();
                                                                strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                                InTimeF = Convert.ToDateTime(TempInOut.Rows[l]["Event_Time"].ToString());
                                                                strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                                try
                                                                {
                                                                    OutTimeF = Convert.ToDateTime(TempInOut.Rows[l + 1]["Event_Time"].ToString());

                                                                    strCheckOut_by_deviceId = TempInOut.Rows[l + 1]["Device_Id"].ToString();
                                                                }
                                                                catch
                                                                {
                                                                    OutException = "Out";
                                                                }
                                                                WorkMin += objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                                            }
                                                            else if (l % 2 == 0)
                                                            {
                                                                try
                                                                {
                                                                    InTimeF = Convert.ToDateTime(TempInOut.Rows[l]["Event_Time"].ToString());
                                                                    strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                                    OutTimeF = Convert.ToDateTime(TempInOut.Rows[l + 1]["Event_Time"].ToString());
                                                                    strCheckOut_by_deviceId = TempInOut.Rows[l + 1]["Device_Id"].ToString();
                                                                    WorkMin += objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                                                }
                                                                catch
                                                                {
                                                                    OutException = "Out";

                                                                }
                                                            }


                                                        }
                                                        // Modify By Priya Jain(05.04.2014)

                                                        WorkMin += BreakRelaxMin;
                                                        WorkMin = WorkMin + BreakMin;
                                                        try
                                                        {
                                                            InTimeF = Convert.ToDateTime(InTime);
                                                        }
                                                        catch
                                                        {
                                                            InTimeF = Convert.ToDateTime("1/1/1900");
                                                        }



                                                        if (InTimeF > OnTime)
                                                        {
                                                            //condition add on date 18 Jan 2014 kunal
                                                            if (InTimeF.Hour == OnTime.Hour && InTimeF.Minute == OnTime.Minute)
                                                            {
                                                                //Do Nothing 
                                                            }
                                                            else
                                                            {
                                                                // Nitin Jain 15/12/2014 Calculate Late Min from EIn Insted of OnDuty Time
                                                                LateMin = objAttendance.GetTimeDifference(Convert.ToDateTime(OnTime), InTimeF);
                                                                // LateMin = objAttendance.GetTimeDifference(Convert.ToDateTime(EIn), InTimeF);
                                                                IsLate = true;
                                                                strValue = GetLateRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, LateMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Late_Min"].ToString()));
                                                                LateRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                LatePenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                            }
                                                        }

                                                        //Modify By Priya Jain(07.04.2014)
                                                        if (OutTimeF < BOut && OutTimeF <= EOut)
                                                        {
                                                            if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                            {
                                                                // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                OutTimeE = Convert.ToDateTime("01/01/1900");
                                                            }
                                                            else
                                                            {
                                                                OutTimeE = OutTimeF;
                                                            }

                                                            //Modified On 20-08-2015
                                                            if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                            {
                                                                EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                            }
                                                            else
                                                            {
                                                                EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                            }

                                                            //EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(BOut));
                                                            IsEarlyOut = true;
                                                            strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Early_Min"].ToString()));
                                                            EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                            EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);

                                                        }
                                                        // pri
                                                        else if (OutTimeF <= BOut && OutTimeF <= EOut)
                                                        {
                                                            if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                            {
                                                                // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                OutTimeE = Convert.ToDateTime("01/01/1900");
                                                            }
                                                            else
                                                            {
                                                                OutTimeE = OutTimeF;
                                                            }

                                                            //Modified On 20-08-2015
                                                            if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                            {
                                                                EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                            }
                                                            else
                                                            {
                                                                EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                            }

                                                            //EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(BOut));
                                                            IsEarlyOut = true;
                                                            strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Early_Min"].ToString()));
                                                            EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                            EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                        }
                                                        else if (OutTimeF > BOut && OutTimeF <= EOut)
                                                        {

                                                            if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                            {
                                                                OutTimeE = Convert.ToDateTime(InTimeF);
                                                                OutTimeE = Convert.ToDateTime("01/01/1900");
                                                            }
                                                            else
                                                            {
                                                                OutTimeE = OutTimeF;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (OutTimeF >= BOut && OutTimeF <= EOut)
                                                            {
                                                                if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                                {
                                                                    OutTimeE = Convert.ToDateTime(InTimeF);
                                                                    OutTimeE = Convert.ToDateTime("01/01/1900");
                                                                }
                                                                else
                                                                {
                                                                    OutTimeE = OutTimeF;
                                                                }
                                                            }
                                                        }

                                                        // Modification By Nitin JAIN
                                                        // Modified by Priya Jain(1.04.2014)
                                                        // IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                        //IsHoliday = objEmpHoliday.GetEmployeeHolidayOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                        if (IsWeekOff == false && IsHoliday == false && IsLeave == false)
                                                        {
                                                            if (NoClockIn == true || NoClockOut == true)
                                                            {
                                                                if ((Convert.ToDateTime(InTimeF) < Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                                {

                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);

                                                                    continue;
                                                                }
                                                                if ((Convert.ToDateTime(InTimeF) > Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                                {
                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), OutTimeE.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);

                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                        if (OutTimeF < OffTime)
                                                        {
                                                            //condition add on date 18 Jan 2014 kunal
                                                            if (OutTimeF.Hour == OffTime.Hour && OutTimeF.Minute == OffTime.Minute)
                                                            {
                                                                //Do Nothing 
                                                            }
                                                            else
                                                            {
                                                                //Modified On 20-08-2015
                                                                if (OutTimeF == Convert.ToDateTime("1/1/1900"))
                                                                {
                                                                    EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                                }
                                                                else
                                                                {
                                                                    EarlyMin = objAttendance.GetTimeDifference(OutTimeF, Convert.ToDateTime(OffTime));
                                                                }

                                                                //EarlyMin = objAttendance.GetTimeDifference(Convert.ToDateTime(OutTimeF), OffTime);
                                                                IsEarlyOut = true;
                                                                strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Early_Min"].ToString()));
                                                                EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                            }
                                                        }
                                                        /////

                                                        int PartialViolationMin = 0;
                                                        int PartialMin = 0;
                                                        LateMin = 0;
                                                        EarlyMin = 0;
                                                        if (LatePenaltyMin > 0)
                                                        {
                                                            LateMin = LatePenaltyMin;
                                                            LatePenaltyMin = 0;
                                                        }

                                                        if (EarlyPenaltyMin > 0)
                                                        {
                                                            EarlyMin = EarlyPenaltyMin;
                                                            EarlyPenaltyMin = 0;
                                                        }

                                                        strValue = GetPartialViolationMin(empidlist.Split(',')[i].ToString(), FromDate, dtShift.Rows[0]["TimeTable_Id"].ToString(), strCompanyId, strBrandId, strLocationId, strWorkCalcMethod, dtPartialdetail, DtNextPartailInOut, strTimeZoneId);

                                                        PartialMin = int.Parse(strValue.Split('-')[0]);
                                                        PartialViolationMin = int.Parse(strValue.Split('-')[1]);


                                                        WorkMin += PartialMin;

                                                        EffectiveWorkMin = WorkMin;

                                                        //Update For Posta On 17-04-2015
                                                        if (strForWorkHour == "True")
                                                        {
                                                            WorkMin = int.Parse(getWorkMinute(WorkMin.ToString(), AssignMin.ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                                        }
                                                        else
                                                        {
                                                            EffectiveWorkMin = WorkMin;
                                                        }


                                                        OverTimeMin = GetOverTimeMinWithOutShift(empidlist.Split(',')[i].ToString(), EffectiveWorkMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter);
                                                        if (WeekOff == FromDate.DayOfWeek.ToString())
                                                        {
                                                            WorkMin = EffectiveWorkMin;
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), WorkMin.ToString(), "0", "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }
                                                        else if (IsHoliday)
                                                        {
                                                            WorkMin = EffectiveWorkMin;
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);

                                                        }
                                                        else
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), PartialMin.ToString(), PartialViolationMin.ToString(), WorkMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }
                                                    }
                                                    // InOut Method In Default Shift
                                                    // Modify By Priya Jain(05.04.2014)
                                                    else
                                                    {
                                                        DateTime InTimeF = Convert.ToDateTime("1/1/1900");
                                                        DateTime OutTimeF = Convert.ToDateTime("1/1/1900");

                                                        if (Convert.ToDateTime(BeginingIn) <= Convert.ToDateTime(EndingOut))
                                                        {//same day log
                                                            TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'   and  Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                            OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                            OffTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OffTime.Hour, OffTime.Minute, OffTime.Second);

                                                        }
                                                        else
                                                        {//next day and same day log

                                                            TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();


                                                            TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                            OnTime = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, OnTime.Hour, OnTime.Minute, OnTime.Second);
                                                            OffTime = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, OffTime.Hour, OffTime.Minute, OffTime.Second);

                                                        }

                                                        //   ViewState["DtNextPartailInOut"] = TempInOut;

                                                        DtNextPartailInOut = TempInOut;
                                                        if (TempInOut.Rows.Count > 0)
                                                        {
                                                            if (WithKeyPref == "Yes")
                                                            {
                                                                DataTable DtIn = new DataView(TempInOut, "Func_Code='" + InKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                DataTable DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                InTimeF = Convert.ToDateTime(DtIn.Rows[0]["Event_Time"].ToString());
                                                                strCheckIn_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();
                                                                OutTimeF = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                                strCheckOut_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();
                                                                if (DtIn.Rows.Count == 0)
                                                                {
                                                                    InException = "In";
                                                                }

                                                                if (DtOut.Rows.Count == 0)
                                                                {
                                                                    OutException = "Out";

                                                                }
                                                            }
                                                            else
                                                            {
                                                                InTimeF = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());
                                                                strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                                OutTimeF = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());

                                                                strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();

                                                                if (TempInOut.Rows.Count == 1)
                                                                {
                                                                    OutException = "Out";
                                                                }
                                                            }
                                                        }
                                                        //Modify By Priya Jain(05.04.2014)
                                                        try
                                                        {
                                                            InTimeF = Convert.ToDateTime(InTime);
                                                        }
                                                        catch
                                                        {
                                                            InTimeF = Convert.ToDateTime("1/1/1900");
                                                        }
                                                        if (InTimeF > OnTime)
                                                        {
                                                            //condition add on date 18 Jan 2014 kunal
                                                            if (InTimeF.Hour == OnTime.Hour && InTimeF.Minute == OnTime.Minute)
                                                            {
                                                                //Do Nothing 
                                                            }
                                                            else
                                                            {
                                                                LateMin = objAttendance.GetTimeDifference(Convert.ToDateTime(OnTime), InTimeF);
                                                                IsLate = true;
                                                                strValue = GetLateRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, LateMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Late_Min"].ToString()));
                                                                LateRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                                LatePenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                            }
                                                        }
                                                        if (OutTimeF < OffTime && OutTimeF <= EOut)
                                                        {
                                                            if (InTimeF == OutTimeF && InTimeF < BOut)
                                                            {
                                                                OutTimeF = Convert.ToDateTime("01/01/1900");
                                                            }
                                                            else if (InTimeF == OutTimeF && InTimeF > BOut)
                                                            {
                                                                InTimeF = Convert.ToDateTime("01/01/1900");
                                                            }
                                                            else
                                                            {
                                                            }

                                                            if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                            {
                                                                // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                OutTimeE = Convert.ToDateTime("01/01/1900");
                                                            }
                                                            else
                                                            {
                                                                OutTimeE = OutTimeF;
                                                            }

                                                            //Modified On 20-08-2015
                                                            if (OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                            {
                                                                EarlyMin = objAttendance.GetTimeDifference(InTimeF, Convert.ToDateTime(OffTime));
                                                            }
                                                            else
                                                            {
                                                                EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                            }

                                                            //EarlyMin = objAttendance.GetTimeDifference(OutTimeE, Convert.ToDateTime(OffTime));
                                                            IsEarlyOut = true;
                                                            strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, Convert.ToInt32(DtDefaultTime.Rows[t]["Early_Min"].ToString()));
                                                            EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                            EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);

                                                        }
                                                        // Modified By Priya Jain on 02-04-2014
                                                        else
                                                        {

                                                            if (OutTimeF > BOut && OutTimeF <= EOut)
                                                            {
                                                                if (InTimeF == OutTimeF && OutTimeF < BOut)
                                                                {
                                                                    OutTimeF = Convert.ToDateTime("01/01/1900");
                                                                }
                                                                else if (InTimeF == OutTimeF && OutTimeF > BOut)
                                                                {
                                                                    InTimeF = Convert.ToDateTime("01/01/1900");
                                                                }
                                                                else
                                                                {

                                                                }

                                                                if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                                                {
                                                                    // OutTimeE = Convert.ToDateTime(InTimeF);
                                                                    OutTimeE = Convert.ToDateTime("01/01/1900");
                                                                }
                                                                else
                                                                {
                                                                    OutTimeE = OutTimeF;
                                                                }
                                                            }
                                                        }
                                                        //Modify By Priya jain(05.04.2014)
                                                        //IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                        //IsHoliday = objEmpHoliday.GetEmployeeHolidayOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                        if (IsWeekOff == false && IsHoliday == false && IsLeave == false)
                                                        {
                                                            if (NoClockIn == true || NoClockOut == true)
                                                            {
                                                                if ((Convert.ToDateTime(InTimeF) < Convert.ToDateTime(BOut)) && OutTimeE == Convert.ToDateTime("1/1/1900"))
                                                                {
                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    continue;
                                                                }
                                                                if ((Convert.ToDateTime(OutTimeE) > Convert.ToDateTime(BOut)) && InTimeF == Convert.ToDateTime("1/1/1900"))
                                                                {
                                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                        LateMin = 0;
                                                        EarlyMin = 0;
                                                        if (LatePenaltyMin > 0)
                                                        {
                                                            LateMin = LatePenaltyMin;
                                                            LatePenaltyMin = 0;
                                                        }

                                                        if (EarlyPenaltyMin > 0)
                                                        {
                                                            EarlyMin = EarlyPenaltyMin;
                                                            EarlyPenaltyMin = 0;
                                                        }
                                                        int PartialViolationMin = 0;
                                                        int PartialMin = 0;
                                                        strValue = GetPartialViolationMin(empidlist.Split(',')[i].ToString(), FromDate, dtShift.Rows[0]["TimeTable_Id"].ToString(), strCompanyId, strBrandId, strLocationId, strWorkCalcMethod, dtPartialdetail, DtNextPartailInOut, strTimeZoneId);
                                                        PartialMin = int.Parse(strValue.Split('-')[0]);
                                                        PartialViolationMin = int.Parse(strValue.Split('-')[1]);

                                                        WorkMin = objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                                        EffectiveWorkMin = WorkMin;
                                                        //Update For Posta On 17-04-2015
                                                        if (strForWorkHour == "True")
                                                        {
                                                            WorkMin = int.Parse(getWorkMinute(WorkMin.ToString(), AssignMin.ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                                        }
                                                        else
                                                        {
                                                            EffectiveWorkMin = WorkMin;
                                                        }

                                                        OverTimeMin = GetOverTimeMinWithOutShift(empidlist.Split(',')[i].ToString(), EffectiveWorkMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter);
                                                        if (WeekOff == FromDate.DayOfWeek.ToString())
                                                        {
                                                            WorkMin = EffectiveWorkMin;
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), WorkMin.ToString(), "0", "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }
                                                        else if (IsHoliday)
                                                        {
                                                            //Update On 13-04-2015
                                                            if (HolidayOTEnabled == "1")
                                                            {
                                                                WorkMin = EffectiveWorkMin;
                                                            }
                                                            else
                                                            {
                                                                WorkMin = 0;
                                                            }

                                                            //WorkMin = EffectiveWorkMin;
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }
                                                        else
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), PartialMin.ToString(), PartialViolationMin.ToString(), WorkMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                IsWeekOff = false;
                                                foreach (string str in WeekOff.Split(','))
                                                {
                                                    if (str == FromDate.DayOfWeek.ToString())
                                                    {
                                                        IsWeekOff = true;
                                                    }
                                                }

                                                if (IsWeekOff == true)
                                                {
                                                    //Add Condition On 02-6-2016 by Lokesh
                                                    if (FromDate >= dtDOJ)
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                    else
                                                    {
                                                        //for Absent
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                }
                                                else if (IsHoliday)
                                                {
                                                    //Add Condition On 02-6-2016 by Lokesh
                                                    if (FromDate >= dtDOJ)
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                    else
                                                    {
                                                        //for Absent
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                }

                                                else if (IsLeave)
                                                {
                                                    bool IsPaid = false;

                                                    IsPaid = ObjLeaveReq.IsPaidLeave(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                                    if (IsPaid)
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                    else
                                                    {
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                }
                                                else
                                                {
                                                    //Add On 02-06-2016 By Lokesh
                                                    if (FromDate >= dtDOJ)
                                                    {

                                                        DateTime dtTodayDate = DateTime.Now;

                                                        if (FromDate > dtTodayDate)
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", "0", "", "", "NoDay", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }
                                                        else
                                                        {
                                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //for Absent
                                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), DtDefaultTime.Rows[t]["Shift_Id"].ToString(), false.ToString(), DtDefaultTime.Rows[t]["TimeTable_Id"].ToString(), DtDefaultTime.Rows[t]["OnDuty_Time"].ToString(), DtDefaultTime.Rows[t]["OffDuty_Time"].ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    }
                                                }
                                            }
                                            //
                                        }
                                    }
                                    else
                                    {
                                        // Check Exclude day off absent /week off
                                        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                    }
                                }
                                else
                                {
                                    ////Add On 02-06-2016 By Lokesh
                                    //if (FromDate >= dtDOJ)
                                    //{
                                    //    //objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString()), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());

                                    //    //code commented by jitendra on 23-05-2017

                                    //    //new code created

                                    //    //code start
                                    //    if (IsLeave && LeaveCountOnWeekOff.Trim() == "True")
                                    //    {

                                    //        bool IsPaid = false;

                                    //        IsPaid = ObjLeaveReq.IsPaidLeave(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                    //        if (IsPaid)
                                    //        {
                                    //            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime,HalfDaycount.ToString());
                                    //        }
                                    //        else
                                    //        {

                                    //            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime,HalfDaycount.ToString());
                                    //        }

                                    //    }
                                    //    else
                                    //    {
                                    //        objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime,HalfDaycount.ToString());

                                    //    }

                                    //    ///code start
                                    //}
                                    //else
                                    //{
                                    //    //for Absent
                                    //    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime,HalfDaycount.ToString());
                                    //}

                                    //new code added on 27-04-2018 because overtime was not coming on week off 

                                    //commneted above line 

                                    //Here Code Off WeekOff

                                    DateTime InTimeF = Convert.ToDateTime("1/1/1900");
                                    DateTime OutTimeF = Convert.ToDateTime("1/1/1900");

                                    try
                                    {

                                        if (Convert.ToDateTime(BeginingIn) > Convert.ToDateTime(EndingOut))
                                        {
                                            BIn = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, BIn.Hour, BIn.Minute, BIn.Second);
                                            EOut = new DateTime(FromDate.AddDays(1).Year, FromDate.AddDays(1).Month, FromDate.AddDays(1).Day, EOut.Hour, EOut.Minute, EOut.Second);

                                            TempInOut = new DataView(dtLog, "Event_Time>='" + BIn + "'  and Event_Time<='" + EOut + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "' ", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                    }
                                    catch
                                    {
                                        TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "' ", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }


                                    if (TempInOut.Rows.Count > 0)
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            //Add On 27-03-2015
                                            if (Convert.ToBoolean(TempFKey))
                                            {
                                                InTimeF = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());
                                                strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                OutTimeF = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());
                                                strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                                if (TempInOut.Rows.Count == 1)
                                                {
                                                    OutException = "Out";
                                                    OutTimeF = Convert.ToDateTime("1/1/1900");
                                                }
                                            }
                                            else
                                            {
                                                DataTable DtIn = new DataView(TempInOut, "Func_Code='" + InKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                DataTable DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                try
                                                {
                                                    InTimeF = Convert.ToDateTime(DtIn.Rows[0]["Event_Time"].ToString());

                                                    strCheckIn_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();
                                                }
                                                catch
                                                {

                                                }
                                                try
                                                {
                                                    OutTimeF = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                    strCheckOut_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();
                                                }
                                                catch
                                                {

                                                }
                                                //here Code modified on date 18 March 2014 Kunal

                                                if (DtIn.Rows.Count == 0)
                                                {
                                                    InException = "In";
                                                }

                                                if (DtOut.Rows.Count == 0)
                                                {
                                                    OutException = "Out";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            InTimeF = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());
                                            strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                            OutTimeF = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());
                                            strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                            if (TempInOut.Rows.Count == 1)
                                            {
                                                OutException = "Out";
                                                OutTimeF = Convert.ToDateTime("1/1/1900");
                                            }
                                        }
                                    }



                                    // Modified On 10/01/2014 by nitin jain
                                    if ((InTimeF == Convert.ToDateTime("1/1/1900")) || (OutTimeF == Convert.ToDateTime("1/1/1900")))
                                    {
                                        OverTimeMin = 0;
                                    }
                                    else
                                    {
                                        OverTimeMin = objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                    }
                                    //......................................

                                    //Add On 10-08-2015


                                    //this condition added by jitendra upadhyay on 18-02-2017
                                    //condition for enable efffect of leave count on week off parameter 
                                    //in future if error will come due to this first if condition please remove it
                                    //because before now it was not here 
                                    //code start
                                    if (IsLeave && LeaveCountOnWeekOff.Trim() == "True")
                                    {

                                        bool IsPaid = false;

                                        IsPaid = ObjLeaveReq.IsPaidLeave(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                        if (IsPaid)
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", "False", "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                        else
                                        {
                                            //Modified By Priya Jain(01.03.2014)
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", "False", "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }

                                    }

                                    //code end
                                    else if (HolidayOnWeekOff == true)
                                    {

                                        if (IsHoliday)
                                        {

                                            if (HolidayOTEnabled == "1")
                                            {
                                                if (OverTimeMin == 0)
                                                {
                                                    AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                                    OverTimeMin = 0;
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", OverTimeMin.ToString(), "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }
                                                else
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", OverTimeMin.ToString(), "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }

                                                //Update On 27-03-2015
                                                //// WorkMin = EffectiveWorkMin;
                                                //if (MaxOt < WorkMin)
                                                //{
                                                //    WorkMin = MaxOt;
                                                //}
                                                //// objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", AssignMin.ToString(), AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                            }
                                            else
                                            {
                                                AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                                //Update On 26-03-2015
                                                //if (OverTimeMin > AssignMin)
                                                //{
                                                //    OverTimeMin = AssignMin;
                                                //}
                                                OverTimeMin = 0;
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", OverTimeMin.ToString(), "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                ////objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), dtSchedule.Rows[t]["Shift_Id"].ToString(), dtSchedule.Rows[t]["Is_Temp"].ToString(), dtSchedule.Rows[t]["TimeTable_Id"].ToString(), dtSchedule.Rows[t]["OnDuty_Time"].ToString(), dtSchedule.Rows[t]["OffDuty_Time"].ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                            }
                                        }
                                        else
                                        {
                                            if (WeekOffOTEnabled.ToString() == "1")
                                            {
                                                // Modified On 10/07/2014 By Nitin Jain

                                                //Update On 27-03-2015
                                                //if (Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString())) < OverTimeMin)
                                                //{
                                                //    OverTimeMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString()));
                                                //}

                                                //Update On 16-06-2015 For MEW
                                                if (OverTimeMin == 0)
                                                {
                                                    AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                                    OverTimeMin = 0;
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }
                                                else
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }
                                            }
                                            else
                                            {
                                                AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                                //Update On 26-03-2015
                                                //if (OverTimeMin > AssignMin)
                                                //{
                                                //    OverTimeMin = AssignMin;
                                                //}
                                                OverTimeMin = 0;
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (WeekOffOTEnabled.ToString() == "1")
                                        {
                                            // Modified On 10/07/2014 By Nitin Jain

                                            //Update On 27-03-2015
                                            //if (Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString())) < OverTimeMin)
                                            //{
                                            //    OverTimeMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString()));
                                            //}

                                            //Update On 16-06-2015 For MEW
                                            if (OverTimeMin == 0)
                                            {
                                                AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                                OverTimeMin = 0;
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                        }
                                        else
                                        {
                                            AssignMin = Convert.ToInt32(GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                            //Update On 26-03-2015
                                            //if (OverTimeMin > AssignMin)
                                            //{
                                            //    OverTimeMin = AssignMin;
                                            //}
                                            OverTimeMin = 0;

                                            //Add Code On 02-06-2016 By Lokesh
                                            if (FromDate >= dtDOJ)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", Convert.ToDateTime("1/1/1900").ToString(), Convert.ToDateTime("1/1/1900").ToString(), InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), OverTimeMin.ToString(), "0", "0", "0", "0", "0", AssignMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                        }
                                    }
                                    //here week off code end
                                }
                            }
                            else
                            {
                                if (ExcludeDaysInReprot == "IsOff")
                                {
                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                }
                                else
                                {
                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", GetAssignWorkMin(empidlist.Split(',')[i].ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                }
                            }
                        }
                        else
                        {
                            //Nitin Jain
                            // Without Shift Code Start Here ..........................


                            try
                            {
                                strBreak_in = new DataView(dtBreakInOut, "Event_Date='" + FromDate.ToString() + "' and Func_Code in('" + BreakInKey + "')", "Event_Time", DataViewRowState.CurrentRows).ToTable().Rows[0]["Event_Time"].ToString();
                            }
                            catch
                            {
                                strBreak_in = "1/1/1900";
                            }
                            try
                            {
                                strBreak_Out = new DataView(dtBreakInOut, "Event_Date='" + FromDate.ToString() + "' and Func_Code in('" + BreakOutKey + "')", "Event_Time desc", DataViewRowState.CurrentRows).ToTable().Rows[0]["Event_Time"].ToString();
                            }
                            catch
                            {
                                strBreak_Out = "1/1/1900";
                            }



                            IsWeekOff = false;
                            int Days_In_WorkMin = 0;
                            try
                            {
                                Days_In_WorkMin = int.Parse(objEmpParam.GetEmployeeParameterByParameterName(empidlist.Split(',')[i].ToString(), "Assign_Min"));
                            }
                            catch
                            {
                                Days_In_WorkMin = 0;
                            }
                            DateTime InTimeF = Convert.ToDateTime("1/1/1900");
                            DateTime OutTimeF = Convert.ToDateTime("1/1/1900");
                            WeekOff = objAppParam.GetApplicationParameterValueByParamName("Week Off Days", strCompanyId, strBrandId, strLocationId);
                            foreach (string str in WeekOff.Split(','))
                            {
                                if (str == FromDate.DayOfWeek.ToString())
                                {
                                    IsWeekOff = true;
                                }
                            }
                            if (WithKeyPref == "Yes")
                            {
                                if (ShiftRange == "2")
                                {
                                    TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                }
                                else
                                {
                                    TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                }
                            }
                            {
                                //InTime
                                if (ShiftRange == "1")
                                {
                                    if (WithKeyPref == "Yes")
                                    {
                                        TempIn = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "' and Func_Code='" + InKey + "' ", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    else
                                    {
                                        TempIn = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                }
                                else
                                {
                                    if (WithKeyPref == "Yes")
                                    {
                                        //Update On 26-03-2015
                                        TempIn = new DataView(dtLog, "Func_Code='" + InKey + "' and Event_Date>='" + FromDate.ToString() + "' and Event_Date<='" + FromDate.ToString() + "' and  Event_Date<'" + ToDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        //TempIn = new DataView(dtLog, "Func_Code='" + InKey + "' and Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'  and Event_Date<'" + ToDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    else
                                    {
                                        TempIn = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }

                                }

                                if (TempIn.Rows.Count > 0)
                                {
                                    InTime = TempIn.Rows[0]["Event_Time"].ToString();


                                    strCheckIn_by_deviceId = TempIn.Rows[0]["Device_Id"].ToString();
                                }
                                else
                                {
                                    InTime = "1/1/1900";
                                }


                                // Out Time


                                if (ShiftRange == "1")
                                {
                                    if (WithKeyPref == "Yes")
                                    {
                                        TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    else
                                    {
                                        TempOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                }
                                else
                                {
                                    if (WithKeyPref == "Yes")
                                    {
                                        // TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.ToString() + "' and Event_Date<'" + ToDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                        //Update On 18-04-2015
                                        if (TempOut.Rows.Count > 0)
                                        {
                                            if (InTime != "1/1/1900" && InTime != "")
                                            {
                                                TempOut = new DataView(TempOut, "Event_Time>='" + DateTime.Parse(InTime).ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();

                                                if (TempOut.Rows.Count > 0)
                                                {
                                                    //if (DateTime.Parse(InTime) > DateTime.Parse(TempOut.Rows[0]["Event_Time"].ToString()))
                                                    //{

                                                    //}
                                                }
                                                else
                                                {
                                                    //condition updated on 17/10/2017
                                                    //in it was checking that log should be less then with to date of that selected month
                                                    //so last day log was not coming 
                                                    DataTable dtall = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(1).ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    // DataTable dtall = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(1).ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "' and Event_Date<='" + ToDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    if (dtall.Rows.Count > 0)
                                                    {
                                                        string strPreInLog = dtall.Rows[0]["Func_Code"].ToString();
                                                        if (strPreInLog != "" && strPreInLog == InKey)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            if (InTime != "1/1/1900")
                                                            {
                                                                //condition updated on 17/10/2017
                                                                //in it was checking that log should be less then with to date of that selected month
                                                                //so last day log was not coming 
                                                                // TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "' and Event_Date<'" + ToDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //condition updated on 17/10/2017
                                            //in it was checking that log should be less then with to date of that selected month
                                            //so last day log was not coming 

                                            //DataTable dtall = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(1).ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "' and Event_Date<'" + ToDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                            DataTable dtall = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(1).ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            if (dtall.Rows.Count > 0)
                                            {
                                                string strPreInLog = dtall.Rows[0]["Func_Code"].ToString();
                                                if (strPreInLog != "" && strPreInLog == InKey)
                                                {

                                                }
                                                else
                                                {



                                                    //condition updated on 17/10/2017
                                                    //in it was checking that log should be less then with to date of that selected month
                                                    //so last day log was not coming 

                                                    //if (InTime != "1/1/1900")
                                                    //{
                                                    //condition updated on 17/10/2017
                                                    //in it was checking that log should be less then with to date of that selected month
                                                    //so last day log was not coming 



                                                    //TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "' and Event_Date<'" + ToDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                    TempOut = new DataView(dtLog, "Func_Code='" + OutKey + "' and Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                    //}
                                                }
                                            }
                                        }
                                    }
                                }
                                //Add On 25-03-2015
                                //updated on 17/10/2017

                                if (TempOut.Rows.Count > 0)
                                {
                                    //    if (TempOut.Rows.Count > 0 && InTime != "1/1/1900")
                                    //{
                                    //commented by jitendra upadhyay on 13-10-2017 
                                    //without shift case out time was not showing in case of multiple log
                                    //if (TempOut.Rows.Count > 2)
                                    //{
                                    //    OutTime = TempOut.Rows[0]["Event_Time"].ToString();
                                    //}
                                    //else
                                    //{
                                    //Update On 16-09-2015
                                    OutTime = TempOut.Rows[TempOut.Rows.Count - 1]["Event_Time"].ToString();

                                    strCheckOut_by_deviceId = TempOut.Rows[TempOut.Rows.Count - 1]["Device_Id"].ToString();


                                    if (InTime != "1/1/1900")
                                    {
                                        if (Convert.ToDateTime(InTime) > Convert.ToDateTime(OutTime))
                                        {
                                            InTime = "1/1/1900";
                                        }
                                        else
                                        {
                                            OutTime = TempOut.Rows[TempOut.Rows.Count - 1]["Event_Time"].ToString();
                                            strCheckOut_by_deviceId = TempOut.Rows[TempOut.Rows.Count - 1]["Device_Id"].ToString();

                                        }
                                    }


                                    // On 16-09-2015
                                    //if (TempOut.Rows.Count == 2)
                                    //{
                                    //    OutTime = TempOut.Rows[TempOut.Rows.Count - 2]["Event_Time"].ToString();

                                    //    if (Convert.ToDateTime(InTime) < Convert.ToDateTime(OutTime))
                                    //    {

                                    //    }
                                    //    else
                                    //    {
                                    //        OutTime = "";
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    OutTime = "";
                                    //}
                                    //}

                                    if (OutTime == "")
                                    {
                                        OutTime = TempOut.Rows[TempOut.Rows.Count - 1]["Event_Time"].ToString();
                                        strCheckOut_by_deviceId = TempOut.Rows[TempOut.Rows.Count - 1]["Device_Id"].ToString();

                                        if (Convert.ToDateTime(InTime) > Convert.ToDateTime(OutTime))
                                        {
                                            InTime = "1/1/1900";
                                        }
                                        else
                                        {
                                            OutTime = TempOut.Rows[TempOut.Rows.Count - 1]["Event_Time"].ToString();
                                            strCheckOut_by_deviceId = TempOut.Rows[TempOut.Rows.Count - 1]["Device_Id"].ToString();

                                        }
                                    }
                                }
                                else
                                {

                                    OutTime = "1/1/1900";
                                    //OutTime = InTime;
                                }



                                if (InTime == "1/1/1900" || OutTime == "1/1/1900")
                                {
                                    TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();


                                    if (TempInOut.Rows.Count > 0)
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            DataTable DtIn = new DataView(TempInOut, "Func_Code='" + InKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            DataTable DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();


                                            //row check condition added on 17/10/2017 for in and out report

                                            if (DtIn.Rows.Count > 0)
                                            {
                                                InTime = DtIn.Rows[0]["Event_Time"].ToString();

                                                strCheckIn_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();
                                            }
                                            else
                                            {
                                                InTime = Convert.ToDateTime("1/1/1900").ToString();
                                            }



                                            if (DtOut.Rows.Count > 0)
                                            {
                                                OutTime = DtOut.Rows[0]["Event_Time"].ToString();

                                                strCheckOut_by_deviceId = DtOut.Rows[0]["Device_Id"].ToString();

                                            }
                                            else
                                            {
                                                OutTime = Convert.ToDateTime("1/1/1900").ToString();
                                            }


                                            //try
                                            //{


                                            //    //code updated on 17/10/2017 
                                            //    //code start
                                            //    OutTime = DtOut.Rows[0]["Event_Time"].ToString();
                                            //    //code end 
                                            //}
                                            //catch
                                            //{
                                            //    //try
                                            //    //{
                                            //    //    InTime = DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString();
                                            //    //}
                                            //    //catch
                                            //    //{
                                            //    InTime = Convert.ToDateTime("1/1/1900").ToString();
                                            //    OutTime = "1/1/1900";
                                            //    //}
                                            //}
                                            ////try
                                            ////{
                                            ////    OutTime = DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString();
                                            ////}
                                            ////catch
                                            ////{
                                            ////    OutTime = "1/1/1900";
                                            ////}
                                        }
                                        else
                                        {
                                            InTime = TempInOut.Rows[0]["Event_Time"].ToString();
                                            OutTime = TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString();
                                            strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();

                                        }
                                    }
                                }

                                if (InTime == "1/1/1900" && OutTime != "1/1/1900")
                                {
                                    if (NoClockIn || IsNoClockInLate)
                                    {
                                        if (IsHoliday)
                                        {
                                            if (FromDate >= dtDOJ)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            FromDate = FromDate.AddDays(1);
                                            continue;
                                        }
                                        else
                                        {
                                            if (NoClockIn)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                            else
                                            {
                                                LateMin = NoCLockInLateMin;
                                                IsLate = true;

                                                strValue = GetLateRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, LateMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, 0);
                                                LateRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                LatePenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", OutTime.ToString(), true.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (IsHoliday)
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            FromDate = FromDate.AddDays(1);
                                            continue;
                                        }
                                        else
                                        {
                                            if (IsWeekOff == true)
                                            {
                                                if (FromDate >= dtDOJ)
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }
                                                else
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", OutTime.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }

                                        }
                                    }
                                }

                                if (InTime != "1/1/1900" && OutTime == "1/1/1900")
                                {
                                    if (NoClockOut || IsNoClockOutEarly)
                                    {
                                        if (IsHoliday)
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            FromDate = FromDate.AddDays(1);
                                            continue;
                                        }
                                        else
                                        {
                                            if (NoClockOut)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTime.ToString(), "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                            else
                                            {
                                                EarlyMin = NoClockOutEarlyMin;
                                                IsEarlyOut = true;
                                                strValue = GetEarlyRelaxMinPenaltyMin(empidlist.Split(',')[i].ToString(), FromDate, EarlyMin, strCompanyId, strBrandId, strLocationId, dtCompanyParameter, 0);
                                                EarlyRelaxMin = int.Parse(strValue.Split('-')[0]);
                                                EarlyPenaltyMin = int.Parse(strValue.Split('-')[1]);
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTime.ToString(), "1/1/1900", false.ToString(), "0", "0", "0", true.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (IsHoliday)
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            FromDate = FromDate.AddDays(1);
                                            continue;
                                        }
                                        else
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTime.ToString(), "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            FromDate = FromDate.AddDays(1);
                                            continue;
                                        }
                                    }
                                }
                                if (InTime == "1/1/1900" && OutTime == "1/1/1900")
                                {
                                    if (IsHoliday)
                                    {
                                        //Add Code On 02-06-2016 By Lokesh
                                        if (FromDate >= dtDOJ)
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }
                                        else
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                        }

                                        FromDate = FromDate.AddDays(1);
                                        continue;
                                    }

                                    else if (IsLeave)
                                    {
                                        bool IsPaid = false;

                                        IsPaid = ObjLeaveReq.IsPaidLeave(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                        if (IsPaid)
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            FromDate = FromDate.AddDays(1);
                                            continue;
                                        }
                                        else
                                        {
                                            if (IsWeekOff == true && LeaveCountOnWeekOff.ToString() == "False")
                                            {
                                                if (FromDate >= dtDOJ)
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), WorkMin.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }
                                                else
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), WorkMin.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                }
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (IsWeekOff == true)
                                        {
                                            //Add Code On 02-06-2016 By Lokesh
                                            if (FromDate >= dtDOJ)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }

                                            FromDate = FromDate.AddDays(1);
                                            continue;
                                        }
                                        else
                                        {
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", "1/1/1900", false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            FromDate = FromDate.AddDays(1);
                                            continue;
                                        }
                                    }
                                }
                                else
                                {
                                    //Effective Work calculation
                                    TempIn = new DataTable();
                                    TempOut = new DataTable();
                                    TempInOut = new DataTable();
                                    if (WorkCalMethod == "PairWise")
                                    {
                                        //same day log
                                        if (ShiftRange == "1")
                                        {
                                            TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'   and  Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(-1).ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }

                                        TempInOut = new DataView(TempInOut, "Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                        dtPartialdetail = TempInOut;
                                        //ViewState["DtPratial"] = TempInOut;
                                        InTime = Convert.ToDateTime("1/1/1900").ToString();
                                        for (int l = 0; l < TempInOut.Rows.Count; l++)
                                        {

                                            if (TempInOut.Rows.Count == l)
                                            {
                                                // Modified By Nitin Jain , Modified Date 04/08/2014
                                                InTimeF = Convert.ToDateTime(TempInOut.Rows[l]["Event_Time"].ToString());
                                                strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                OutTimeF = Convert.ToDateTime("1/1/1900");
                                                OutException = "Out";
                                            }
                                            else if (TempInOut.Rows.Count > 1 && l == 0)
                                            {
                                                InTime = TempInOut.Rows[l]["Event_Time"].ToString();


                                                strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();

                                                InTimeF = Convert.ToDateTime(TempInOut.Rows[l]["Event_Time"].ToString());

                                                strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                try
                                                {
                                                    OutTimeF = Convert.ToDateTime(TempInOut.Rows[l + 1]["Event_Time"].ToString());

                                                    strCheckOut_by_deviceId = TempInOut.Rows[l + 1]["Device_Id"].ToString();
                                                }
                                                catch
                                                {
                                                    OutException = "Out";
                                                }
                                                WorkMin += objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                            }
                                            else if (l % 2 == 0)
                                            {
                                                try
                                                {
                                                    InTimeF = Convert.ToDateTime(TempInOut.Rows[l]["Event_Time"].ToString());
                                                    strCheckIn_by_deviceId = TempInOut.Rows[l]["Device_Id"].ToString();
                                                    OutTimeF = Convert.ToDateTime(TempInOut.Rows[l + 1]["Event_Time"].ToString());
                                                    strCheckOut_by_deviceId = TempInOut.Rows[l + 1]["Device_Id"].ToString();
                                                    WorkMin += objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                                }
                                                catch
                                                {
                                                    OutException = "Out";
                                                    OutTimeF = Convert.ToDateTime("1/1/1900");
                                                }
                                            }
                                        }
                                        WorkMin += BreakRelaxMin;

                                        // Modification By Nitin JAIN
                                        //IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                        // IsHoliday = objEmpHoliday.GetEmployeeHolidayOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                        if (IsWeekOff == false && IsHoliday == false && IsLeave == false)
                                        {
                                            if (NoClockIn == true || NoClockOut == true)
                                            {
                                                if ((InTimeF == Convert.ToDateTime("1/1/1900")) || (OutTimeF == Convert.ToDateTime("1/1/1900")))
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    FromDate = FromDate.AddDays(1);
                                                    continue;
                                                }
                                            }

                                        }

                                        if (OutTimeF < OffTime)
                                        {
                                            //condition add on date 18 Jan 2014 kunal
                                            if (OutTimeF.Hour == OffTime.Hour && OutTimeF.Minute == OffTime.Minute)
                                            {
                                                //Do Nothing 
                                            }
                                            else
                                            {

                                            }

                                        }
                                        EffectiveWorkMin = WorkMin;

                                        WorkMin = EffectiveWorkMin;

                                        OverTimeMin = objAttendance.GetOverTimeMin(empidlist.Split(',')[i].ToString(), InTimeF, OutTimeF, Convert.ToDateTime(OnTime), Convert.ToDateTime(OffTime), EffectiveWorkMin, strCompanyId, strBrandId, strLocationId, "0");

                                        if (Days_In_WorkMin < WorkMin)
                                        {
                                            WorkMin = Days_In_WorkMin;
                                        }
                                        if (IsHoliday)
                                        {

                                            WorkMin = EffectiveWorkMin;
                                            if (FromDate >= dtDOJ)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", WorkMin.ToString(), "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            FromDate = FromDate.AddDays(1);
                                            continue;
                                        }
                                        else if (IsWeekOff == true)
                                        {
                                            if (FromDate >= dtDOJ)
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), WorkMin.ToString(), "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), WorkMin.ToString(), "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            }

                                            FromDate = FromDate.AddDays(1);
                                            continue;
                                        }
                                        else
                                        {

                                            if (InTimeF == OutTimeF && NoClockIn == false && NoClockOut == false)
                                            {
                                                //modified by jitendra on 26-04-2018 for show late and early when any one(in and out) log not exists but employee showing present for sultan center 
                                                //commentd old line and added  new

                                                //objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id);
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", "1/1/1900", OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), "0", "0", WorkMin.ToString(), Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }


                                        }
                                    }
                                    else
                                    {
                                        //Calculation of inout method

                                        //same day log
                                        if (ShiftRange == "1")
                                        {
                                            TempInOut = new DataView(dtLog, "Event_Date='" + FromDate.ToString() + "'   and  Event_Time>='" + InTime + "' and Event_Time <='" + OutTime + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            //code updated on 17/10/2017
                                            ///for two days shift range it was checking log for same day
                                            //line commented and added new

                                            TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                            // TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();


                                        }
                                        //   ViewState["DtNextPartailInOut"] = TempInOut;
                                        DtNextPartailInOut = TempInOut;
                                        if (TempInOut.Rows.Count > 0)
                                        {
                                            if (WithKeyPref == "Yes")
                                            {
                                                DataTable DtIn = new DataView(TempInOut, "Func_Code='" + InKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                DataTable DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();

                                                //For DtOut On 18-04-2015
                                                //Update On 18-04-2015
                                                if (DtOut.Rows.Count > 0)
                                                {
                                                    if (DtIn.Rows.Count > 0)
                                                    {
                                                        DtOut = new DataView(DtOut, "Event_Time>='" + DateTime.Parse(DtIn.Rows[0]["Event_Time"].ToString()) + "'", "", DataViewRowState.CurrentRows).ToTable();

                                                        if (DtOut.Rows.Count > 0)
                                                        {
                                                        }
                                                        else
                                                        {
                                                            //line updated on 17/10/2017
                                                            //it was filtering inccorrect log
                                                            DataTable dtall = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(1).ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                            // DataTable dtall = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(1).ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "' and Event_Date<'" + ToDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                            if (dtall.Rows.Count > 0)
                                                            {
                                                                string strPreInLog = dtall.Rows[0]["Func_Code"].ToString();
                                                                if (strPreInLog != "" && strPreInLog == InKey)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    if (DtIn.Rows.Count > 0)
                                                                    {
                                                                        TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                        DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    DataTable dtall = new DataView(dtLog, "Event_Date>='" + FromDate.AddDays(1).ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "' and Event_Date<'" + ToDate.ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                    if (dtall.Rows.Count > 0)
                                                    {
                                                        string strPreInLog = dtall.Rows[0]["Func_Code"].ToString();
                                                        if (strPreInLog != "" && strPreInLog == InKey)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            if (DtIn.Rows.Count > 0)
                                                            {
                                                                TempInOut = new DataView(dtLog, "Event_Date>='" + FromDate.ToString() + "'  and Event_Date<='" + FromDate.AddDays(1).ToString() + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                                DtOut = new DataView(TempInOut, "Func_Code='" + OutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                            }
                                                        }
                                                    }
                                                }


                                                // Modified By Nitin Jain On 28/08/2014 For Break In Out .......
                                                DataTable DtBreakIn = new DataView(TempInOut, "Func_Code='" + BreakInKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                DataTable DtBreakOut = new DataView(TempInOut, "Func_Code='" + BreakOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                                // .............................................................
                                                try
                                                {
                                                    InTimeF = Convert.ToDateTime(DtIn.Rows[0]["Event_Time"].ToString());
                                                    strCheckIn_by_deviceId = DtIn.Rows[0]["Device_Id"].ToString();
                                                }
                                                catch
                                                {
                                                    //On 25-03-2015


                                                    //if (DtOut.Rows.Count > 0)
                                                    //{
                                                    //    InTimeF = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                    //}
                                                    //else
                                                    //{
                                                    InTimeF = Convert.ToDateTime("01/01/1900");
                                                    //}
                                                }
                                                try
                                                {
                                                    //Add On 25-03-2015
                                                    if (DtOut.Rows.Count > 2)
                                                    {
                                                        //code updated on 17/10/2017
                                                        //line commented and add new one
                                                        //OutTimeF = Convert.ToDateTime(DtOut.Rows[1]["Event_Time"].ToString());

                                                        //updated on //18/10/2017
                                                        if (ShiftRange == "1")
                                                        {
                                                            OutTimeF = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                            strCheckOut_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();
                                                        }
                                                        else
                                                        {
                                                            OutTimeF = Convert.ToDateTime(DtOut.Rows[0]["Event_Time"].ToString());
                                                            strCheckOut_by_deviceId = DtOut.Rows[0]["Device_Id"].ToString();
                                                        }
                                                        //OutTimeF = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                    }
                                                    else
                                                    {
                                                        if (DtOut.Rows.Count == 2)
                                                        {
                                                            //On 16-09-2015
                                                            //updated on //18/10/2017
                                                            if (ShiftRange == "1")
                                                            {
                                                                OutTimeF = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                                strCheckOut_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();
                                                            }
                                                            else
                                                            {
                                                                OutTimeF = Convert.ToDateTime(DtOut.Rows[0]["Event_Time"].ToString());
                                                                strCheckOut_by_deviceId = DtOut.Rows[0]["Device_Id"].ToString();
                                                            }
                                                            //OutTimeF = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());

                                                            if (Convert.ToDateTime(InTimeF) < Convert.ToDateTime(OutTimeF))
                                                            {

                                                            }
                                                            else
                                                            {
                                                                OutTimeF = Convert.ToDateTime("01/01/1900");
                                                            }
                                                        }
                                                        //condiion added on 17/10/2017
                                                        //in case of one log it was set as no log 
                                                        //so checked that if row count ==1 then set outimef
                                                        //else if (DtOut.Rows.Count == 1)
                                                        //{
                                                        //    if (Convert.ToDateTime(InTimeF) < Convert.ToDateTime(OutTimeF))
                                                        //    {
                                                        //        OutTimeF = Convert.ToDateTime(DtOut.Rows[0]["Event_Time"].ToString());
                                                        //    }
                                                        //    else
                                                        //    {
                                                        //        OutTimeF = Convert.ToDateTime("01/01/1900");
                                                        //    }
                                                        //}
                                                        else
                                                        {
                                                            OutTimeF = Convert.ToDateTime("01/01/1900");
                                                        }
                                                    }

                                                    //line commented on 17/10/2017

                                                    if (OutTimeF == Convert.ToDateTime("01/01/1900") && InTimeF.ToString("dd/MM/yyyy") != "01/01/1900")
                                                    {
                                                        OutTimeF = Convert.ToDateTime(DtOut.Rows[DtOut.Rows.Count - 1]["Event_Time"].ToString());
                                                        strCheckOut_by_deviceId = DtOut.Rows[DtOut.Rows.Count - 1]["Device_Id"].ToString();

                                                    }
                                                    if (Convert.ToDateTime(InTimeF) > Convert.ToDateTime(OutTimeF))
                                                    {
                                                        InTimeF = Convert.ToDateTime("01/01/1900");
                                                        InException = "In";
                                                    }
                                                    // LogFlag = Convert.ToInt32(DtOut.Rows[DtOut.Rows.Count - 1]["Trans_Id"].ToString());
                                                }
                                                catch
                                                {
                                                    // OutTimeF = InTimeF;
                                                    OutTimeF = Convert.ToDateTime("01/01/1900");
                                                }
                                                if (DtIn.Rows.Count == 0)
                                                {
                                                    InTimeF = Convert.ToDateTime("01/01/1900");
                                                    InException = "In";
                                                }

                                                if (DtOut.Rows.Count == 0)
                                                {
                                                    OutTimeF = Convert.ToDateTime("01/01/1900");
                                                    OutException = "Out";
                                                }
                                                if (InException != "In" && OutException != "Out")
                                                {
                                                    try
                                                    {
                                                        BreakInTime = DtBreakIn.Rows[0]["Event_Time"].ToString();
                                                    }
                                                    catch
                                                    {
                                                        BreakInTime = "00:00";
                                                    }
                                                    try
                                                    {
                                                        BreakOutTime = DtBreakOut.Rows[0]["Event_Time"].ToString();
                                                    }
                                                    catch
                                                    {
                                                        BreakOutTime = "00:00";
                                                    }
                                                }

                                            }
                                            else
                                            {
                                                InTimeF = Convert.ToDateTime(TempInOut.Rows[0]["Event_Time"].ToString());
                                                strCheckIn_by_deviceId = TempInOut.Rows[0]["Device_Id"].ToString();
                                                OutTimeF = Convert.ToDateTime(TempInOut.Rows[TempInOut.Rows.Count - 1]["Event_Time"].ToString());
                                                strCheckOut_by_deviceId = TempInOut.Rows[TempInOut.Rows.Count - 1]["Device_Id"].ToString();
                                                if (TempInOut.Rows.Count == 1)
                                                {
                                                    OutException = "Out";
                                                    OutTimeF = Convert.ToDateTime("1/1/1900");
                                                }
                                            }
                                        }
                                        //IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                        if (IsLeave == true)
                                        {
                                            WorkMin = objAttendance.GetTimeDifference(InTimeF, OutTimeF);
                                            WorkMin += BreakRelaxMin;
                                            objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTime.ToString(), OutTimeE.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), true.ToString(), false.ToString(), WorkMin.ToString(), "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                            FromDate = FromDate.AddDays(1);
                                            continue;
                                        }

                                        ////***

                                        if (InTimeF > Convert.ToDateTime(OnTime))
                                        {
                                            if (InTimeF.Hour == OnTime.Hour && InTimeF.Minute == OnTime.Minute)
                                            {
                                                //Do Nothing 
                                            }
                                            else
                                            {
                                            }
                                        }



                                        // Modified by Nitin Jain ON 01-Apr-2014
                                        if (OutTimeF < OffTime && OutTimeF <= EOut)
                                        {
                                            if (InTimeF == OutTimeF && InTimeF < BOut)
                                            {
                                                if (WithKeyPref == "Yes")
                                                {
                                                    OutTimeF = InTimeF;
                                                }
                                                else
                                                {
                                                    // OutTimeF = Convert.ToDateTime("01/01/1900");

                                                    OutTimeF = InTimeF;
                                                }
                                            }
                                            else if (InTimeF == OutTimeF && InTimeF > BOut)
                                            {
                                                InTimeF = Convert.ToDateTime("01/01/1900");
                                            }
                                            else
                                            {
                                            }

                                            if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                            {
                                                // OutTimeE = Convert.ToDateTime(InTimeF);
                                                OutTimeE = Convert.ToDateTime("01/01/1900");

                                            }
                                            else
                                            {
                                                OutTimeE = OutTimeF;
                                            }
                                        }
                                        // Modified By Priya Jain on 02-04-2014
                                        else
                                        {

                                            //if (OutTimeF > BOut && OutTimeF <= EOut)
                                            //{

                                            //    if (InTimeF == OutTimeF && OutTimeF < BOut)
                                            //    {
                                            //        OutTimeF = Convert.ToDateTime("01/01/1900");
                                            //    }
                                            //    else if (InTimeF == OutTimeF && OutTimeF > BOut)
                                            //    {
                                            //        InTimeF = Convert.ToDateTime("01/01/1900");
                                            //    }
                                            //    else
                                            //    {
                                            //    }

                                            //    if (OutTimeF.ToString("dd/MM/yyyy") == "01/01/1900")
                                            //    {
                                            //        // OutTimeE = Convert.ToDateTime(InTimeF);
                                            //        OutTimeE = Convert.ToDateTime("01/01/1900");
                                            //    }
                                            //    else
                                            //    {
                                            //        OutTimeE = OutTimeF;
                                            //    }
                                            //}

                                        }
                                        // Modified By Priya Jain(01.04.2014)
                                        //IsLeave = ObjLeaveReq.IsLeaveOnDate(FromDate.ToString(), empidlist.Split(',')[i].ToString());
                                        //IsHoliday = objEmpHoliday.GetEmployeeHolidayOnDateAndEmpId(FromDate.ToString(), empidlist.Split(',')[i].ToString());

                                        if (IsWeekOff == false && IsHoliday == false && IsLeave == false)
                                        {
                                            if (NoClockIn == true || NoClockOut == true)
                                            {
                                                if ((InTimeF == Convert.ToDateTime("1/1/1900")) || (OutTimeF == Convert.ToDateTime("1/1/1900")))
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), WorkMin.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    FromDate = FromDate.AddDays(1);
                                                    continue;
                                                }
                                            }
                                        }

                                        if ((InTimeF == Convert.ToDateTime("1/1/1900")) || (OutTimeF == Convert.ToDateTime("1/1/1900")))
                                        {
                                            WorkMin += BreakRelaxMin;
                                        }
                                        else
                                        {
                                            WorkMin = objAttendance.GetTimeDifference(Convert.ToDateTime(InTimeF), Convert.ToDateTime(OutTimeF));
                                            WorkMin += BreakRelaxMin;
                                        }

                                        EffectiveWorkMin = WorkMin;

                                        //Update For Posta On 17-04-2015
                                        if (strForWorkHour == "True")
                                        {
                                            WorkMin = int.Parse(getWorkMinute(WorkMin.ToString(), Days_In_WorkMin.ToString(), strCompanyId, strBrandId, strLocationId, dtCompanyParameter));
                                        }
                                        else
                                        {
                                            EffectiveWorkMin = WorkMin;
                                        }

                                        OverTimeMin = objAttendance.GetOverTimeMin(empidlist.Split(',')[i].ToString(), InTimeF, OutTimeF, Convert.ToDateTime(OnTime), Convert.ToDateTime(OnTime), EffectiveWorkMin, strCompanyId, strBrandId, strLocationId, "0");
                                        if (IsHoliday)
                                        {
                                            if (HolidayOTEnabled == "1")
                                            {
                                                WorkMin = EffectiveWorkMin;
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", WorkMin.ToString(), "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), true.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                        }
                                        else if (IsWeekOff == true)
                                        {
                                            if (WeekOffOTEnabled == "1")
                                            {
                                                WorkMin = EffectiveWorkMin;
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), WorkMin.ToString(), "0", OverTimeMin.ToString(), "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                            else
                                            {
                                                objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", true.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                FromDate = FromDate.AddDays(1);
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            if (InTimeF == Convert.ToDateTime("01/01/1900") || OutTimeF == Convert.ToDateTime("01/01/1900"))
                                            {
                                                if (InException == "In" && NoClockIn == true)
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", Convert.ToDateTime("01/01/1900").ToString(), InTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    FromDate = FromDate.AddDays(1);
                                                    continue;
                                                }
                                                else if (OutException == "Out" && NoClockIn == true)
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", Convert.ToDateTime("01/01/1900").ToString(), InTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), true.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    FromDate = FromDate.AddDays(1);
                                                    continue;
                                                }
                                                else
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), false.ToString(), "0", "0", "0", false.ToString(), "0", "0", "0", false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", "0", "0", "0", "0", Days_In_WorkMin.ToString(), InException, OutException, "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    FromDate = FromDate.AddDays(1);
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                if (InException == "" && OutException == "" && WithKeyPref == "Yes")
                                                {
                                                    //Update For Posta On 17-04-2015
                                                    if (strForWorkHour == "True")
                                                    {
                                                        if (Days_In_WorkMin < WorkMin)
                                                        {
                                                            WorkMin = Days_In_WorkMin;
                                                        }
                                                    }

                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), "0", "0", WorkMin.ToString(), Days_In_WorkMin.ToString(), InException, OutException, BreakInTime, BreakOutTime, "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    FromDate = FromDate.AddDays(1);
                                                    continue;
                                                }
                                                else
                                                {
                                                    objAttReg.InsertAttendanceRegister(strCompanyId, empidlist.Split(',')[i].ToString(), FromDate.ToString(), "0", false.ToString(), "0", "1/1/1900", "1/1/1900", InTimeF.ToString(), OutTimeF.ToString(), IsLate.ToString(), LateMin.ToString(), LateRelaxMin.ToString(), LatePenaltyMin.ToString(), IsEarlyOut.ToString(), EarlyMin.ToString(), EarlyRelaxMin.ToString(), EarlyPenaltyMin.ToString(), false.ToString(), false.ToString(), false.ToString(), false.ToString(), "0", "0", OverTimeMin.ToString(), "0", "0", WorkMin.ToString(), Days_In_WorkMin.ToString(), InException, OutException, "00:00", "00:00", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), EmployeeLevel, strCheckIn_by_deviceId, strCheckOut_by_deviceId, strBreak_in, strBreak_Out, strLeave_Type_Id, strHoliday_Id, dtCompanyParameter, strBrandId, strLocationId, OnTime, OffTime, HalfDaycount.ToString(), strLogdetail);
                                                    FromDate = FromDate.AddDays(1);
                                                    continue;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            // ..........................................................
                        }
                    }
                    FromDate = FromDate.AddDays(1);
                }



                //here we will transfer leave balance for isyear carry and is auto flag true when leave integration is disable
                if (strConfig_LeaveIntegration.Trim() == "0")
                {
                    try
                    {

                        dtLeavesummary = objEmpleave.GetEmployeeLeaveTransactionDataByEmpId(empidlist.Split(',')[i].ToString());

                        dtLeave1 = objEmpleave.GetEmployeeLeaveByEmpId(strCompanyId, empidlist.Split(',')[i].ToString());


                        if (dtLeave1.Rows.Count > 0)
                        {
                            dtLeave1 = new DataView(dtLeave1, "Is_YearCarry='True' or Field5='True'", "", DataViewRowState.CurrentRows).ToTable();

                            for (int j = 0; j < dtLeave1.Rows.Count; j++)
                            {
                                if (dtLeave1.Rows[j]["Shedule_Type"].ToString() == "Monthly")
                                {
                                    while (FinancialYearStartDate <= FinancialYearEndDate)
                                    {
                                        objEmpleave.InsertEmployeeLeaveTrans(strCompanyId, empidlist.Split(',')[i].ToString(), dtLeave1.Rows[j]["LeaveType_Id"].ToString(), FinancialYearStartDate.Year.ToString(), FinancialYearStartDate.Month.ToString(), "0", dtLeave1.Rows[j]["Total_Leave"].ToString(), dtLeave1.Rows[j]["Total_Leave"].ToString(), "0", dtLeave1.Rows[j]["Total_Leave"].ToString(), "0", "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                        FinancialYearStartDate = FinancialYearStartDate.AddMonths(1);
                                    }
                                }
                                else
                                {
                                    int Totaldays = 0;
                                    int TotalPaidDays = 0;
                                    int assignLeave = 0;
                                    int maxLeaveBalace = 0;
                                    if (dtLeave1.Rows[j]["Is_YearCarry"].ToString() == "True" || dtLeave1.Rows[j]["Field5"].ToString() == "True")
                                    {

                                        dtL = new DataView(dtLeavesummary, "Month='0' and year='" + FinancialYearStartDate.Year.ToString() + "' and Leave_Type_Id='" + dtLeave1.Rows[j]["LeaveType_Id"].ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();

                                        if (dtL.Rows.Count > 0)
                                        {
                                            continue;
                                        }

                                        dtL = new DataView(dtLeavesummary, "Month='0' and year='" + PrevFinancialDate.Year.ToString() + "' and Leave_Type_Id='" + dtLeave1.Rows[j]["LeaveType_Id"].ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();

                                        int RemainingDays = 0;


                                        if (dtLeave1.Rows[j]["Field5"].ToString() == "True")
                                        {
                                            Totaldays = int.Parse(dtLeave1.Rows[j]["Total_Leave"].ToString());
                                            TotalPaidDays = int.Parse(dtL.Rows[0]["Field1"].ToString());
                                            assignLeave = int.Parse(dtLeave1.Rows[j]["Total_Leave"].ToString());
                                        }
                                        if (dtL.Rows[0]["Is_YearCarry"].ToString() == true.ToString())
                                        {
                                            RemainingDays = int.Parse(Math.Round(Convert.ToDouble(dtL.Rows[0]["Remaining_Days"].ToString()), 0).ToString());
                                            Totaldays += RemainingDays;
                                            TotalPaidDays += int.Parse(Math.Round(Convert.ToDouble(dtL.Rows[0]["Field2"].ToString()), 0).ToString());
                                        }
                                        if (dtLeave1.Rows[i]["Field4"].ToString() == "True")
                                        {
                                            objEmpleave.InsertEmployeeLeaveTrans(strCompanyId, empidlist.Split(',')[i].ToString(), dtLeave1.Rows[j]["LeaveType_Id"].ToString(), FinancialYearStartDate.Year.ToString(), "0", RemainingDays.ToString(), assignLeave.ToString(), Totaldays.ToString(), "0", RemainingDays.ToString(), "0", TotalPaidDays.ToString(), TotalPaidDays.ToString(), "Open", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                        }
                                        else
                                        {
                                            try
                                            {
                                                maxLeaveBalace = int.Parse(objDA.return_DataTable("select Field4 from att_leavemaster where Leave_id='" + dtLeave1.Rows[j]["LeaveType_Id"].ToString() + "'").Rows[0][0].ToString());
                                            }
                                            catch
                                            {

                                            }


                                            if (maxLeaveBalace > 0)
                                            {

                                                if (Totaldays > maxLeaveBalace)
                                                {
                                                    Totaldays = maxLeaveBalace;

                                                }
                                                if (TotalPaidDays > maxLeaveBalace)
                                                {
                                                    TotalPaidDays = maxLeaveBalace;
                                                }
                                            }

                                            objEmpleave.InsertEmployeeLeaveTrans(strCompanyId, empidlist.Split(',')[i].ToString(), dtLeave1.Rows[j]["LeaveType_Id"].ToString(), FinancialYearStartDate.Year.ToString(), "0", RemainingDays.ToString(), assignLeave.ToString(), Totaldays.ToString(), "0", Totaldays.ToString(), "0", TotalPaidDays.ToString(), TotalPaidDays.ToString(), "Open", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                                        }
                                    }
                                    //else if (dtLeave1.Rows[i]["IsAuto"].ToString() == "True")
                                    //{
                                    //    //.......
                                    //    DateTime PrevFinancialDate = FinancialYearStartDate.AddYears(-1);

                                    //    DataTable dtL = objEmpleave.GetEmployeeLeaveTransactionDataByEmpId(empid);

                                    //    dtL = new DataView(dtL, "Month='0' and year='" + PrevFinancialDate.Year.ToString() + "' AND IsAuto='True'", "", DataViewRowState.CurrentRows).ToTable();

                                    //    int RemainingDays = 0;
                                    //    RemainingDays = int.Parse(dtL.Rows[0]["Remaining_Days"].ToString());
                                    //    if (dtLeave1.Rows[i]["Field5"].ToString() == true.ToString())
                                    //    {
                                    //        Totaldays = RemainingDays;
                                    //        objEmpleave.InsertEmployeeLeaveTrans(Session["CompId"].ToString(), empid, dtLeave1.Rows[i]["LeaveType_Id"].ToString(), FinancialYearStartDate.Year.ToString(), "0", "0", Totaldays.ToString(), Totaldays.ToString(), "0", Totaldays.ToString(), "0", "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), Session["UserId"].ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), Session["UserId"].ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                    //    }
                                    //    else
                                    //    {
                                    //        //  objEmpleave.InsertEmployeeLeaveTrans(Session["CompId"].ToString(), empid, dtLeave1.Rows[i]["LeaveType_Id"].ToString(), FinancialYearStartDate.Year.ToString(), "0", "0", dtLeave1.Rows[i]["Total_Leave"].ToString(), dtLeave1.Rows[i]["Total_Leave"].ToString(), "0", dtLeave1.Rows[i]["Total_Leave"].ToString(), "0", "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), true.ToString(), Session["UserId"].ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), Session["UserId"].ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                                    //    }
                                    //}
                                }
                            }
                        }
                    }
                    catch
                    {

                    }
                }




                //here we are using sanwich function for holiday and week off 

                if (holidaysandwich || weekoffsandwich)
                {
                    FromDate = new DateTime(dtbasefromdate.Year, dtbasefromdate.Month, dtbasefromdate.Day);
                    AbsentSandwich(empidlist.Split(',')[i].ToString(), FromDate, ToDate, weekoffsandwich, holidaysandwich);
                }


            }

            LogProcessstatus = true;


            strResult[0] = LogProcessstatus.ToString();
            strResult[1] = "Done";
        }
        catch (Exception ex)
        {
            //DisplayMessage(Common.ConvertErrorMessage(ex.Message.ToString(), ex));
            ExportToFile(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString() + "'" + ex.Message.ToString() + "'", "C:\\PegasusSQL\\LogProcessError.txt", FileMode.Append);
            strResult[0] = LogProcessstatus.ToString();
            strResult[1] = Common.ConvertErrorMessage(ex.Message.ToString(), ex);

        }


        int Save_Notification = 0;
        DataTable Dt_Request_Type = new DataTable();
        Dt_Request_Type = Obj_Notifiacation.Get_Notification_ID_By_Type("Notification", "", "", "5");
        string Request_URL = "";
        string Message = string.Empty;
        if (LogProcessstatus)
        {
            Message = "Log Process Completed";
        }
        else
        {
            Message = "Log Process Failed For Employee code ='" + strErrorMessage + "'(" + strResult[1] + ")";
        }

        try
        {
            Save_Notification = Obj_Notifiacation.InsertNotificationMaster_Trans(strCompanyId, strBrandId, strLocationId, strLoginEmpId, strLoginEmpId, strLoginEmpId, Message, Dt_Request_Type.Rows[0]["Trans_ID"].ToString(), Request_URL, "", "0", "False", "", "", "", "", "", strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "0", "18");
        }
        catch (Exception ex)
        { 
        
        }
        

        //Loop of employee will end
        //SystemLog.SaveSystemLog("Log Process", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strCompanyId, strUserId, "Log Process done", "", "", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
        //DisplayMessage("Log Processed");
        return strResult;
    }

    public int GetMinuteDiff(string greatertime, string lesstime)
    {
        int retval = 0;
        int actTimeHour = Convert.ToInt32(greatertime.Split(':')[0]);
        int ondutyhour = Convert.ToInt32(lesstime.Split(':')[0]);
        int actTimeMinute = Convert.ToInt32(greatertime.Split(':')[1]);
        int ondutyMinute = Convert.ToInt32(lesstime.Split(':')[1]);
        int totalActTimeMinute = actTimeHour * 60 + actTimeMinute;
        int totalOnDutyTimeMinute = ondutyhour * 60 + ondutyMinute;
        if (totalActTimeMinute - totalOnDutyTimeMinute < 0)
        {
            retval = 1440 + (totalActTimeMinute - totalOnDutyTimeMinute);
        }
        else
        {
            retval = (totalActTimeMinute - totalOnDutyTimeMinute);
        }
        return retval;
    }

    public string[] UpdateTimetable(DateTime OndutyTime1, DateTime Offdutytime1, DateTime OndutyTime2, DateTime Offdutytime2, int mIndex, int tSize, string lEndingOut)
    {
        string[] str = new string[4];
        int minute = 0;
        if (tSize == 1)
        {

            minute = GetMinuteDiff(Offdutytime1.ToString("HH:mm"), OndutyTime1.ToString("HH:mm"));

            minute = minute / 2;

            str[0] = "00:00:01";
            str[1] = OndutyTime1.AddMinutes(minute).ToString("HH:mm:ss");
            str[2] = OndutyTime1.AddMinutes(minute).AddMinutes(1).ToString("HH:mm:ss");
            str[3] = "23:59:59";
        }
        else if ((tSize - 1) == mIndex)
        {
            minute = GetMinuteDiff(Offdutytime1.ToString("HH:mm"), OndutyTime1.ToString("HH:mm"));

            minute = minute / 2;

            str[0] = Convert.ToDateTime(lEndingOut).AddMinutes(1).ToString("HH:mm:ss");
            str[1] = OndutyTime1.AddMinutes(minute).ToString("HH:mm:ss");
            str[2] = OndutyTime1.AddMinutes(minute).AddMinutes(1).ToString("HH:mm:ss");
            str[3] = "23:59:59";
        }
        else
        {
            minute = GetMinuteDiff(Offdutytime1.ToString("HH:mm"), OndutyTime1.ToString("HH:mm"));

            minute = minute / 2;


            if (mIndex != 0)
            {
                str[0] = Convert.ToDateTime(lEndingOut).AddMinutes(1).ToString("HH:mm:ss");
            }
            else
            {
                str[0] = "00:00:01";
            }


            str[1] = OndutyTime1.AddMinutes(minute).ToString("HH:mm:ss");
            str[2] = OndutyTime1.AddMinutes(minute).AddMinutes(1).ToString("HH:mm:ss");
            minute = GetMinuteDiff(OndutyTime2.ToString("HH:mm"), Offdutytime1.ToString("HH:mm"));
            minute = minute / 2;
            str[3] = Offdutytime1.AddMinutes(minute).ToString("HH:mm:ss");

        }
        return str;
    }
    public string[] autoLogPost(string strCompanyId, string strBrandId, string strLocationId, string empidlist, string strMonth, string strYear, string strUserId, ref SqlTransaction trns, string strTimeZoneId)
    {

        string[] strResult = new string[2];
        bool Result = false;

        strResult[0] = false.ToString();
        strResult[1] = "";
        bool IsLeaveSalary = false;
        bool LeaveCountOnWeekOff = false;
        bool LeaveCOuntOnHoliday = false;
        string AlreadyPostedEmpList = string.Empty;
        string NonPostedEmpList = string.Empty;
        string GroupIds = string.Empty;
        int Total_Days = 0;
        int Days_In_WorkMin = 0;
        int Worked_Days = 0;
        int Week_Off_Days = 0;
        int Holiday_Days = 0;
        int Leave_Days = 0;
        int Absent_Days = 0;
        int Assigned_Worked_Min = 0;
        bool Is_AbsentPenalty;
        double Late_Penalty_Day = 0;
        int Basic_Min_Salary_Penalty_Ot = 0;
        double Basic_Salary = 0;
        double Basic_Min_Salary = 0;
        double Normal_OT_Salary = 0;
        double Week_Off_OT_Salary = 0;
        double Holiday_OT_Salary = 0;
        double Absent_Penalty = 0;
        double Late_Penalty_Min = 0;
        double Early_Penalty_Min = 0;
        double Partial_Penalty_Min = 0;
        int Total_Worked_Min = 0;
        int Holiday_OT_Min = 0;
        int Week_Off_OT_Min = 0;
        int Normal_OT_Min = 0;
        int Late_Min = 0;
        int Early_Min = 0;
        int Partial_Min = 0;
        double Basic_Work_Salary = 0;
        double Normal_OT_Work_Salary = 0;
        double WeekOff_OT_Work_Salary = 0;
        double Holiday_OT_Work_Salary = 0;
        double Week_Off_Days_Salary = 0;
        double Holiday_Days_Salary = 0;
        double Leave_Days_Salary = 0;
        double Absent_Day_Penalty = 0;
        double Late_Min_Penalty = 0;
        double Early_Min_Penalty = 0;
        double Parital_Violation_Penalty = 0;

        bool IsOverTime_Emp = false;
        bool IsEmpLate = false;
        bool IsEmpEarly = false;
        bool IsEmpPartial = false;
        string LateMethod = string.Empty;
        string EarlyMethod = string.Empty;
        string PartialMethod = string.Empty;
        int LatePenaltyDedMin = 0;
        int EarlyPenaltyDedMin = 0;
        int PartialPenaltyDedMin = 0;
        int AbsentType = 0;
        int AbsentValue = 0;
        double Basic_DaySalary = 0;
        string NonLogProcessedEmp = string.Empty;
        DateTime Posted_Date = Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId);
        string EarlyPenalty_Methode = string.Empty;
        int EarlyPenalty_SalaryType = 0;
        int EarlyPenalty_SalaryValue = 0;
        string EarlyOut_Functionality = string.Empty;
        string LatePenalty_Methode = string.Empty;
        int LatePenalty_SalaryType = 0;
        int LatePenalty_SalaryValue = 0;
        string LateIn_Functionality = string.Empty;
        string Partial_PenaltyMethode = string.Empty;
        int Partial_Penalty_Salary_Type = 0;
        int Partial_Penalty_Salary_Value = 0;
        string Partial_Leave_Enable = string.Empty;
        string IsOverTime_Comp = string.Empty;
        string Max_Over_Time_Min_Comp = string.Empty;
        string Min_OVer_Time_Min_Comp = string.Empty;
        string Over_Time_Calculation_Method_Comp = string.Empty;

        bool LateMinCountAsHalfDay = false;
        DataTable dtAttReg = new DataTable();
        DataTable dtTemp = new DataTable();
        bool IsCompIndemnity = false;

        bool IsrelaxationMinute_In_Penalty = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsrelaxationMinute_In_Penalty", strCompanyId, strBrandId, strLocationId, ref trns));
        bool IsbreakMinute_In_Penalty = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsbreakMinute_In_Penalty", strCompanyId, strBrandId, strLocationId, ref trns));
        bool IsworkMinute_In_Penalty = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsworkMinute_In_Penalty", strCompanyId, strBrandId, strLocationId, ref trns));
        string strPaysalaryMethod = objAppParam.GetApplicationParameterValueByParamName("Pay Salary Acc To Work Hour or Ref Hour", strCompanyId, strBrandId, strLocationId, ref trns);

        IsCompIndemnity = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsIndemnity", strCompanyId, strBrandId, strLocationId, ref trns));
        IsLeaveSalary = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsLeaveSalary", strCompanyId, strBrandId, strLocationId, ref trns));
        //
        int FinancialYearMonth = Convert.ToInt32(objAppParam.GetApplicationParameterValueByParamName("FinancialYearStartMonth", strCompanyId, strBrandId, strLocationId, ref trns));

        DateTime FinancialYearStartDate = new DateTime();
        DateTime FinancialYearEndDate = new DateTime();
        if (Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Month < FinancialYearMonth)
        {

            FinancialYearStartDate = new DateTime(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Year - 1, FinancialYearMonth, 1);

            FinancialYearEndDate = FinancialYearStartDate.AddYears(1).AddDays(-1);
        }
        else
        {
            FinancialYearStartDate = new DateTime(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Year, FinancialYearMonth, 1);
            FinancialYearEndDate = FinancialYearStartDate.AddYears(1).AddDays(-1);

        }




        DateTime dtFromdate = new DateTime(Convert.ToInt32(strYear), Convert.ToInt32(strMonth), 1);
        DateTime dttodate = new DateTime(Convert.ToInt32(strYear), Convert.ToInt32(strMonth), DateTime.DaysInMonth(Convert.ToInt32(strYear), Convert.ToInt32(strMonth)));


        // objLogProcess.autoLogProcess(strCompanyId, strBrandId, strLocationId, empidlist, strUserId, "0", dtFromdate, dttodate, Session["EmpId"].ToString());
        bool IsWeekOffSalary = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsWeekOffLeaveSalary", strCompanyId, strBrandId, strLocationId, ref trns));
        bool IsHolidaySalary = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsHolidayLeaveSalary", strCompanyId, strBrandId, strLocationId, ref trns));
        bool IsAbsentSalary = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsAbsentLeaveSalary", strCompanyId, strBrandId, strLocationId, ref trns));
        bool IsPaidLeaveForLeavesalary = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsPaidLeaveForLeaveSalary", strCompanyId, strBrandId, strLocationId, ref trns));
        bool IsUnPaidLeaveForLeavesalary = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsUnPaidLeaveForLeaveSalary", strCompanyId, strBrandId, strLocationId, ref trns));
        LeaveCountOnWeekOff = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("Leave_Count_On_WeekOff", strCompanyId, strBrandId, strLocationId, ref trns));
        LeaveCOuntOnHoliday = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("Leave_Count_On_Holiday", strCompanyId, strBrandId, strLocationId, ref trns));
        LateMethod = objAppParam.GetApplicationParameterValueByParamName("Is_Late_Penalty_Method", strCompanyId, strBrandId, strLocationId);
        // EarlyMethod = objAppParam.GetApplicationParameterValueByParamName("Is_Early_Penalty_Method", strCompanyId);
        // PartialMethod = objAppParam.GetApplicationParameterValueByParamName("Partial_Penalty_Method", strCompanyId);
        LatePenaltyDedMin = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Late_Penalty_Min_Deduct", strCompanyId, strBrandId, strLocationId, ref trns));
        EarlyPenaltyDedMin = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Early_Penalty_Min_Deduct", strCompanyId, strBrandId, strLocationId, ref trns));
        // Modified By Nitin Jain Date 19-06-2014  to get Days in Month from Company Parameter if It is Monthly Bases or Fixed Days Bases
        string SalaryCalculationMethode = (objAppParam.GetApplicationParameterValueByParamName("Salary Calculate According To", strCompanyId, strBrandId, strLocationId, ref trns));
        int DaysInMonth = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Days In Month", strCompanyId, strBrandId, strLocationId, ref trns));
        AbsentType = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Absent_Type", strCompanyId, strBrandId, strLocationId, ref trns));
        AbsentValue = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Absent_Value", strCompanyId, strBrandId, strLocationId, ref trns));
        // Early Out Parameter------------------------
        EarlyOut_Functionality = objAppParam.GetApplicationParameterValueByParamName("Is_Early_Penalty", strCompanyId, strBrandId, strLocationId, ref trns);
        EarlyPenalty_Methode = objAppParam.GetApplicationParameterValueByParamName("Is_Early_Penalty_Method", strCompanyId, strBrandId, strLocationId, ref trns);
        EarlyPenalty_SalaryType = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Is_Early_Penalty_Salary_Type", strCompanyId, strBrandId, strLocationId, ref trns));
        EarlyPenalty_SalaryValue = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Is_Early_Penalty_Salary_Value", strCompanyId, strBrandId, strLocationId, ref trns));
        //------------------------------------------
        // Late In Company Parameter ----------------------
        LateIn_Functionality = objAppParam.GetApplicationParameterValueByParamName("Is_Late_Penalty", strCompanyId, strBrandId, strLocationId, ref trns);
        LatePenalty_Methode = objAppParam.GetApplicationParameterValueByParamName("Is_Late_Penalty_Method", strCompanyId, strBrandId, strLocationId, ref trns);
        LatePenalty_SalaryType = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Is_Late_Penalty_Salary_Type", strCompanyId, strBrandId, strLocationId, ref trns));
        LatePenalty_SalaryValue = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Is_Late_Penalty_Salary_Value", strCompanyId, strBrandId, strLocationId, ref trns));
        //-------------------------------------------------

        // Company Over Time Parameter......................
        IsOverTime_Comp = objAppParam.GetApplicationParameterValueByParamName("IsOverTime", strCompanyId, strBrandId, strLocationId, ref trns);
        Max_Over_Time_Min_Comp = objAppParam.GetApplicationParameterValueByParamName("Max Over Time Min", strCompanyId, strBrandId, strLocationId, ref trns);
        Min_OVer_Time_Min_Comp = objAppParam.GetApplicationParameterValueByParamName("Min OVer Time Min", strCompanyId, strBrandId, strLocationId, ref trns);
        Over_Time_Calculation_Method_Comp = objAppParam.GetApplicationParameterValueByParamName("Over Time Calculation Method", strCompanyId, strBrandId, strLocationId, ref trns);
        //..................................................
        // Partial Leave Parameter .................
        Partial_Leave_Enable = objAppParam.GetApplicationParameterValueByParamName("Is_Late_Penalty", strCompanyId, strBrandId, strLocationId, ref trns);
        PartialPenaltyDedMin = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Partial_Penalty_Min_Deduct", strCompanyId, strBrandId, strLocationId, ref trns));
        Partial_PenaltyMethode = objAppParam.GetApplicationParameterValueByParamName("Partial_Penalty_Method", strCompanyId, strBrandId, strLocationId, ref trns);
        Partial_Penalty_Salary_Type = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Partial_Penalty_Salary_Type", strCompanyId, strBrandId, strLocationId, ref trns));
        try
        {
            Partial_Penalty_Salary_Value = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Partial_Penalty_Salary_Value", strCompanyId, strBrandId, strLocationId, ref trns));
        }
        catch
        {
            Partial_Penalty_Salary_Value = 0;
        }

        for (int i = 0; i < empidlist.Split(',').Length; i++)
        {

            if (empidlist.Split(',')[i] == "")
            {
                continue;
            }



            DataTable DtProcessedEmp = objAttReg.GetAttendanceRegDataByMonth_Year_EmpId(empidlist.Split(',')[i].ToString(), strMonth, strYear, ref trns);

            if (DtProcessedEmp.Rows.Count > 0)
            {



                Total_Days = 0;
                Days_In_WorkMin = 0;
                Worked_Days = 0;
                Week_Off_Days = 0;
                Holiday_Days = 0;
                Leave_Days = 0;
                Absent_Days = 0;
                Assigned_Worked_Min = 0;
                Basic_Salary = 0;
                Basic_Min_Salary = 0;
                Normal_OT_Salary = 0;
                Week_Off_OT_Salary = 0;
                Holiday_OT_Salary = 0;
                Absent_Penalty = 0;
                Late_Penalty_Min = 0;
                Early_Penalty_Min = 0;
                Partial_Penalty_Min = 0;
                Total_Worked_Min = 0;
                Holiday_OT_Min = 0;
                Week_Off_OT_Min = 0;
                Normal_OT_Min = 0;
                Late_Min = 0;
                Early_Min = 0;
                Partial_Min = 0;
                Basic_Work_Salary = 0;
                Normal_OT_Work_Salary = 0;
                WeekOff_OT_Work_Salary = 0;
                Holiday_OT_Work_Salary = 0;
                Week_Off_Days_Salary = 0;
                Holiday_Days_Salary = 0;
                Leave_Days_Salary = 0;
                Absent_Day_Penalty = 0;
                Late_Min_Penalty = 0;
                Early_Min_Penalty = 0;
                Parital_Violation_Penalty = 0;


                IsEmpLate = false;
                IsEmpEarly = false;
                IsEmpPartial = false;
                LateMethod = string.Empty;
                EarlyMethod = string.Empty;
                PartialMethod = string.Empty;
                LatePenaltyDedMin = 0;
                EarlyPenaltyDedMin = 0;
                PartialPenaltyDedMin = 0;
                Is_AbsentPenalty = false;
                Basic_Min_Salary_Penalty_Ot = 0;

                objPayEmpAtt.DeletePayEmployeeAttendance(empidlist.Split(',')[i].ToString(), strMonth, strYear, ref trns);


                // Update  on 26/02/2015 By Nitin Jain ----------------------------------------------------------------------------------------

                //-----------------------------------------------------------------------------------------------------------------------------

                try
                {
                    IsEmpEarly = Convert.ToBoolean(objEmpParam.GetEmployeeParameterByParameterName(empidlist.Split(',')[i], "Field2", ref trns));
                    IsEmpLate = Convert.ToBoolean(objEmpParam.GetEmployeeParameterByParameterName(empidlist.Split(',')[i], "Field1", ref trns));
                    IsEmpPartial = Convert.ToBoolean(objEmpParam.GetEmployeeParameterByParameterName(empidlist.Split(',')[i], "Field13", ref trns));


                    Is_AbsentPenalty = Convert.ToBoolean(objEmpParam.GetEmployeeParameterByParameterName(empidlist.Split(',')[i], "Field3", ref trns));

                    IsOverTime_Emp = Convert.ToBoolean(objEmpParam.GetEmployeeParameterByParameterName(empidlist.Split(',')[i], "Is_OverTime", ref trns));
                }
                catch
                {

                }

                // -----------------------------------------

                //Update On 11-03-2015
                //if (SalaryCalculationMethode == "Fixed Days")
                //{
                //    Total_Days = DaysInMonth;
                //}
                //else
                //{
                Total_Days = DateTime.DaysInMonth(int.Parse(strYear), int.Parse(strMonth));
                //}

                dtAttReg = objAttReg.GetAttendanceRegDataByMonth_Year_EmpId(empidlist.Split(',')[i].ToString(), strMonth, strYear, ref trns);
                try
                {
                    Basic_Salary = double.Parse(objEmpParam.GetEmployeeParameterByParameterName(empidlist.Split(',')[i].ToString(), "Basic_Salary", ref trns));
                }
                catch
                {

                }

                Days_In_WorkMin = int.Parse(objEmpParam.GetEmployeeParameterByParameterName(empidlist.Split(',')[i].ToString(), "Assign_Min", ref trns));


                if ((Total_Days * Days_In_WorkMin) > 0)
                    Basic_Min_Salary = Basic_Salary / (Total_Days * Days_In_WorkMin);
                else
                    Basic_Min_Salary = 0;

                DataTable dtPenaltyLog = new DataTable();
                try
                {
                    if (LeaveCOuntOnHoliday == true || LeaveCountOnWeekOff == true)
                    {
                        DateTime StartDate = new DateTime(Convert.ToInt32(strYear), Convert.ToInt32(strMonth), 1);
                        int TotalDays = DateTime.DaysInMonth(Convert.ToInt32(strYear), Convert.ToInt32(strMonth));
                        DateTime EndDate = new DateTime(Convert.ToInt32(strYear), Convert.ToInt32(strMonth), TotalDays);
                        dtPenaltyLog = objAttReg.GetAttendanceRegDataByDate_EmpId(empidlist.Split(',')[i].ToString(), StartDate.AddDays(-30).ToString(), EndDate.ToString(), ref trns);
                    }

                    dtTemp = new DataView(dtAttReg, "Is_Week_Off='True'", "", DataViewRowState.CurrentRows).ToTable();


                    Week_Off_Days = dtTemp.Rows.Count;

                    dtTemp = new DataTable();
                    dtTemp = new DataView(dtAttReg, "Is_Holiday='True'", "", DataViewRowState.CurrentRows).ToTable(true, "att_date");

                    Holiday_Days = dtTemp.Rows.Count;

                    DataTable dtTempL = new DataTable();
                    dtTempL = new DataView(dtAttReg, "Is_Leave='True'", "", DataViewRowState.CurrentRows).ToTable();

                    if (dtTempL.Rows.Count > 0)
                    {
                        for (int s = 0; s < dtTempL.Rows.Count; s++)
                        {
                            bool IsLSalary = false;
                            DataTable dtLeaveSalary = ObjLeaveReq.IsLeaveSalary(dtTempL.Rows[s]["Att_Date"].ToString(), dtTempL.Rows[s]["Emp_Id"].ToString(), ref trns);
                            if (dtLeaveSalary.Rows.Count > 0)
                            {
                                IsLSalary = Convert.ToBoolean(dtLeaveSalary.Rows[0]["LeaveSalary"].ToString());
                                if (!IsLSalary)
                                {
                                    if (Leave_Days == 0)
                                    {
                                        Leave_Days = 1;
                                    }
                                    else
                                    {
                                        Leave_Days = Leave_Days + 1;
                                    }
                                }
                            }
                        }

                        //Leave_Days = dtTemp.Rows.Count;
                    }

                    dtTemp = new DataTable();
                    if (Is_AbsentPenalty == true)
                    {
                        DataTable dtWHAbsent = new DataTable();

                        dtWHAbsent.Clear();

                        Absent_Penalty = 0;
                        Absent_Day_Penalty = 0;
                        dtTemp = new DataView(dtAttReg, "Is_Absent='True'", "", DataViewRowState.CurrentRows).ToTable();
                        Absent_Days = dtTemp.Rows.Count;
                        for (int k = 0; k < dtTemp.Rows.Count; k++)
                        {
                            Total_Worked_Min = 0;
                            DataTable dtShiftCount = new DataView(dtAttReg, "Att_Date='" + dtTemp.Rows[k]["Att_Date"] + "'", "", DataViewRowState.CurrentRows).ToTable();
                            for (int s = 0; s < dtShiftCount.Rows.Count; s++)
                            {
                                Total_Worked_Min += Convert.ToInt32(dtShiftCount.Rows[s]["TotalAssign_Min"].ToString());

                                Basic_Min_Salary = Basic_Salary / (Total_Days * Total_Worked_Min);
                            }
                            Absent_Penalty = objAttendance.AbsentDaysSalary(strCompanyId, Basic_Min_Salary, empidlist.Split(',')[i].ToString(), Total_Worked_Min, 1, ref trns, strBrandId, strLocationId);
                            Absent_Day_Penalty += Absent_Penalty;
                        }
                    }
                    else
                    {
                        Absent_Penalty = 0;
                        Absent_Day_Penalty = 0;
                        dtTemp = new DataView(dtAttReg, "Is_Absent='True'", "", DataViewRowState.CurrentRows).ToTable();
                        Absent_Days = dtTemp.Rows.Count;
                        Absent_Days = dtTemp.Rows.Count;
                        for (int k = 0; k < dtTemp.Rows.Count; k++)
                        {
                            Total_Worked_Min = 0;
                            DataTable dtShiftCount = new DataView(dtAttReg, "Att_Date='" + dtTemp.Rows[k]["Att_Date"] + "'", "", DataViewRowState.CurrentRows).ToTable();
                            for (int s = 0; s < dtShiftCount.Rows.Count; s++)
                            {
                                Total_Worked_Min += Convert.ToInt32(dtShiftCount.Rows[s]["TotalAssign_Min"].ToString());

                                Basic_Min_Salary = Basic_Salary / (Total_Days * Total_Worked_Min);
                            }
                            Absent_Penalty = objAttendance.AbsentDaysSalary(strCompanyId, Basic_Min_Salary, empidlist.Split(',')[i].ToString(), Total_Worked_Min, 1, ref trns, strBrandId, strLocationId);
                            Absent_Day_Penalty += Absent_Penalty;
                        }
                        Absent_Day_Penalty = 0;
                    }

                    // Total_Days = DateTime.DaysInMonth(int.Parse(strYear), int.Parse(strMonth));
                    // dtAttReg


                    Worked_Days = Total_Days - (Week_Off_Days + Holiday_Days + Leave_Days + Absent_Days);

                    if (Worked_Days < 0)
                    {
                        Worked_Days = 0;
                    }
                    else
                    {
                        Worked_Days = Worked_Days;
                    }
                    // Assigned_Worked_Min = Days_In_WorkMin * Total_Days;GetAttendanceRegDataByMonth_Year_EmpId_TotalDays
                    // GetAttendanceRegDataByDate_EmpId
                    DataTable dt = objAttReg.GetAttendanceRegDataByMonth_Year_EmpId(empidlist.Split(',')[i].ToString(), strMonth, strYear, ref trns);
                    // Modified By Nitin Jain on 11/11/2014 Get Start Date End Date to Get Records From Attendance Register ...

                    //...................................................
                    if (dt.Rows.Count > 0)
                    {
                        for (int k = 0; k < dt.Rows.Count; k++)
                        {
                            Assigned_Worked_Min += int.Parse(dt.Rows[k]["TotalAssign_Min"].ToString());
                        }
                    }
                }
                catch
                {
                    Absent_Penalty = 0;
                    Absent_Day_Penalty = 0;
                    dtTemp = new DataView(dtAttReg, "Is_Absent='True'", "", DataViewRowState.CurrentRows).ToTable();
                    Absent_Days = dtTemp.Rows.Count;
                    Absent_Days = dtTemp.Rows.Count;
                    for (int k = 0; k < dtTemp.Rows.Count; k++)
                    {
                        Total_Worked_Min = 0;
                        DataTable dtShiftCount = new DataView(dtAttReg, "Att_Date='" + dtTemp.Rows[k]["Att_Date"] + "'", "", DataViewRowState.CurrentRows).ToTable();
                        for (int s = 0; s < dtShiftCount.Rows.Count; s++)
                        {
                            Total_Worked_Min += Convert.ToInt32(dtShiftCount.Rows[s]["TotalAssign_Min"].ToString());

                            Basic_Min_Salary = Basic_Salary / (Total_Days * Total_Worked_Min);
                        }
                        Absent_Penalty = objAttendance.AbsentDaysSalary(strCompanyId, Basic_Min_Salary, empidlist.Split(',')[i].ToString(), Total_Worked_Min, 1, ref trns, strBrandId, strLocationId);
                        double PerdaySalary = Basic_Min_Salary * Total_Worked_Min;
                        //Commented On 10-07-2015.
                        //if (Absent_Penalty.ToString() != "")
                        //{
                        //    if (Absent_Penalty >= PerdaySalary)
                        //    {
                        //        Absent_Penalty = Absent_Penalty - PerdaySalary;
                        //    }
                        //    else if (PerdaySalary >= Absent_Penalty)
                        //    {
                        //        Absent_Penalty = PerdaySalary - Absent_Penalty;
                        //    }
                        //}
                        Absent_Day_Penalty += Absent_Penalty;
                    }
                    //Absent_Day_Penalty = 0;

                    Worked_Days = Total_Days - (Week_Off_Days + Holiday_Days + Leave_Days + Absent_Days);
                }

                if ((Total_Days * Days_In_WorkMin) > 0)
                    Basic_Min_Salary = Basic_Salary / (Total_Days * Days_In_WorkMin);
                else
                    Basic_Min_Salary = 0;

                if (Basic_Min_Salary.ToString() == "NaN")
                {
                    Basic_Min_Salary = 0;
                }
                Absent_Penalty = OnDayAbsentSalary(strCompanyId, Basic_Min_Salary, empidlist.Split(',')[i].ToString(), ref trns, strBrandId, strLocationId);
                //  Partial_Penalty_Min = OnMinuteParialPenalty(Basic_Min_Salary, empidlist.Split(',')[i].ToString());

                int TotalEffectWorkMin = 0;
                int DayWorkMin = 0;
                double DailySalary = 0;
                double EffectiveWorkSalary = 0;

                dtTemp = new DataTable();
                DataTable dtTempwork = new DataView(dtAttReg, "Is_Holiday=0 AND Is_Week_Off =0 and Is_Leave=0 and Is_Absent=0", "", DataViewRowState.CurrentRows).ToTable();
                dtTemp = new DataView(dtAttReg, "EffectiveWork_Min<>0 AND Is_Holiday=0 AND Is_Week_Off =0 and Is_Leave=0 and Is_Absent=0", "", DataViewRowState.CurrentRows).ToTable();
                for (int k = 0; k < dtTemp.Rows.Count; k++)
                {
                    Total_Worked_Min = 0;
                    DateTime DtFromDate = Convert.ToDateTime(dtTemp.Rows[k]["Att_Date"].ToString());
                    DataTable DvFromDate = new DataView(dtTempwork, "Att_Date='" + DtFromDate + "'", "", DataViewRowState.CurrentRows).ToTable();

                    for (int s = 0; s < DvFromDate.Rows.Count; s++)
                    {
                        Total_Worked_Min += Convert.ToInt32(DvFromDate.Rows[s]["TotalAssign_Min"].ToString());
                    }

                    // Days_In_WorkMin = int.Parse(objEmpParam.GetEmployeeParameterByParameterName(empidlist.Split(',')[i].ToString(), "Assign_Min"));
                    Days_In_WorkMin = Total_Worked_Min;


                    if ((Total_Days * Days_In_WorkMin) > 0)
                        Basic_Min_Salary = Basic_Salary / (Total_Days * Days_In_WorkMin);
                    else
                        Basic_Min_Salary = 0;


                    //On 11-07-2015
                    if ((dtTemp.Rows[k]["Shift_Id"].ToString() != "0" && dtTemp.Rows[k]["Shift_Id"].ToString() != "") || dtTemp.Rows[k]["TimeTable_Id"].ToString() != "0")
                    {
                        if (strLocationId == "8")
                        {
                            EffectiveWorkSalary = Basic_Min_Salary * (int.Parse(dtTemp.Rows[k]["TotalAssign_Min"].ToString()) - int.Parse(dtTemp.Rows[k]["Partial_Min"].ToString()));
                        }
                        else
                        {
                            EffectiveWorkSalary = Basic_Min_Salary * int.Parse(dtTemp.Rows[k]["TotalAssign_Min"].ToString());
                        }


                        if (strPaysalaryMethod.Trim() == "Work Calculation")
                        {
                            Days_In_WorkMin = int.Parse(dtTemp.Rows[k]["EffectiveWork_Min"].ToString()) + int.Parse(dtTemp.Rows[k]["LateMin"].ToString()) + int.Parse(dtTemp.Rows[k]["Late_Relaxation_Min"].ToString()) + int.Parse(dtTemp.Rows[k]["EarlyMin"].ToString()) + int.Parse(dtTemp.Rows[k]["Early_Relaxation_Min"].ToString());

                            if (Days_In_WorkMin > int.Parse(dtTemp.Rows[k]["TotalAssign_Min"].ToString()))
                            {

                                Days_In_WorkMin = int.Parse(dtTemp.Rows[k]["TotalAssign_Min"].ToString());

                            }

                            EffectiveWorkSalary = Days_In_WorkMin * Basic_Min_Salary;
                        }


                        //Basic_Work_Salary += DailySalary;
                    }
                    else
                    {
                        if (int.Parse(dtTemp.Rows[k]["EffectiveWork_Min"].ToString()) > Total_Worked_Min)
                        {
                            EffectiveWorkSalary = Basic_Min_Salary * int.Parse(dtTemp.Rows[k]["TotalAssign_Min"].ToString());
                        }
                        else
                        {
                            EffectiveWorkSalary = Basic_Min_Salary * int.Parse(dtTemp.Rows[k]["EffectiveWork_Min"].ToString());
                        }
                    }

                    //if (int.Parse(dtTemp.Rows[k]["EffectiveWork_Min"].ToString()) > Total_Worked_Min)
                    //{
                    //EffectiveWorkSalary = Basic_Min_Salary * int.Parse(dtTemp.Rows[k]["EffectiveWork_Min"].ToString());
                    //}
                    //else
                    //{
                    //    EffectiveWorkSalary = Basic_Min_Salary * int.Parse(dtTemp.Rows[k]["EffectiveWork_Min"].ToString());
                    //}

                    // EffectiveWorkSalary = Basic_Min_Salary * int.Parse(dtTemp.Rows[k]["EffectiveWork_Min"].ToString());


                    Basic_Work_Salary += EffectiveWorkSalary;
                    //}
                }


                // Modified By Nitin Jain
                if (DailySalary == 0.0)
                {
                    DailySalary = Basic_Min_Salary * Days_In_WorkMin;
                }
                //try
                //{
                //    if (Absent_Day_Penalty > 0)
                //    {
                //        Basic_Work_Salary = Basic_Work_Salary + DailySalary;
                //    }
                //}
                //catch
                //{
                //}
                Week_Off_Days_Salary = DailySalary * Week_Off_Days;
                Holiday_Days_Salary = Holiday_Days * DailySalary;
                Total_Worked_Min = TotalEffectWorkMin;
                int TotalHolidayMin = 0;

                dtTemp = new DataTable();
                dtTemp = new DataView(dtAttReg, "Holiday_Min<>0", "", DataViewRowState.CurrentRows).ToTable();
                for (int k = 0; k < dtTemp.Rows.Count; k++)
                {
                    if (IsOverTime_Emp == true)
                    {


                        if (dtTemp.Rows[k]["TimeTable_Id"].ToString() != "0")
                        {
                            DataTable dtTempTimeTable = objTimeTable.GetTimeTableMasterById(strCompanyId, dtTemp.Rows[k]["TimeTable_Id"].ToString(), ref trns);

                            Basic_Min_Salary = objAttendance.GetPerMinuteSalary_For_OT_Penalty1(Total_Worked_Min, Basic_Salary, Total_Days, dtTemp.Rows[k]["TimeTable_Id"].ToString(), IsrelaxationMinute_In_Penalty, IsbreakMinute_In_Penalty, IsworkMinute_In_Penalty, ref trns, strCompanyId, dtTempTimeTable);
                        }
                        else
                        {
                            Total_Worked_Min = int.Parse(dtTemp.Rows[k]["TotalAssign_Min"].ToString());

                            if ((Total_Days * Total_Worked_Min) > 0)
                                Basic_Min_Salary = Basic_Salary / (Total_Days * Total_Worked_Min);
                            else
                                Basic_Min_Salary = 0;

                        }





                        //Days_In_WorkMin = int.Parse(dtTemp.Rows[k]["TotalAssign_Min"].ToString());


                        //if ((Total_Days * Days_In_WorkMin) > 0)
                        //    Basic_Min_Salary = Basic_Salary / (Total_Days * Days_In_WorkMin);
                        //else
                        //    Basic_Min_Salary = 0;



                        TotalHolidayMin = int.Parse(dtTemp.Rows[k]["Holiday_Min"].ToString());
                        Holiday_OT_Work_Salary += objAttendance.GetOTSalary(strCompanyId, empidlist.Split(',')[i].ToString(), Basic_Min_Salary, TotalHolidayMin, "Holiday", ref trns);
                        Holiday_OT_Min += int.Parse(dtTemp.Rows[k]["Holiday_Min"].ToString());

                        //updated on 18/11/2017 by jitendra because ot salary was calculating in holiday salary
                        //Holiday_Days_Salary += Holiday_OT_Work_Salary;
                        if (Holiday_Days_Salary.ToString() == "NaN")
                        {
                            Holiday_Days_Salary = 0;
                        }
                    }
                    else
                    {
                        Holiday_OT_Min += int.Parse(dtTemp.Rows[k]["Holiday_Min"].ToString());
                    }
                }

                int WeekOffMin = 0;

                dtTemp = new DataTable();
                dtTemp = new DataView(dtAttReg, "Week_Off_Min<>0", "", DataViewRowState.CurrentRows).ToTable();
                //dtTemp = new DataView(dtAttReg, "Is_Week_Off=True", "", DataViewRowState.CurrentRows).ToTable();

                for (int k = 0; k < dtTemp.Rows.Count; k++)
                {
                    if (IsOverTime_Emp == true)
                    {




                        if (dtTemp.Rows[k]["TimeTable_Id"].ToString() != "0")
                        {
                            DataTable dtTempTimeTable = objTimeTable.GetTimeTableMasterById(strCompanyId, dtTemp.Rows[k]["TimeTable_Id"].ToString(), ref trns);

                            Basic_Min_Salary = objAttendance.GetPerMinuteSalary_For_OT_Penalty1(Total_Worked_Min, Basic_Salary, Total_Days, dtTemp.Rows[k]["TimeTable_Id"].ToString(), IsrelaxationMinute_In_Penalty, IsbreakMinute_In_Penalty, IsworkMinute_In_Penalty, ref trns, strCompanyId, dtTempTimeTable);
                        }
                        else
                        {
                            Total_Worked_Min = int.Parse(dtTemp.Rows[k]["TotalAssign_Min"].ToString());

                            if ((Total_Days * Total_Worked_Min) > 0)
                                Basic_Min_Salary = Basic_Salary / (Total_Days * Total_Worked_Min);
                            else
                                Basic_Min_Salary = 0;

                        }

                        WeekOffMin = int.Parse(dtTemp.Rows[k]["Week_Off_Min"].ToString());
                        WeekOff_OT_Work_Salary += objAttendance.GetOTSalary(strCompanyId, empidlist.Split(',')[i].ToString(), Basic_Min_Salary, WeekOffMin, "WeekOff", ref trns);
                        Week_Off_OT_Min += WeekOffMin;
                        //updated on 18/11/2017 by jitendra because ot salary was calculating in week off salary
                        //Week_Off_Days_Salary += WeekOff_OT_Work_Salary;
                        if (Week_Off_Days_Salary.ToString() == "NaN")
                        {
                            Week_Off_Days_Salary = 0;
                        }
                    }
                    else
                    {
                        Week_Off_OT_Min += int.Parse(dtTemp.Rows[k]["Week_Off_Min"].ToString());
                    }
                }

                int NormalOtMin = 0;

                dtTemp = new DataTable();
                dtTemp = new DataView(dtAttReg, "OverTime_Min<>0", "", DataViewRowState.CurrentRows).ToTable();
                for (int k = 0; k < dtTemp.Rows.Count; k++)
                {
                    Total_Worked_Min = 0;
                    Basic_Min_Salary = 0;


                    DateTime DtFromDate = Convert.ToDateTime(dtTemp.Rows[k]["Att_Date"].ToString());
                    DataTable DvFromDate = new DataView(dtAttReg, "Att_Date='" + DtFromDate + "'", "", DataViewRowState.CurrentRows).ToTable();
                    for (int s = 0; s < DvFromDate.Rows.Count; s++)
                    {


                        if (DvFromDate.Rows[s]["TimeTable_Id"].ToString() != "0")
                        {
                            DataTable dtTempTimeTable = objTimeTable.GetTimeTableMasterById(strCompanyId, DvFromDate.Rows[s]["TimeTable_Id"].ToString(), ref trns);

                            Basic_Min_Salary += objAttendance.GetPerMinuteSalary_For_OT_Penalty1(Total_Worked_Min, Basic_Salary, Total_Days, DvFromDate.Rows[s]["TimeTable_Id"].ToString(), IsrelaxationMinute_In_Penalty, IsbreakMinute_In_Penalty, IsworkMinute_In_Penalty, ref trns, strCompanyId, dtTempTimeTable);
                        }
                        else
                        {
                            Total_Worked_Min += int.Parse(DvFromDate.Rows[s]["TotalAssign_Min"].ToString());

                            if ((Total_Days * Total_Worked_Min) > 0)
                                Basic_Min_Salary = Basic_Salary / (Total_Days * Total_Worked_Min);
                            else
                                Basic_Min_Salary = 0;

                        }

                    }
                    // Normal OT
                    //Days_In_WorkMin = Total_Worked_Min;
                    //if ((Total_Days * Days_In_WorkMin) > 0)
                    //    Basic_Min_Salary = Basic_Salary / (Total_Days * Days_In_WorkMin);
                    //else
                    //    Basic_Min_Salary = 0;
                    NormalOtMin = int.Parse(dtTemp.Rows[k]["OverTime_Min"].ToString());
                    Normal_OT_Min += NormalOtMin;
                    Normal_OT_Salary = objAttendance.GetOTSalary(strCompanyId, empidlist.Split(',')[i].ToString(), Basic_Min_Salary, NormalOtMin, "Normal", ref trns);
                    Normal_OT_Work_Salary += Normal_OT_Salary;
                }

                //...............................................

                // Normal_OT_Min = NormalOtMin;

                int LateMin = 0;

                dtTemp = new DataTable();
                dtTemp = new DataView(dtAttReg, "LateMin<>'0'", "", DataViewRowState.CurrentRows).ToTable();

                for (int k = 0; k < dtTemp.Rows.Count; k++)
                {
                    Total_Worked_Min = 0;
                    Basic_Min_Salary = 0;

                    DataTable dtShiftCount = new DataView(dtAttReg, "Att_Date='" + dtTemp.Rows[k]["Att_Date"] + "'", "", DataViewRowState.CurrentRows).ToTable();
                    if (dtShiftCount.Rows.Count > 0)
                    {
                        for (int s = 0; s < dtShiftCount.Rows.Count; s++)
                        {
                            if (dtShiftCount.Rows[s]["TimeTable_Id"].ToString() != "0")
                            {
                                DataTable dtTempTimeTable = objTimeTable.GetTimeTableMasterById(strCompanyId, dtShiftCount.Rows[s]["TimeTable_Id"].ToString(), ref trns);
                                Basic_Min_Salary += objAttendance.GetPerMinuteSalary_For_OT_Penalty1(Total_Worked_Min, Basic_Salary, Total_Days, dtShiftCount.Rows[s]["TimeTable_Id"].ToString(), IsrelaxationMinute_In_Penalty, IsbreakMinute_In_Penalty, IsworkMinute_In_Penalty, ref trns, strCompanyId, dtTempTimeTable);
                            }
                            else
                            {
                                Total_Worked_Min += int.Parse(dtShiftCount.Rows[s]["TotalAssign_Min"].ToString());

                                if ((Total_Days * Total_Worked_Min) > 0)
                                    Basic_Min_Salary = Basic_Salary / (Total_Days * Total_Worked_Min);
                                else
                                    Basic_Min_Salary = 0;

                            }

                        }

                    }
                    else
                    {
                        Days_In_WorkMin = int.Parse(dtTemp.Rows[k]["TotalAssign_Min"].ToString());
                        if ((Total_Days * Days_In_WorkMin) > 0)
                            Basic_Min_Salary = Basic_Salary / (Total_Days * Days_In_WorkMin);
                        else
                            Basic_Min_Salary = 0;
                    }

                    Total_Worked_Min = 0;
                    // Late Min                                
                    LateMin = int.Parse(dtTemp.Rows[k]["LateMin"].ToString());
                    if (IsEmpLate == true)
                    {
                        if (LateMinCountAsHalfDay == false)
                        {
                            //Update On 10-03-2015
                            Late_Penalty_Day = objAttendance.LatePenalty(strCompanyId, Basic_Min_Salary, empidlist.Split(',')[i].ToString(), 1, LateMin, "LogProcess", ref trns, strBrandId, strLocationId);
                        }
                        else
                        {
                            Late_Penalty_Day = Basic_DaySalary / 2;
                        }
                    }
                    else
                    {
                        Late_Penalty_Day = LateMin * Basic_Min_Salary;
                    }
                    Late_Min_Penalty += Late_Penalty_Day;
                    Late_Min += LateMin;
                }

                int EarlyMin = 0;

                dtTemp = new DataTable();
                dtTemp = new DataView(dtAttReg, "EarlyMin<>'0'", "", DataViewRowState.CurrentRows).ToTable();
                for (int k = 0; k < dtTemp.Rows.Count; k++)
                {
                    Total_Worked_Min = 0;
                    Basic_Min_Salary = 0;

                    DataTable dtShiftCount = new DataView(dtAttReg, "Att_Date='" + dtTemp.Rows[k]["Att_Date"] + "'", "", DataViewRowState.CurrentRows).ToTable();
                    Total_Worked_Min = 0;
                    if (dtShiftCount.Rows.Count > 0)
                    {
                        for (int s = 0; s < dtShiftCount.Rows.Count; s++)
                        {
                            if (dtShiftCount.Rows[s]["TimeTable_Id"].ToString() != "0")
                            {
                                DataTable dtTempTimeTable = objTimeTable.GetTimeTableMasterById(strCompanyId, dtShiftCount.Rows[s]["TimeTable_Id"].ToString(), ref trns);

                                Basic_Min_Salary += objAttendance.GetPerMinuteSalary_For_OT_Penalty1(Total_Worked_Min, Basic_Salary, Total_Days, dtShiftCount.Rows[s]["TimeTable_Id"].ToString(), IsrelaxationMinute_In_Penalty, IsbreakMinute_In_Penalty, IsworkMinute_In_Penalty, ref trns, strCompanyId, dtTempTimeTable);
                            }
                            else
                            {
                                Total_Worked_Min += int.Parse(dtShiftCount.Rows[s]["TotalAssign_Min"].ToString());

                                if ((Total_Days * Total_Worked_Min) > 0)
                                    Basic_Min_Salary = Basic_Salary / (Total_Days * Total_Worked_Min);
                                else
                                    Basic_Min_Salary = 0;

                            }
                        }

                    }
                    else
                    {
                        Days_In_WorkMin = int.Parse(dtTemp.Rows[k]["TotalAssign_Min"].ToString());
                        if ((Total_Days * Days_In_WorkMin) > 0)
                            Basic_Min_Salary = Basic_Salary / (Total_Days * Days_In_WorkMin);
                        else
                            Basic_Min_Salary = 0;
                    }

                    EarlyMin = int.Parse(dtTemp.Rows[k]["EarlyMin"].ToString());
                    Early_Penalty_Min = objAttendance.EarlyPenalty(strCompanyId, Basic_Min_Salary, empidlist.Split(',')[i].ToString(), 1, EarlyMin, "LogProcess", ref trns, strBrandId, strLocationId);
                    //Update On 10-03-2015
                    Early_Min_Penalty += Early_Penalty_Min;
                    Early_Min += EarlyMin;
                }


                int PartialMin = 0;


                if (strLocationId == "8")
                {
                    dtTemp = new DataTable();
                    dtTemp = new DataView(dtAttReg, "Partial_Min<>'0'", "", DataViewRowState.CurrentRows).ToTable();
                    string PlType = string.Empty;
                    for (int k = 0; k < dtTemp.Rows.Count; k++)
                    {
                        Total_Worked_Min = 0;
                        Basic_Min_Salary = 0;


                        PartialMin = int.Parse(dtTemp.Rows[k]["Partial_Min"].ToString());
                        if (Partial_Leave_Enable == "True" && IsEmpPartial)
                        {

                            DataTable dtShiftCount = new DataView(dtAttReg, "Att_Date='" + dtTemp.Rows[k]["Att_Date"] + "'", "", DataViewRowState.CurrentRows).ToTable();
                            Total_Worked_Min = 0;
                            if (dtShiftCount.Rows.Count > 0)
                            {
                                for (int s = 0; s < dtShiftCount.Rows.Count; s++)
                                {
                                    if (dtShiftCount.Rows[s]["TimeTable_Id"].ToString() != "0")
                                    {
                                        DataTable dtTempTimeTable = objTimeTable.GetTimeTableMasterById(strCompanyId, dtShiftCount.Rows[s]["TimeTable_Id"].ToString(), ref trns);

                                        Basic_Min_Salary += objAttendance.GetPerMinuteSalary_For_OT_Penalty1(Total_Worked_Min, Basic_Salary, Total_Days, dtShiftCount.Rows[s]["TimeTable_Id"].ToString(), IsrelaxationMinute_In_Penalty, IsbreakMinute_In_Penalty, IsworkMinute_In_Penalty, ref trns, strCompanyId, dtTempTimeTable);
                                    }
                                    else
                                    {
                                        Total_Worked_Min += int.Parse(dtShiftCount.Rows[s]["TotalAssign_Min"].ToString());

                                        if ((Total_Days * Total_Worked_Min) > 0)
                                            Basic_Min_Salary = Basic_Salary / (Total_Days * Total_Worked_Min);
                                        else
                                            Basic_Min_Salary = 0;

                                    }
                                }

                            }


                            Partial_Penalty_Min = objAttendance.ParialPenalty(strCompanyId, Basic_Min_Salary, dtTemp.Rows[k]["Emp_Id"].ToString(), 1, PartialMin, "DailySalary", ref trns, strBrandId, strLocationId);
                            Parital_Violation_Penalty += Partial_Penalty_Min;
                            Partial_Min += PartialMin;
                        }
                        else
                        {
                            Parital_Violation_Penalty = 0;
                            Partial_Min += PartialMin;
                        }
                    }

                    if (Partial_Min > 260)
                    {

                        //Basic_Min_Salary = Basic_Salary / (Total_Days * Total_Worked_Min);
                        Parital_Violation_Penalty = Parital_Violation_Penalty - ((Basic_Salary / (Total_Days * 480)) * 260);
                        Partial_Min = Partial_Min - 260;
                    }
                    else
                    {
                        Parital_Violation_Penalty = 0;
                        Partial_Min = 0;
                    }
                }
                else
                {
                    dtTemp = new DataTable();
                    dtTemp = new DataView(dtAttReg, "Partial_Violation_Min<>'0'", "", DataViewRowState.CurrentRows).ToTable();
                    string PlType = string.Empty;
                    for (int k = 0; k < dtTemp.Rows.Count; k++)
                    {
                        Total_Worked_Min = 0;
                        Basic_Min_Salary = 0;

                        DataTable DtPLType = objPartialReq.GetPartialLeaveType_EmpId(strCompanyId, dtTemp.Rows[k]["Emp_Id"].ToString(), dtTemp.Rows[k]["Att_Date"].ToString(), ref trns);
                        if (DtPLType.Rows.Count > 0)
                        {
                            PlType = DtPLType.Rows[0]["Partial_Leave_Type"].ToString();
                        }
                        PartialMin = int.Parse(dtTemp.Rows[k]["Partial_Violation_Min"].ToString());
                        if (Partial_Leave_Enable == "True" && IsEmpPartial)
                        {

                            DataTable dtShiftCount = new DataView(dtAttReg, "Att_Date='" + dtTemp.Rows[k]["Att_Date"] + "'", "", DataViewRowState.CurrentRows).ToTable();
                            Total_Worked_Min = 0;
                            if (dtShiftCount.Rows.Count > 0)
                            {
                                for (int s = 0; s < dtShiftCount.Rows.Count; s++)
                                {
                                    if (dtShiftCount.Rows[s]["TimeTable_Id"].ToString() != "0")
                                    {
                                        DataTable dtTempTimeTable = objTimeTable.GetTimeTableMasterById(strCompanyId, dtShiftCount.Rows[s]["TimeTable_Id"].ToString(), ref trns);

                                        Basic_Min_Salary += objAttendance.GetPerMinuteSalary_For_OT_Penalty1(Total_Worked_Min, Basic_Salary, Total_Days, dtShiftCount.Rows[s]["TimeTable_Id"].ToString(), IsrelaxationMinute_In_Penalty, IsbreakMinute_In_Penalty, IsworkMinute_In_Penalty, ref trns, strCompanyId, dtTempTimeTable);
                                    }
                                    else
                                    {
                                        Total_Worked_Min += int.Parse(dtShiftCount.Rows[s]["TotalAssign_Min"].ToString());

                                        if ((Total_Days * Total_Worked_Min) > 0)
                                            Basic_Min_Salary = Basic_Salary / (Total_Days * Total_Worked_Min);
                                        else
                                            Basic_Min_Salary = 0;

                                    }
                                }

                            }


                            Partial_Penalty_Min = objAttendance.ParialPenalty(strCompanyId, Basic_Min_Salary, dtTemp.Rows[k]["Emp_Id"].ToString(), 1, PartialMin, "DailySalary", ref trns, strBrandId, strLocationId);
                            Parital_Violation_Penalty += Partial_Penalty_Min;
                            Partial_Min += PartialMin;
                        }
                        else
                        {
                            Parital_Violation_Penalty = 0;
                            Partial_Min += PartialMin;
                        }
                    }
                }




                double UnpaidLeaveSalary = 0;

                if (IsLeaveSalary)
                {
                    ////Add On 06-06-2016 By Lokesh
                    //bool IsLSalary = false;
                    //DataTable dtLeaveSalary = ObjLeaveReq.IsLeaveSalary(dtTemp.Rows[k]["Att_Date"].ToString(), empidlist.Split(',')[i].ToString());
                    //if (dtLeaveSalary.Rows.Count > 0)
                    //{
                    //    IsLSalary = Convert.ToBoolean(dtLeaveSalary.Rows[0]["LeaveSalary"].ToString());
                    //}
                    //if (IsLSalary)
                    //{
                    //Leave_Days_Salary = (Basic_Salary * Leave_Days) / Total_Days;

                    //here we are getting leave salary
                    //17/11/2017

                    //code started
                    DataTable dtUnpaidLeave = new DataView(dtAttReg, "Is_Leave='True'", "", DataViewRowState.CurrentRows).ToTable();
                    bool IsPaid = false;
                    string strLeaveTypeId = "0";
                    double deductionPercentage = 0;
                    foreach (DataRow dr in dtUnpaidLeave.Rows)
                    {
                        IsPaid = ObjLeaveReq.IsPaidLeave(dr["Att_Date"].ToString(), dr["Emp_Id"].ToString(), ref trns);

                        if (IsPaid)
                        {
                            Leave_Days_Salary += (Basic_Salary / Total_Days);
                        }
                        else
                        {
                            try
                            {
                                strLeaveTypeId = Objda.return_DataTable("SELECT Att_Leave_Request_Child.LeaveType_Id FROM Att_Leave_Request_Child LEFT OUTER JOIN Att_Leave_Request ON Att_Leave_Request_Child.Ref_Id = Att_Leave_Request.Trans_Id WHERE (Att_Leave_Request_Child.IsActive = 'True') AND (Att_Leave_Request_Child.Leave_Date = '" + dr["Att_Date"].ToString() + "') and Att_Leave_Request.Emp_Id='" + dr["Emp_Id"].ToString() + "'", ref trns).Rows[0]["LeaveType_Id"].ToString();
                            }
                            catch (Exception ex)
                            {
                                strLeaveTypeId = "0";
                            }

                            deductionPercentage = GetEmployeeSickLeavededuction(dr["Emp_Id"].ToString(), dr["Att_Date"].ToString(), strLeaveTypeId, FinancialYearStartDate, FinancialYearEndDate, ref trns);

                            if (deductionPercentage > 0)
                            {
                                Leave_Days_Salary += (Basic_Salary / Total_Days) - ((Basic_Salary / Total_Days) * deductionPercentage) / 100;
                            }
                            else
                            {
                                Leave_Days_Salary += 0;
                            }
                        }
                    }

                    //code end

                    //}
                    //else
                    //{
                    //    Leave_Days_Salary = 0;
                    //}
                }
                else
                {
                    //
                    Leave_Days_Salary = 0;
                }

                if (Leave_Days_Salary.ToString() == "NaN")
                {
                    Leave_Days_Salary = 0;
                }
                // Basic_Work_Salary = Basic_Work_Salary - Week_Off_Days_Salary - Holiday_Days_Salary - Leave_Days_Salary;

                double TotalPenalty = (Absent_Day_Penalty - (Late_Min_Penalty + Early_Min_Penalty));
                // Basic_Work_Salary = Basic_Work_Salary - (-TotalPenalty);

                //objPayEmpAtt.InsertPayEmployeeAttendance(strCompanyId, empidlist.Split(',')[i].ToString(), strMonth, strYear, Total_Days.ToString(), Days_In_WorkMin.ToString(), Worked_Days.ToString(), Week_Off_Days.ToString(), Holiday_Days.ToString(), Leave_Days.ToString(), Absent_Days.ToString(), Assigned_Worked_Min.ToString(), Basic_Salary.ToString(), Basic_Min_Salary.ToString(), Normal_OT_Salary.ToString(), Week_Off_OT_Salary.ToString(), Holiday_OT_Salary.ToString(), Absent_Penalty.ToString(), Late_Penalty_Min.ToString(), Early_Penalty_Min.ToString(), Partial_Penalty_Min.ToString(), Total_Worked_Min.ToString(), Holiday_OT_Min.ToString(), Week_Off_OT_Min.ToString(), Normal_OT_Min.ToString(), Late_Min.ToString(), Early_Min.ToString(), Partial_Min.ToString(), Basic_Work_Salary.ToString(), Normal_OT_Work_Salary.ToString(), WeekOff_OT_Work_Salary.ToString(), Holiday_OT_Work_Salary.ToString(), Week_Off_Days_Salary.ToString(), Holiday_Days_Salary.ToString(), Leave_Days_Salary.ToString(), Absent_Day_Penalty.ToString(), Late_Min_Penalty.ToString(), Early_Min_Penalty.ToString(), Parital_Violation_Penalty.ToString(), Posted_Date.ToString(), "", "", "", "", "", "", "", "", "", "", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(),strTimeZoneId).ToString());
                objPayEmpAtt.InsertPayEmployeeAttendance(strCompanyId, empidlist.Split(',')[i].ToString(), strMonth, strYear, Total_Days.ToString(), Days_In_WorkMin.ToString(), Worked_Days.ToString(), Week_Off_Days.ToString(), Holiday_Days.ToString(), Leave_Days.ToString(), Absent_Days.ToString(), Assigned_Worked_Min.ToString(), Basic_Salary.ToString(), Basic_Min_Salary.ToString(), Normal_OT_Salary.ToString(), Week_Off_OT_Salary.ToString(), Holiday_OT_Salary.ToString(), Absent_Penalty.ToString(), Late_Penalty_Min.ToString(), Early_Min_Penalty.ToString(), Partial_Penalty_Min.ToString(), Total_Worked_Min.ToString(), Holiday_OT_Min.ToString(), Week_Off_OT_Min.ToString(), Normal_OT_Min.ToString(), Late_Min.ToString(), Early_Min.ToString(), Partial_Min.ToString(), Basic_Work_Salary.ToString(), Normal_OT_Work_Salary.ToString(), WeekOff_OT_Work_Salary.ToString(), Holiday_OT_Work_Salary.ToString(), Week_Off_Days_Salary.ToString(), Holiday_Days_Salary.ToString(), Leave_Days_Salary.ToString(), Absent_Day_Penalty.ToString(), Late_Min_Penalty.ToString(), Early_Penalty_Min.ToString(), Parital_Violation_Penalty.ToString(), Posted_Date.ToString(), "", "", "", "", "", "", "", "", "", "", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);


                objPayEmpMonth.UpdateAttendenceRecord_By_EmpId_Monthandyear(empidlist.Split(',')[i].ToString(), strMonth.ToString(), strYear.ToString(), Basic_Work_Salary.ToString(), Normal_OT_Work_Salary.ToString(), WeekOff_OT_Work_Salary.ToString(), Holiday_OT_Work_Salary.ToString(), Leave_Days_Salary.ToString(), Week_Off_Days_Salary.ToString(), Holiday_Days_Salary.ToString(), Absent_Day_Penalty.ToString(), Late_Min_Penalty.ToString(), Early_Min_Penalty.ToString(), Parital_Violation_Penalty.ToString(), ref trns, strCompanyId);
                objPayEmpMonth.Update_posted_Pay_Emp_Month(strCompanyId, empidlist.Split(',')[i].ToString(), strMonth, strYear, Basic_Work_Salary.ToString(), Normal_OT_Work_Salary.ToString(), WeekOff_OT_Work_Salary.ToString(), Holiday_OT_Work_Salary.ToString(), Leave_Days_Salary.ToString(), Week_Off_Days_Salary.ToString(), Holiday_Days_Salary.ToString(), Absent_Day_Penalty.ToString(), Late_Min_Penalty.ToString(), Early_Min_Penalty.ToString(), Parital_Violation_Penalty.ToString(), "0", "0", "0", "0", "0", "0", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "", "", "", "", "0", "0", "0", "0", "0", "0", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
            }
            else
            {
                NonLogProcessedEmp += Common.GetEmployeeCode(empidlist.Split(',')[i].ToString(), _strConString, strCompanyId) + ",";
            }

            //heere we are adding code for add leave balance having is rule true 
            DataTable dtLeaveSummary = Objda.return_DataTable("select Att_Employee_Leave_Trans.Leave_Type_Id,(Case when OT_Leave is NULL then '0' else OT_Leave End) as OT_Leave,Att_Employee_Leave_Trans.Trans_Id,Att_Employee_Leave_Trans.Remaining_Days,Att_Employee_Leave_Trans.Assign_Days,Att_Employee_Leave_Trans.Used_Days,Att_Employee_Leave_Trans.Pending_Days,Att_Employee_Leave_Trans.Previous_Days from Att_Employee_Leave_Trans inner join Set_Att_Employee_Leave on  Att_Employee_Leave_Trans.emp_id= Set_Att_Employee_Leave.Emp_Id and Att_Employee_Leave_Trans.Leave_Type_Id =Set_Att_Employee_Leave.LeaveType_Id  where Att_Employee_Leave_Trans.Emp_Id='" + empidlist.Split(',')[i].ToString() + "' and Set_Att_Employee_Leave.Field4='True' and Att_Employee_Leave_Trans.Field3='Open' and Set_Att_Employee_Leave.IsActive='True'", ref trns);

            string Leavebalance = string.Empty;
            int maxLeaveBalace = 0;

            int totalLogPostedCount = Convert.ToInt32(Objda.return_DataTable("SELECT COUNT(*) from pay_employee_attendance where Emp_Id='" + empidlist.Split(',')[i].ToString() + "' and DATEADD(year, pay_employee_attendance.year-1900, DATEADD(month, pay_employee_attendance.Month-1, DATEADD(day, 1-1, 0)))>='" + FinancialYearStartDate + "' and DATEADD(year, pay_employee_attendance.year-1900, DATEADD(month, pay_employee_attendance.Month-1, DATEADD(day, 1-1, 0)))<='" + FinancialYearEndDate + "'", ref trns).Rows[0][0].ToString());

            foreach (DataRow dr in dtLeaveSummary.Rows)
            {
                double BalanceLeave = Convert.ToDouble(dr["Remaining_Days"].ToString());


                if (BalanceLeave == Convert.ToDouble(dr["Assign_Days"].ToString()))
                {
                    continue;
                }


                //updated by jitendra on 17/11//2017 for get exact balance leave according date of joining
                BalanceLeave = Convert.ToDouble(dr["Previous_Days"].ToString()) + ((Convert.ToDouble(dr["Assign_Days"].ToString()) / 12) * totalLogPostedCount) - Convert.ToDouble(dr["Used_Days"].ToString()) - Convert.ToDouble(dr["Pending_Days"].ToString());
                BalanceLeave += Convert.ToDouble(dr["OT_Leave"].ToString());
                if (BalanceLeave.ToString().Contains("."))
                {
                    Leavebalance = BalanceLeave.ToString().Split('.')[0].ToString();
                }
                else
                {
                    Leavebalance = BalanceLeave.ToString();
                }


                maxLeaveBalace = int.Parse(Objda.return_DataTable("select Field4 from att_leavemaster where Leave_id=" + dr["Leave_Type_Id"].ToString() + "", ref trns).Rows[0][0].ToString());


                if (maxLeaveBalace > 0)
                {

                    if (int.Parse(Leavebalance) > maxLeaveBalace)
                    {
                        Leavebalance = maxLeaveBalace.ToString();
                    }
                }
                //double BalanceLeave = Convert.ToDouble(dr["Remaining_Days"].ToString());

                // BalanceLeave += Convert.ToDouble(dr["Assign_Days"].ToString()) / 12;


                Objda.execute_Command("update Att_Employee_Leave_Trans set Remaining_Days='" + Leavebalance.ToString() + "' where Trans_id=" + dr["Trans_Id"].ToString() + "", ref trns);

            }


        }
        Result = true;


        strResult[0] = Result.ToString();
        strResult[1] = NonLogProcessedEmp;
        return strResult;
    }
    #region GeneratePayroll

    public string GetAmountDecimal(string strAmount, string strCurrencyId)
    {
        return objSys.GetCurencyConversionForInv(strCurrencyId, strAmount);
    }

    public string GetAmountDecimal(string strAmount, ref SqlTransaction trns, string strCurrencyId)
    {
        return objSys.GetCurencyConversionForInv(strCurrencyId, strAmount, ref trns);
    }
    public string GetCalculation(string Value_Type)
    {
        if (Value_Type == "1")
        {
            Value_Type = "Fixed";
        }
        else if (Value_Type == "2")
        {
            Value_Type = "Percentage";

        }
        return Value_Type;
    }
    public void DeletePenaltyByEmployeeIdandPenaltyName(string strCompanyId, string strMonth, string strYear, string strUserId, string strEmpId, string strPenaltyname, ref SqlTransaction trns, string strTimeZoneId)
    {

        DataTable dtPenalty = objPEpenalty.GetRecord_From_PayEmployeePenalty_By_EmpId_MonthandYear(strCompanyId, strEmpId, "", strMonth, strYear, "", "", ref trns);
        for (int i = 0; i < dtPenalty.Rows.Count; i++)
        {


            if (dtPenalty.Rows[i]["Penalty_Name"].ToString().Trim() == strPenaltyname)
            {
                objPEpenalty.DeleteRecord_in_Pay_Employee_penalty(strCompanyId, dtPenalty.Rows[i]["Penalty_Id"].ToString(), "False", strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                break;
            }

        }
    }
    #region SalaryPlanDeduction
    public string[] getEpfDeduction(string strCompanyId, string strBasicSalary, string actualbasicsalary, string strSalaryPlan, string strEmpId, ref SqlTransaction trns, string strBrandId, string strlocationid)
    {


        string[] str = new string[7];
        double ApplicableAmount = 0;
        double Employee_PF = 0;
        double Employer_PF = 0;
        double Employer_FPF = 0;
        double Pf_Applicable_Salary = 0;
        double PF_Inspection_Charges = 0;
        double PF_EDLI = 0;
        double PF_Admin_Charges = 0;
        double DeductionAmount = 0;


        try
        {
            ApplicableAmount = double.Parse(strBasicSalary);
        }
        catch
        {

        }

        try
        {

            Employee_PF = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employee_PF", strCompanyId, strBrandId, strlocationid, ref trns));
        }
        catch
        {
        }


        try
        {
            Employer_PF = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employer_PF", strCompanyId, strBrandId, strlocationid, ref trns));
        }
        catch
        {

        }

        try
        {
            Employer_FPF = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employer_FPF", strCompanyId, strBrandId, strlocationid, ref trns));
        }
        catch
        {

        }

        try
        {
            Pf_Applicable_Salary = double.Parse(objAppParam.GetApplicationParameterValueByParamName("PF_Applicable_Salary", strCompanyId, strBrandId, strlocationid, ref trns));
        }
        catch
        {

        }

        try
        {
            PF_Inspection_Charges = double.Parse(objAppParam.GetApplicationParameterValueByParamName("PF_Inspection_Charges", strCompanyId, strBrandId, strlocationid, ref trns));
        }
        catch
        {

        }
        try
        {
            PF_EDLI = double.Parse(objAppParam.GetApplicationParameterValueByParamName("PF_EDLI", strCompanyId, strBrandId, strlocationid, ref trns));
        }
        catch
        {

        }
        try
        {
            PF_Admin_Charges = double.Parse(objAppParam.GetApplicationParameterValueByParamName("PF_Admin_Charges", strCompanyId, strBrandId, strlocationid, ref trns));
        }
        catch
        {

        }


        string strDeductionId = GetDeductionIdbyDeductionType(strCompanyId, "PF", ref trns);


        ApplicableAmount = getApplicableAmountByDeductionId(strCompanyId, strBasicSalary, strSalaryPlan, strDeductionId, strEmpId, ref trns);
        DeductionAmount = getdeductionAmountByDeductionIdandEmployeeeId(actualbasicsalary, strSalaryPlan, strDeductionId, strEmpId, ref trns);


        if (ApplicableAmount <= Pf_Applicable_Salary)
        {
            str[0] = ((DeductionAmount * Employee_PF) / 100).ToString();
            str[1] = ((DeductionAmount * Employer_PF) / 100).ToString();
            str[2] = ((DeductionAmount * Employer_FPF) / 100).ToString();
            str[3] = ((DeductionAmount * PF_Inspection_Charges) / 100).ToString();
            str[4] = ((DeductionAmount * PF_EDLI) / 100).ToString();
            str[5] = ((DeductionAmount * PF_Admin_Charges) / 100).ToString();
            str[6] = DeductionAmount.ToString();

        }
        else
        {
            str[0] = "0";
            str[1] = "0";
            str[2] = "0";
            str[3] = "0";
            str[4] = "0";
            str[5] = "0";
            str[6] = DeductionAmount.ToString();

        }

        return str;
    }

    public string[] getESICDeduction(string strCompanyId, string strBasicSalary, string actualbasicsalary, string strSalaryPlan, string strEmpId, ref SqlTransaction trns, string strBrandId, string strlocationid)
    {



        string[] str = new string[3];
        double ApplicableAmount = 0;
        double DeductionAmount = 0;
        double ESIC_Applicable_Salary = 0;
        double Employee_ESIC = 0;
        double Employer_ESIC = 0;



        try
        {
            ApplicableAmount = double.Parse(strBasicSalary);
        }
        catch
        {

        }

        try
        {

            Employee_ESIC = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employee_ESIC", strCompanyId, strBrandId, strlocationid, ref trns));
        }
        catch
        {
        }
        try
        {
            Employer_ESIC = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employer_ESIC", strCompanyId, strBrandId, strlocationid, ref trns));
        }
        catch
        {

        }

        try
        {
            ESIC_Applicable_Salary = double.Parse(objAppParam.GetApplicationParameterValueByParamName("ESIC_Applicable_Salary", strCompanyId, strBrandId, strlocationid, ref trns));
        }
        catch
        {

        }



        string strDeductionId = GetDeductionIdbyDeductionType(strCompanyId, "ESIC", ref trns);


        ApplicableAmount = getApplicableAmountByDeductionId(strCompanyId, strBasicSalary, strSalaryPlan, strDeductionId, strEmpId, ref trns);

        DeductionAmount = getdeductionAmountByDeductionIdandEmployeeeId(actualbasicsalary, strSalaryPlan, strDeductionId, strEmpId, ref trns);



        if (ApplicableAmount <= ESIC_Applicable_Salary)
        {
            str[0] = ((DeductionAmount * Employee_ESIC) / 100).ToString();
            str[1] = ((DeductionAmount * Employer_ESIC) / 100).ToString();
            str[2] = DeductionAmount.ToString();
        }
        else
        {
            str[0] = "0";
            str[1] = "0";
            str[2] = DeductionAmount.ToString();
        }


        return str;
    }



    public string[] getTDSdeduction(string strCompanyId, string strMonth, string strYear, double GrossSalary, string strBasicSalary, string actualbasicsalary, string strEpfAmount, string strSalaryPlan, string Dob, string strEmpId, double ArrearAmt, double PreviousEmployerTotalEarning, double PreviousEmployerTotalTDS, double SeniorCitizenagelimit, DateTime FinancialYearStartDate, DateTime FinancialYearEndDate, DateTime DOJ, ref SqlTransaction trns, string strTimeZoneId)
    {

        string[] str = new string[2];
        string strDeductionId = GetDeductionIdbyDeductionType(strCompanyId, "TDS", ref trns);
        DateTime dtCurrentMonth = new DateTime(Convert.ToInt32(strYear), Convert.ToInt32(strMonth), 1);
        double TDSAmt = 0;
        double ApplicableAmount = 0;
        double EpfAmount = 0;
        bool IsSeniorCitizen = false;
        double EmployerTotalTDS = 0;
        double DeductionAmount = 0;

        double EmployeeAge = (Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId) - Convert.ToDateTime(Dob)).TotalDays / 365;

        DeductionAmount = getdeductionAmountByDeductionIdandEmployeeeId(actualbasicsalary, strSalaryPlan, strDeductionId, strEmpId, ref trns);

        DeductionAmount = (DeductionAmount - Convert.ToDouble(strEpfAmount) + ArrearAmt);

        if (EmployeeAge > SeniorCitizenagelimit)
        {
            IsSeniorCitizen = true;
        }
        //first we need to get financial year start date and end date according set in company parameter

        //here we are checking that if this is start date month 

        if (strMonth == FinancialYearStartDate.Month.ToString() && strYear == FinancialYearStartDate.Year.ToString())
        {

            ApplicableAmount = (GrossSalary * 12);

            TDSAmt = getTDSAmountByApplicableAmount(ApplicableAmount, strDeductionId, IsSeniorCitizen, false, ref trns);
        }
        else if (strMonth == FinancialYearEndDate.Month.ToString() && strYear == FinancialYearEndDate.Year.ToString())
        {
            ApplicableAmount = GetPreviousMonthTotalEarning(strEmpId, strDeductionId, FinancialYearStartDate, FinancialYearEndDate, ref trns);
            if (FinancialYearStartDate < DOJ && FinancialYearEndDate >= DOJ)
            {
                ApplicableAmount += PreviousEmployerTotalEarning;
                EmployerTotalTDS = PreviousEmployerTotalTDS;
            }


            TDSAmt = getTDSAmountByApplicableAmount((ApplicableAmount + DeductionAmount), strDeductionId, IsSeniorCitizen, true, ref trns) - (GetTotalTDS(strEmpId, strDeductionId, FinancialYearStartDate, FinancialYearEndDate, ref trns) + EmployerTotalTDS);

        }
        else
        {
            ApplicableAmount = GetPreviousMonthTotalEarning(strEmpId, strDeductionId, FinancialYearStartDate, FinancialYearEndDate, ref trns);
            if (FinancialYearStartDate < DOJ && FinancialYearEndDate >= DOJ)
            {
                ApplicableAmount += PreviousEmployerTotalEarning;
            }

            TDSAmt = getTDSAmountByApplicableAmount(((GrossSalary * getMonthDifference(dtCurrentMonth, FinancialYearEndDate)) + ApplicableAmount - EpfAmount), strDeductionId, IsSeniorCitizen, false, ref trns);

        }



        if (DeductionAmount < TDSAmt || TDSAmt < 0)
        {
            TDSAmt = 0;
        }
        str[0] = TDSAmt.ToString();
        str[1] = DeductionAmount.ToString();

        //th

        return str;

    }


    public double GetTotalTDS(string strEmpId, string strdeductionId, DateTime FinanceStartDate, DateTime FinanceEndDate, ref SqlTransaction trns)
    {
        DataTable dtPreviousMonth = new DataTable();
        double PreviousMonthTotalEarning = 0;

        dtPreviousMonth = da.return_DataTable("select isnull( sum( CAST(Pay_Employe_Deduction.Act_Deduction_Value as Decimal(18,3)) ),0) as TotalEarning from Pay_Employe_Deduction where CAST( CAST(Pay_Employe_Deduction.Year AS VARCHAR(4)) + RIGHT('0' + CAST(Pay_Employe_Deduction.Month AS VARCHAR(2)), 2) + RIGHT('0' + CAST(1 AS VARCHAR(2)), 2) AS DATETIME) >='" + FinanceStartDate + "' and CAST( CAST(Pay_Employe_Deduction.Year AS VARCHAR(4)) + RIGHT('0' + CAST(Pay_Employe_Deduction.Month AS VARCHAR(2)), 2) + RIGHT('0' + CAST(1 AS VARCHAR(2)), 2) AS DATETIME) <='" + FinanceEndDate + "' and Pay_Employe_Deduction.Emp_Id=" + strEmpId + " and Pay_Employe_Deduction.Deduction_Id=" + strdeductionId + "", ref trns);

        if (dtPreviousMonth.Rows.Count > 0)
        {
            PreviousMonthTotalEarning = Convert.ToDouble(dtPreviousMonth.Rows[0]["TotalEarning"].ToString());

        }
        dtPreviousMonth.Dispose();
        return PreviousMonthTotalEarning;
    }

    public int getMonthDifference(DateTime dtFromdate, DateTime dtTodate)
    {
        int TotalMonth = 0;

        while (dtFromdate <= dtTodate)
        {
            TotalMonth++;
            dtFromdate = dtFromdate.AddMonths(1);
        }

        return TotalMonth;
    }


    public double GetPreviousMonthTotalEarning(string strEmpId, string strdeductionId, DateTime FinanceStartDate, DateTime FinanceEndDate, ref SqlTransaction trns)
    {
        DataTable dtPreviousMonth = new DataTable();
        double PreviousMonthTotalEarning = 0;

        dtPreviousMonth = da.return_DataTable("select isnull( sum( CAST(Pay_Employe_Deduction.Field1 as Decimal(18,3)) ),0) as TotalEarning from Pay_Employe_Deduction where CAST( CAST(Pay_Employe_Deduction.Year AS VARCHAR(4)) + RIGHT('0' + CAST(Pay_Employe_Deduction.Month AS VARCHAR(2)), 2) + RIGHT('0' + CAST(1 AS VARCHAR(2)), 2) AS DATETIME) >='" + FinanceStartDate + "' and CAST( CAST(Pay_Employe_Deduction.Year AS VARCHAR(4)) + RIGHT('0' + CAST(Pay_Employe_Deduction.Month AS VARCHAR(2)), 2) + RIGHT('0' + CAST(1 AS VARCHAR(2)), 2) AS DATETIME) <='" + FinanceEndDate + "' and Pay_Employe_Deduction.Emp_Id=" + strEmpId + " and Pay_Employe_Deduction.Deduction_Id=" + strdeductionId + "", ref trns);

        if (dtPreviousMonth.Rows.Count > 0)
        {
            PreviousMonthTotalEarning = Convert.ToDouble(dtPreviousMonth.Rows[0]["TotalEarning"].ToString());

        }
        dtPreviousMonth.Dispose();
        return PreviousMonthTotalEarning;
    }


    public string[] getProfessionalTaxdeduction(string strCompanyId, string strBasicSalary, string actualbasicsalary, string strSalaryPlan, string Dob, string strEmpId, ref SqlTransaction trns, string strTimeZoneId, string strBrandid, string strLocationId)
    {

        string[] str = new string[2];


        double ApplicableAmount = 0;

        double SeniorCitizenagelimit = 0;
        double DeductionAmount = 0;


        try
        {
            SeniorCitizenagelimit = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Senior_Citizen_Age_Limit", strCompanyId, strBrandid, strLocationId, ref trns));
        }
        catch
        {

        }

        string strDeductionId = GetDeductionIdbyDeductionType(strCompanyId, "PT", ref trns);


        ApplicableAmount = getApplicableAmountByDeductionId(strCompanyId, strBasicSalary, strSalaryPlan, strDeductionId, strEmpId, ref trns);


        DeductionAmount = getdeductionAmountByDeductionIdandEmployeeeId(actualbasicsalary, strSalaryPlan, strDeductionId, strEmpId, ref trns);

        ApplicableAmount = (ApplicableAmount) * 12;


        //here we are checking that selected employee is senior citizen or general 



        double EmployeeAge = (Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId) - Convert.ToDateTime(Dob)).TotalDays / 365;



        if (EmployeeAge > SeniorCitizenagelimit)
        {
            str[0] = getDeductionAmountByDeductionId(ApplicableAmount.ToString(), strDeductionId, true, DeductionAmount.ToString(), ref trns);
        }
        else
        {
            str[0] = getDeductionAmountByDeductionId(ApplicableAmount.ToString(), strDeductionId, false, DeductionAmount.ToString(), ref trns);
        }

        str[1] = ApplicableAmount.ToString();

        //th

        return str;

    }




    public string getDeductionAmountByDeductionId(string strAmount, string strDeductionId, bool IsSeniorCitizen, string strDeductionAmount, ref SqlTransaction trns)
    {
        string strdeductionAmount = "0";

        DataTable dt = new DataTable();
        //select calculation_type,value from set_deductiondetail where From_Amount <= 0 and To_Amount >= 0 and header_id=0 and Is_Senior_Citizen='True'

        if (IsSeniorCitizen)
        {
            dt = da.return_DataTable("select calculation_type,value from set_deductiondetail where From_Amount <= " + strAmount + " and To_Amount >=" + strAmount + " and header_id=" + strDeductionId + " and Is_Senior_Citizen='True'", ref trns);
        }
        else
        {
            dt = da.return_DataTable("select calculation_type,value from set_deductiondetail where From_Amount <= " + strAmount + " and To_Amount >=" + strAmount + " and header_id=" + strDeductionId + " and Is_Senior_Citizen='False'", ref trns);
        }


        if (dt.Rows.Count > 0)
        {
            if (dt.Rows[0]["calculation_type"].ToString() == "Fixed")
            {

                strdeductionAmount = dt.Rows[0]["value"].ToString();
            }
            else
            {
                strdeductionAmount = ((Convert.ToDouble(strDeductionAmount) * Convert.ToDouble(dt.Rows[0]["value"].ToString())) / 100).ToString();
            }
        }



        return strdeductionAmount;



    }

    public double getTDSAmountByApplicableAmount(double ApplicableAmount, string strDeductionId, bool IsSeniorCitizen, bool IsYearEndMonth, ref SqlTransaction trns)
    {

        double TDSAmt = 0;

        double TdsApplicableslabamt = 0;
        DataTable dt = new DataTable();
        //select calculation_type,value from set_deductiondetail where From_Amount <= 0 and To_Amount >= 0 and header_id=0 and Is_Senior_Citizen='True'


        dt = da.return_DataTable("select calculation_type,value,To_Amount,From_Amount from set_deductiondetail where  header_id=" + strDeductionId + " and Is_Senior_Citizen='" + IsSeniorCitizen.ToString() + "'", ref trns);

        foreach (DataRow dr in dt.Rows)
        {
            TdsApplicableslabamt = 0;
            if (ApplicableAmount > Convert.ToDouble(dr["To_Amount"].ToString()))
            {
                TdsApplicableslabamt = Convert.ToDouble(dr["To_Amount"].ToString()) - Convert.ToDouble(dr["From_Amount"].ToString());
                TDSAmt += (TdsApplicableslabamt * Convert.ToDouble(dr["value"].ToString())) / 100;

            }
            else
            {
                TdsApplicableslabamt = ApplicableAmount - Convert.ToDouble(dr["From_Amount"].ToString());
                TDSAmt += (TdsApplicableslabamt * Convert.ToDouble(dr["value"].ToString())) / 100;
                break;
            }
        }
        if (IsYearEndMonth)
        {
            TDSAmt = Math.Round(TDSAmt, 0);

        }
        else
        {
            TDSAmt = Math.Round(TDSAmt / 12, 0);
        }

        return TDSAmt;
    }



    public string GetDeductionIdbyDeductionType(string strCompanyId, string strType, ref SqlTransaction trns)
    {
        string strDeductionId = "0";

        DataTable dt = ObjDeduc.GetDeductionTrueAll(strCompanyId, ref trns);

        dt = new DataView(dt, "Field1='" + strType + "'", "", DataViewRowState.CurrentRows).ToTable();

        if (dt.Rows.Count > 0)
        {
            strDeductionId = dt.Rows[0]["Deduction_Id"].ToString();

        }
        return strDeductionId;
    }


    public double getApplicableAmountByDeductionId(string strCompanyId, string strBasicSalary, string strSalaryPlanId, string strDeductionId, string strEmpId, ref SqlTransaction trns)
    {
        double strApplicableAmount = 0;
        double BasicSalary = 0;
        DataTable dtTemp = new DataTable();
        double GrossAmount = 0;
        try
        {
            BasicSalary = Convert.ToDouble(strBasicSalary);
        }
        catch
        {

        }

        DataTable dtparam = objempparam.GetEmployeeParameterByEmpId(strEmpId, strCompanyId, ref trns);


        if (dtparam.Rows.Count > 0)
        {

            GrossAmount = Convert.ToDouble(dtparam.Rows[0]["Gross_Salary"].ToString());


        }

        strApplicableAmount += BasicSalary;

        DataTable dt = objsalaryPlan.GetApplicableAllowance_By_headerId_and_deductionId(strSalaryPlanId, strDeductionId);


        dtTemp = new DataView(dt, "Field1='False'", "", DataViewRowState.CurrentRows).ToTable();
        foreach (DataRow dr in dtTemp.Rows)
        {


            if (dr["Calculation_Method"].ToString() == "Fixed")
            {
                strApplicableAmount += Convert.ToDouble(dr["Value"].ToString());
            }
            else
            {
                try
                {
                    strApplicableAmount += (BasicSalary * Convert.ToDouble(dr["Value"].ToString())) / 100;
                }
                catch
                {

                }

            }

        }

        dtTemp = new DataView(dt, "Field1='True'", "", DataViewRowState.CurrentRows).ToTable();

        if (dtTemp.Rows.Count > 0)
        {

            if ((GrossAmount - strApplicableAmount) > 0)
            {

                strApplicableAmount += (GrossAmount - strApplicableAmount);

            }

        }

        dtTemp.Dispose();
        dt.Dispose();
        return strApplicableAmount;

    }


    public double getdeductionAmountByDeductionIdandEmployeeeId(string strBasicSalary, string strSalaryPlanId, string strDeductionId, string strEmpId, ref SqlTransaction trns)
    {
        double strApplicableAmount = 0;
        double BasicSalary = 0;

        try
        {
            BasicSalary = Convert.ToDouble(strBasicSalary);
        }
        catch
        {

        }


        strApplicableAmount += BasicSalary;

        DataTable dt = objsalaryPlan.GetApplicableAllowance_By_headerId_and_deductionId(strSalaryPlanId, strDeductionId, ref trns);

        foreach (DataRow dr in dt.Rows)
        {


            DataTable dtAlllowaance = da.return_DataTable("select Allowance_Value from Pay_Employe_Allowance_Temp where Emp_Id=" + strEmpId + " and Allowance_Id=" + dr["ref_Id"].ToString() + "", ref trns);



            if (dtAlllowaance.Rows.Count > 0)
            {
                try
                {
                    strApplicableAmount += Convert.ToDouble(dtAlllowaance.Rows[0]["Allowance_Value"].ToString());
                }
                catch
                {

                }
            }


        }





        return strApplicableAmount;

    }




    public void insertAllowance_using_SalaryPlan(string strCompanyId, string strUserId, string strSalaryPlanId, string strEmployeeId, string strGrossAmount, double BasicSalary, ref SqlTransaction trns, string strTimeZoneId)
    {
        double GrossAmt = 0;
        double RowAmount = 0;
        try
        {
            GrossAmt = Convert.ToDouble(strGrossAmount);
        }
        catch
        {

        }
        DataTable dtsalaryPlanAll = objsalaryplandetail.GetDeduction_By_headerId(strSalaryPlanId, ref trns);


        DataTable dtsalaryPlan = new DataView(dtsalaryPlanAll, "Field1='False'", "", DataViewRowState.CurrentRows).ToTable();
        //  dttDetail = dttDetail.DefaultView.ToTable(true, "Trans_Id", "Ref_Id", "Calculation_Method", "Value", "Amount", "Deduction_Applicable");

        foreach (DataRow dr in dtsalaryPlan.Rows)
        {

            string strCalcmethod = string.Empty;
            if (dr["Calculation_Method"].ToString() == "Fixed")
            {
                strCalcmethod = "1";


                RowAmount += Convert.ToDouble(dr["Value"].ToString());
            }
            else
            {
                strCalcmethod = "2";

                RowAmount += (BasicSalary * Convert.ToDouble(dr["Value"].ToString())) / 100;
            }


            ObjAllDeduc.InsertPayEmpAllowDeduc(strCompanyId, strEmployeeId, "1", dr["ref_id"].ToString(), "Monthly", strCalcmethod, dr["Value"].ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);


        }

        if ((GrossAmt - (BasicSalary + RowAmount)) > 0)
        {

            dtsalaryPlan = new DataView(dtsalaryPlanAll, "Field1='True'", "", DataViewRowState.CurrentRows).ToTable();


            if (dtsalaryPlan.Rows.Count > 0)
            {
                ObjAllDeduc.InsertPayEmpAllowDeduc(strCompanyId, strEmployeeId, "1", dtsalaryPlan.Rows[0]["Ref_Id"].ToString(), "Monthly", "1", (GrossAmt - (BasicSalary + RowAmount)).ToString(), "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);

            }
        }
    }





    #endregion
    public DataTable GetEmpAllowDedu(string strCompanyId, int EmpId)
    {

        DataTable DtAllDeduc = new DataTable();

        // Get Record all Alllowance & Deduction of this Employee

        DataTable dtEmp = new DataTable();
        dtEmp = ObjAllDeduc.GetPayAllowDeducByEmpId(strCompanyId, EmpId.ToString());

        return dtEmp;
    }

    public DataTable GetEmpAllowDedu(string strCompanyId, int EmpId, ref SqlTransaction trns)
    {

        DataTable DtAllDeduc = new DataTable();

        // Get Record all Alllowance & Deduction of this Employee

        DataTable dtEmp = new DataTable();
        dtEmp = ObjAllDeduc.GetPayAllowDeducByEmpId(strCompanyId, EmpId.ToString(), ref trns);

        return dtEmp;
    }
    public double GetMobileExceedAmount(string strCompanyId, string strBrandId, string strLocationId, string strUserId, string strMonth, string strYear, string strEmpId, string strMobileNumber, string strMobileLimit, ref SqlTransaction trns, string strTimeZoneId)
    {
        double ExceedAmount = 0;
        double MobileLimit = 0;
        double MobileBill = 0;
        Pay_MobileBillPayment ObjMobilePayment = new Pay_MobileBillPayment(_strConString);


        DataTable dt = ObjMobilePayment.GetRecordByMobileNumber(strCompanyId, strMobileNumber, ref trns);

        dt = new DataView(dt, "Month='" + strMonth + "' and year='" + strYear + "'", "", DataViewRowState.CurrentRows).ToTable();

        if (dt.Rows.Count > 0)
        {

            try
            {
                MobileBill = Convert.ToDouble(dt.Rows[0]["Bill_Amount"].ToString());
            }
            catch
            {

            }

            try
            {
                MobileLimit = Convert.ToDouble(strMobileLimit);
            }
            catch
            {

            }

            if (MobileBill > MobileLimit)
            {
                ExceedAmount = MobileBill - MobileLimit;


                ObjMobilePayment.UpdateRecord(strCompanyId, strBrandId, strLocationId, dt.Rows[0]["Trans_Id"].ToString(), strEmpId, dt.Rows[0]["Mobile_Number"].ToString(), dt.Rows[0]["Month"].ToString(), dt.Rows[0]["Year"].ToString(), dt.Rows[0]["Bill_Amount"].ToString(), MobileLimit.ToString(), ExceedAmount.ToString(), dt.Rows[0]["Ref_Id"].ToString(), dt.Rows[0]["Operator"].ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), false.ToString(), ref trns);

            }

        }


        return ExceedAmount;
    }
    public bool GeneratePayroll(string strcompanyId, string strBrandId, string strLocationId, string strMonth, string strYear, string strMonthName, string strUserId, string EmpLIst, bool IsLoanSettlement, ref SqlTransaction trns, string strTimeZoneId, string strCurrencyId)
    {
        bool Result = false;

        strMonthName = GetMonthName(Convert.ToInt32(strMonth));
        bool IndemnityStatus = false;
        bool IsIndemnity = false;
        int IndemnityDays = 0;
        int IndemnityGivenType = 0;
        double Total_Days = 0;
        double Employee_PF = 0;
        double Employer_PF = 0;
        double Employee_ESIC = 0;
        double Employer_ESIC = 0;
        double MobileLimit = 0;
        string strMobileNumber = string.Empty;
        double PreviousEmployerTotalEarning = 0;
        double PreviousEmployerTotalTDS = 0;
        double SeniorCitizenagelimit = 0;
        DateTime Doj = new DateTime();


        //...........................................
        try
        {

            Employee_PF = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employee_PF", strcompanyId, strBrandId, strLocationId, ref trns));
        }
        catch
        {
        }
        try
        {
            Employer_PF = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employer_PF", strcompanyId, strBrandId, strLocationId, ref trns));
        }
        catch
        {

        }
        try
        {
            Employee_ESIC = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employee_ESIC", strcompanyId, strBrandId, strLocationId, ref trns));
        }
        catch
        {

        }
        try
        {
            Employer_ESIC = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employer_ESIC", strcompanyId, strBrandId, strLocationId, ref trns));
        }
        catch
        {

        }

        try
        {
            SeniorCitizenagelimit = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Senior_Citizen_Age_Limit", strcompanyId, strBrandId, strLocationId, ref trns));
        }
        catch
        {

        }



        DataTable dt = objAppParam.GetApplicationParameterByParamName("FinancialYearStartMonth", strcompanyId, ref trns, strBrandId, strLocationId);
        int FinancialYearMonth = 0;

        if (dt.Rows.Count > 0)
        {
            FinancialYearMonth = int.Parse(dt.Rows[0]["Param_Value"].ToString());
        }

        DateTime FinancialYearStartDate = new DateTime();
        DateTime FinancialYearEndDate = new DateTime();
        if (Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Month < FinancialYearMonth)
        {
            FinancialYearStartDate = new DateTime(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Year - 1, FinancialYearMonth, 1);
            FinancialYearEndDate = FinancialYearStartDate.AddYears(1).AddDays(-1);
        }
        else
        {
            FinancialYearStartDate = new DateTime(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Year, FinancialYearMonth, 1);
            FinancialYearEndDate = FinancialYearStartDate.AddYears(1).AddDays(-1);
        }


        double sumpenalty = 0;
        double sum = 0;
        double sumallow = 0;
        double sumdeduc = 0;
        double sumloan = 0;
        int b = 0;
        int a = 0;
        int mainflag = 0;

        int monthclaim = 0;
        int yearclaim = 0;
        double totaldueamt;
        double dueamt = 0;
        double dueamtt = 0;
        bool IsLeaveSalary = false;
        double basicsal = 0;
        double Actualbasicsal = 0;
        double Grossamt = 0;
        bool IsCtc = false;

        double ArrearAmt = 0;
        DataTable dtEmpPay = GetTable();

        string TransNo = string.Empty;

        DataAccessClass objDA = new DataAccessClass(_strConString);
        Total_Days = DateTime.DaysInMonth(Convert.ToInt32(strYear), Convert.ToInt32(strMonth));

        foreach (string str in EmpLIst.Split(','))
        {
            if ((str != ""))
            {


                try
                {

                    strMobileNumber = objEmp.GetEmployeeMasterById(strcompanyId, str, ref trns).Rows[0]["Company_phone_no"].ToString();
                }
                catch
                {

                }

                bool IsPF = false;
                bool IsEsIc = false;
                double workeddaysPercentage = 0;
                double Pf_Applicable_Amount = 0;
                double Employee_Pf_Amount = 0;
                double Employer_Pf_Amount = 0;
                double Employer_FPF = 0;
                double Employer_PF_Admin_Charges = 0;
                double Employer_PF_EDLI = 0;
                double Employer_PF_Inspection_Charges = 0;


                double Esic_Applicable_Amount = 0;
                double Employee_Esic_Amount = 0;
                double Employer_Esic_Amount = 0;

                double TdsAmount = 0;
                double Tds_applicable_Amount = 0;

                double PT = 0;
                double PT_applicable_Amount = 0;

                string strSalaryPlanId = "0";

                string strDob = string.Empty;


                strDob = objEmp.GetEmployeeMasterById(strcompanyId, str, ref trns).Rows[0]["DOB"].ToString();


                double PerDaySal = 0;
                DataTable dtemppara = new DataTable();
                double TotalLDays = 0;
                double UsedLeaveDays = 0;
                int TotalWorkedDays = 0;
                double PerDayLeave = 0;
                double WorkDaysSal = 0;
                double ValidLeaveDays = 0;
                dtemppara = objEmpParam.GetEmployeeParameterByEmpId(str, strcompanyId, ref trns);
                try
                {
                    basicsal = Convert.ToDouble(dtemppara.Rows[0]["Basic_Salary"].ToString());
                }
                catch
                {


                }

                try
                {

                    Grossamt = Convert.ToDouble(dtemppara.Rows[0]["Gross_Salary"].ToString());
                }
                catch
                {

                }

                PerDaySal = basicsal / Total_Days;
                DataTable DTDOJ = objAttendance.GetEmployeeDOJ(strcompanyId, str, ref trns);

                if (DTDOJ.Rows.Count > 0)
                {
                    Doj = Convert.ToDateTime(DTDOJ.Rows[0]["Doj"].ToString());
                }
                if (dtemppara.Rows.Count > 0)
                {
                    strSalaryPlanId = dtemppara.Rows[0]["Salary_Plan_Id"].ToString();

                    if (strSalaryPlanId.Trim() == "")
                    {
                        strSalaryPlanId = "0";
                    }

                    IsCtc = Convert.ToBoolean(dtemppara.Rows[0]["IsCtc_Employee"].ToString());
                    try
                    {
                        MobileLimit = Convert.ToDouble(dtemppara.Rows[0]["Mobilebill_Limit"].ToString());
                    }
                    catch
                    {

                    }

                    try
                    {
                        PreviousEmployerTotalEarning = Convert.ToDouble(dtemppara.Rows[0]["Previous_Employer_Earning"].ToString());
                    }
                    catch
                    {


                    }

                    try
                    {
                        PreviousEmployerTotalTDS = Convert.ToDouble(dtemppara.Rows[0]["Previous_Employer_TDS"].ToString());
                    }
                    catch
                    {


                    }



                    basicsal = Convert.ToDouble(dtemppara.Rows[0]["Basic_Salary"].ToString());
                    try
                    {
                        IsPF = Convert.ToBoolean(dtemppara.Rows[0]["Field4"].ToString());
                    }
                    catch
                    {

                    }
                    try
                    {
                        IsEsIc = Convert.ToBoolean(dtemppara.Rows[0]["Field5"].ToString());
                    }
                    catch
                    {

                    }

                }



                //here we are inserting row in employee allowance and deduction part according selected salry plan for selected employee


                if (Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsSalaryPlanEnable", strcompanyId, strBrandId, strLocationId, ref trns)))
                {
                    //fisrt we will delete old record then insert new
                    objDA.execute_Command("delete from Pay_Employee_Allow_Deduction where Emp_Id=" + str + " and type=1", ref trns);
                    insertAllowance_using_SalaryPlan(strcompanyId, strUserId, strSalaryPlanId, str, Grossamt.ToString(), basicsal, ref trns, strTimeZoneId);

                }
                //here we insert the row in pay_employee_attendence table with current month and current year
                //this code is update on 05-04-2014
                DataTable DtEmpAttendence = objPayEmpAtt.GetRecord_Emp_Attendance(str, strMonth, strYear, ref trns, strcompanyId);
                if (DtEmpAttendence.Rows.Count == 0)
                {

                    DataTable dtobjempdetail = objEmpDetail.GetAllTrueRecord(ref trns);
                    try
                    {
                        dtobjempdetail = new DataView(dtobjempdetail, "Emp_Id=" + str + " and Month=" + strMonth + " and Year=" + strYear + "", "", DataViewRowState.CurrentRows).ToTable();
                    }
                    catch
                    {
                    }
                    if (dtobjempdetail.Rows.Count > 0)
                    {
                        objPayEmpAtt.InsertPayEmployeeAttendance(strcompanyId, str, strMonth, strYear, Math.Round(float.Parse(dtobjempdetail.Rows[0]["Total_Days"].ToString()), 0).ToString(), "0", Math.Round(float.Parse(dtobjempdetail.Rows[0]["Present_Days"].ToString()), 0).ToString(), Math.Round(float.Parse(dtobjempdetail.Rows[0]["WeekOff_Days"].ToString()), 0).ToString(), Math.Round(float.Parse(dtobjempdetail.Rows[0]["Holiday_Days"].ToString()), 0).ToString(), Math.Round(float.Parse(dtobjempdetail.Rows[0]["Leave_Days"].ToString()), 0).ToString(), Math.Round(float.Parse(dtobjempdetail.Rows[0]["Absent_Days"].ToString()), 0).ToString(), "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "", "", "", "", "", "", "", "", "", "", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);

                    }
                    else
                    {
                        objPayEmpAtt.InsertPayEmployeeAttendance(strcompanyId, str, strMonth, strYear, "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "", "", "", "", "", "", "", "", "", "", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);

                    }
                }
                else
                {

                }

                //this code for delete the record from due payment table using empid month and year
                objEmpDuePay.DeleteEmp_Due_paymentByEmpId_MonthandYear(strcompanyId, str, strMonth, strYear, strcompanyId, "", "2", ref trns);



                DataTable dtEmpMonth = new DataTable();

                // Pay_Employe_Month_Temp: Get Data Of Employee
                dtEmpMonth = objPayEmpMonth.GetPayEmpMonthTemp_By_EmployeeId(str, ref trns, strcompanyId);
                dtEmpMonth = new DataView(dtEmpMonth, "Month='" + strMonth + "' and Year='" + strYear + "'", "", DataViewRowState.CurrentRows).ToTable();
                int m = 0;
                if (dtEmpMonth.Rows.Count > 0)
                {
                    // Here Delete From Master And Child Table Record 
                    // If Same Month And Year Record
                    m = objPayEmpMonth.DeleteEmpMonthTemp_By_EmpId_MonthandYear(strcompanyId, str, strMonth, strYear, ref trns);
                    a = objpayrolldeduc.DeletePayDeductionTemp_By_EmpId_MonthandYear(str, strMonth, strYear, ref trns);
                    b = objpayrollall.DeletePayAllowanceTemp_By_EmpId_MonthandYear(str, strMonth, strYear, ref trns);

                }


                int WorkDays = 0;
                sumpenalty = 0;
                sum = 0;
                sumallow = 0;
                sumdeduc = 0;

                int ma = objPayEmpMonth.Insert_Pay_Employee_Month_Temp(strcompanyId, str, strMonth.ToString(), strYear, "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ref trns);
                // Get Trans Id of thie Employee acc to EmpId,Month,Year = Ref id of allowance and Deduction Temp
                // Get Employee Allowance


                Pay_Employee_Attendance objPay = new Pay_Employee_Attendance(_strConString);

                DataTable dtPay = new DataTable();
                try
                {
                    dtPay = objPay.GetRecord_Emp_Attendance(str, strMonth, strYear, ref trns, strcompanyId);

                }
                catch
                {

                }

                if (dtPay.Rows.Count > 0)
                {
                    WorkDays = int.Parse(dtPay.Rows[0]["Worked_Days"].ToString()) + int.Parse(dtPay.Rows[0]["Week_Off_Days"].ToString()) + int.Parse(dtPay.Rows[0]["Holiday_Days"].ToString()) + int.Parse(dtPay.Rows[0]["Leave_Days"].ToString());


                    Actualbasicsal = PerDaySal * WorkDays;

                    Actualbasicsal = Convert.ToDouble(dtPay.Rows[0]["Basic_Work_Salary"].ToString()) + Convert.ToDouble(dtPay.Rows[0]["Normal_OT_Work_Salary"].ToString()) + Convert.ToDouble(dtPay.Rows[0]["WeekOff_OT_Work_Salary"].ToString()) + Convert.ToDouble(dtPay.Rows[0]["Holiday_OT_Work_Salary"].ToString()) + Convert.ToDouble(dtPay.Rows[0]["Leave_Days_Salary"].ToString()) + Convert.ToDouble(dtPay.Rows[0]["Week_Off_Days_Salary"].ToString()) + Convert.ToDouble(dtPay.Rows[0]["Holiday_Days_Salary"].ToString()) - Convert.ToDouble(dtPay.Rows[0]["Absent_Day_Penalty"].ToString()) - Convert.ToDouble(dtPay.Rows[0]["Late_Min_Penalty"].ToString()) - Convert.ToDouble(dtPay.Rows[0]["Early_Min_Penalty"].ToString()) - Convert.ToDouble(dtPay.Rows[0]["Parital_Violation_Penalty"].ToString());

                    workeddaysPercentage = (Actualbasicsal * 100) / basicsal;
                }



                //if (Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsSalaryPlanEnable", strcompanyId)))
                //{

                //    //fisrt we will delete old record then insert new
                //    objDA.execute_Command("delete from Pay_Employee_Allow_Deduction where Emp_Id=" + str + " and type=1");


                //    if (strSalaryPlanId != "0")
                //    {
                //        insertAllowance_using_SalaryPlan(strSalaryPlanId, str, Grossamt, basicsal, Actualbasicsal, Total_Days, WorkDays);
                //    }


                //}

                if (Total_Days == 0)
                {
                    Total_Days = 1;
                }


                //this code fro insert the record in allowance_temp table from pay_allow_deduction table
                //where we filter the record type=1 for allowance

                DataTable dtEmpAllowDeduc = GetEmpAllowDedu(strcompanyId, Convert.ToInt32(str), ref trns);
                sumallow = 0;
                dtEmpAllowDeduc = new DataView(dtEmpAllowDeduc, "Type = 1", "", DataViewRowState.CurrentRows).ToTable();


                for (int i = 0; i < dtEmpAllowDeduc.Rows.Count; i++)
                {

                    DataTable dtattendancesummary = Objda.return_DataTable("select sum(case when (is_absent=0 and is_holiday =0 and is_leave=0 and Is_Week_Off=0) then 1-cast( Halfday_count as numeric(18,3))/2 else 0 end) as Worked_Days, sum(case when is_absent=1 then 1 else 0 end) as Absent_Days, sum(case when is_week_off=1 then 1 else 0 end) as Week_Off_Days, sum(case when Is_Holiday=1 then 1 else 0 end) as Holiday_Days, sum(case when Is_Leave=1 and Att_Leave_Request_Child.Is_Paid=1 then 1 else 0 end) as PaidLeave_Days, sum(case when Is_Leave=1 and Att_Leave_Request_Child.Is_Paid=0 then 1 else 0 end) as UnPaidLeave_Days, sum(case when Halfday_Count>0 then cast( Halfday_count as numeric(18,3))/2 else 0 end) as HalfDays from att_attendanceregister left join att_leave_request on att_attendanceregister.leave_type_id=att_leave_request.Leave_type_id and att_leave_request.emp_id=att_attendanceregister.Emp_Id and att_attendanceregister.Is_leave='True' and att_leave_request.Is_Approved='True' left join Att_Leave_Request_Child on Att_Leave_Request_Child.Ref_Id = att_leave_request.trans_id and Att_Leave_Request_Child.Leave_date=att_attendanceregister.Att_Date where att_attendanceregister.emp_id=" + str + " and month(att_attendanceregister.att_date)=" + strMonth + " and year(att_attendanceregister.att_date)=" + strYear + "", ref trns);
                    Actualbasicsal = Common.getAllowanceanddeductionCalculation1(dtEmpAllowDeduc.Rows[i]["Calculation_Type"].ToString(), dtEmpAllowDeduc.Rows[i]["Calculation_Value"].ToString(), dtPay, PerDaySal, str, strMonth, strYear, ref trns, dtattendancesummary)[1];
                    workeddaysPercentage = (Actualbasicsal * 100) / basicsal;

                    string CalMethod = string.Empty;
                    DataRow row = dtEmpPay.NewRow();
                    row[0] = str;


                    row[1] = "";
                    row[2] = strMonthName;
                    row[3] = strYear;
                    row[4] = dtEmpAllowDeduc.Rows[i]["Type"].ToString();
                    row[5] = dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString();
                    row[6] = dtEmpAllowDeduc.Rows[i]["Value_Type"].ToString();

                    CalMethod = dtEmpAllowDeduc.Rows[i]["Calculation_Method"].ToString();
                    double AllowancesValue = 0;
                    if (row[6].ToString() == "1")
                    {
                        GetCalculation(dtEmpAllowDeduc.Rows[i]["Value_Type"].ToString());
                        row[7] = dtEmpAllowDeduc.Rows[i]["Value"].ToString();
                        double al = Convert.ToDouble(dtEmpAllowDeduc.Rows[i]["Value"]);

                        al = (Convert.ToDouble(dtEmpAllowDeduc.Rows[i]["Value"]) * workeddaysPercentage) / 100;

                        if (CalMethod == "Daily")
                        {
                            al = al * WorkDays;
                        }


                        AllowancesValue = al;



                        row[7] = al.ToString();

                    }
                    else
                    {
                        double val = Convert.ToDouble((Actualbasicsal * Convert.ToDouble(dtEmpAllowDeduc.Rows[i]["Value"].ToString())) / 100);
                        row[7] = val.ToString();
                        if (CalMethod == "Daily")
                        {
                            val = val * WorkDays;
                        }

                        AllowancesValue = val;
                        row[7] = val.ToString();
                    }
                    //this code is created by jitendra upadhyay on 07-05-2014
                    //here we add the last month remaining allowances
                    //code start

                    int Lastmonth = 0;
                    int LastYear = 0;
                    string AllowancesId = string.Empty;
                    AllowancesId = "Allowance Id=" + dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString() + "";
                    DataTable dtDueamount = objEmpDuePay.GetAllRecord_ByEmpId(str, ref trns, strcompanyId);
                    if (strMonth.ToString() == "1")
                    {
                        LastYear = Convert.ToInt32(strYear) - 1;
                        Lastmonth = 12;
                    }
                    else
                    {
                        Lastmonth = Convert.ToInt32(strMonth.ToString()) - 1;
                        LastYear = Convert.ToInt32(strYear);
                    }

                    try
                    {
                        dtDueamount = new DataView(dtDueamount, "Month=" + Lastmonth + " and Year=" + LastYear + " and Field1='Allowance' and Field2='" + AllowancesId + "'", "", DataViewRowState.CurrentRows).ToTable();
                    }
                    catch
                    {
                    }

                    if (dtDueamount.Rows.Count > 0)
                    {
                        if (dtDueamount.Rows[0]["Amount"].ToString().Trim() != "")
                        {
                            try
                            {
                                AllowancesValue = AllowancesValue + Convert.ToDouble(dtDueamount.Rows[0]["Amount"].ToString());
                            }
                            catch
                            {
                                if (row[7].ToString() != "")

                                    AllowancesValue = Convert.ToDouble(row[7].ToString());
                                else

                                    AllowancesValue = 0;
                            }
                        }

                    }


                    //code end

                    if (AllowancesValue.ToString().Trim() == "NaN" || AllowancesValue.ToString().Trim() == "Infinity")
                    {
                        AllowancesValue = 0;
                    }


                    sumallow += AllowancesValue;
                    dtEmpPay.Rows.Add(row);

                    // Insert Allowance Temp Here\\\
                    // Update Ref Id = Trans Id of this Employee  in  Pay_Employe_Month_Temp
                    int k = objpayrollall.InsertPayrollEmpAllowance(str, strMonth.ToString(), strYear, ma.ToString(), dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString(), dtEmpAllowDeduc.Rows[i]["Value_Type"].ToString(), AllowancesValue.ToString(), AllowancesValue.ToString(), ref trns);

                }







                //here we will assign allowance according selected salary plan 





                if (IsPF == true)
                {

                    string[] strPF = getEpfDeduction(strcompanyId, basicsal.ToString(), Actualbasicsal.ToString(), strSalaryPlanId, str, ref trns, strBrandId, strLocationId);

                    Employee_Pf_Amount = Convert.ToDouble(GetAmountDecimal(strPF[0].ToString(), ref trns, strCurrencyId));
                    Employer_Pf_Amount = Convert.ToDouble(GetAmountDecimal(strPF[1].ToString(), ref trns, strCurrencyId));
                    Employer_FPF = Convert.ToDouble(GetAmountDecimal(strPF[2].ToString(), ref trns, strCurrencyId));
                    Employer_PF_Inspection_Charges = Convert.ToDouble(GetAmountDecimal(strPF[3].ToString(), ref trns, strCurrencyId));
                    Employer_PF_EDLI = Convert.ToDouble(GetAmountDecimal(strPF[4].ToString(), ref trns, strCurrencyId));
                    Employer_PF_Admin_Charges = Convert.ToDouble(GetAmountDecimal(strPF[5].ToString(), ref trns, strCurrencyId));
                    Pf_Applicable_Amount = Convert.ToDouble(GetAmountDecimal(strPF[6].ToString(), ref trns, strCurrencyId));

                    //Employee_Pf_Amount = (basicsal * Employee_PF) / 100;
                    //Employer_Pf_Amount = (basicsal * Employer_PF) / 100;

                }
                if (IsEsIc == true)
                {

                    string[] strEsIc = getESICDeduction(strcompanyId, basicsal.ToString(), Actualbasicsal.ToString(), strSalaryPlanId, str, ref trns, strBrandId, strLocationId);


                    Employee_Esic_Amount = Convert.ToDouble(GetAmountDecimal(strEsIc[0].ToString(), ref trns, strCurrencyId));
                    Employer_Esic_Amount = Convert.ToDouble(GetAmountDecimal(strEsIc[1].ToString(), ref trns, strCurrencyId));
                    Esic_Applicable_Amount = Convert.ToDouble(GetAmountDecimal(strEsIc[2].ToString(), ref trns, strCurrencyId));

                }






                //here we are checking  the any arrear exist or not for selected employee

                objDA.execute_Command("delete from Pay_Employee_Claim where Emp_Id=" + str + " and Claim_Month='" + strMonth + "' and Claim_Year='" + strYear + "' and Claim_Name='Arrear'", ref trns);


                DataTable dtArrear = ObjEmpArrear.GetRecordByEmployeeId(strcompanyId, strBrandId, strLocationId, str, ref trns);

                if (dtArrear.Rows.Count > 0)
                {

                    ArrearAmt = Convert.ToDouble(dtArrear.Rows[0]["Arrear_amount"].ToString());

                    ObjClaim.Insert_In_Pay_Employee_Claim(strcompanyId, str, "Arrear", "Arrear From " + dtArrear.Rows[0]["FromMonth"].ToString() + " to " + dtArrear.Rows[0]["ToMonth"].ToString(), "1", dtArrear.Rows[0]["Arrear_amount"].ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "Approved", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strMonth, strYear, "", "", "71", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);

                    ObjEmpArrear.updateRecord(strcompanyId, strBrandId, strLocationId, dtArrear.Rows[0]["Trans_Id"].ToString(), dtArrear.Rows[0]["Emp_Id"].ToString(), dtArrear.Rows[0]["From_Date"].ToString(), dtArrear.Rows[0]["To_Date"].ToString(), dtArrear.Rows[0]["Arrear_amount"].ToString(), dtArrear.Rows[0]["Currency_Id"].ToString(), false.ToString(), "0", true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);

                }

                dtArrear.Dispose();


                //here we are checking that salary plan is enable or not if enable then  we will insert deduction in related table


                if (Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("IsSalaryPlanEnable", strcompanyId, strBrandId, strLocationId, ref trns)))
                {


                    string strDeductionId = string.Empty;
                    //for epf

                    strDeductionId = GetDeductionIdbyDeductionType(strcompanyId, "PF", ref trns);

                    if (strDeductionId != "0")
                    {

                        if (Employee_PF > 0)
                        {
                            objDA.execute_Command("delete from Pay_Employee_Allow_Deduction where type=2 and ref_id=" + strDeductionId + "", ref trns);
                            ObjAllDeduc.InsertPayEmpAllowDeduc(strcompanyId, str, "2", strDeductionId, "Monthly", "1", Employee_Pf_Amount.ToString(), Pf_Applicable_Amount.ToString(), "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                        }

                    }



                    //for esc
                    strDeductionId = GetDeductionIdbyDeductionType(strcompanyId, "ESIC", ref trns);




                    if (strDeductionId != "0")
                    {

                        if (Employee_ESIC > 0)
                        {
                            objDA.execute_Command("delete from Pay_Employee_Allow_Deduction where type=2 and ref_id=" + strDeductionId + "", ref trns);
                            ObjAllDeduc.InsertPayEmpAllowDeduc(strcompanyId, str, "2", strDeductionId, "Monthly", "1", Employee_Esic_Amount.ToString(), Esic_Applicable_Amount.ToString(), "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                        }

                    }


                    //for tds
                    //for tds we need to check that parameter sertting is auto or manual if manual then ni need to insert deduction row for tds

                    strDeductionId = GetDeductionIdbyDeductionType(strcompanyId, "TDS", ref trns);



                    if (objAppParam.GetApplicationParameterValueByParamName("TDS_Functionality", strcompanyId, strBrandId, strLocationId, ref trns).Trim() == "Auto")
                    {

                        objDA.execute_Command("delete from Pay_Employee_Allow_Deduction where type=2 and ref_id=" + strDeductionId + "", ref trns);
                        if (strDeductionId != "0")
                        {

                            string[] strTds = getTDSdeduction(strcompanyId, strMonth, strYear, Grossamt, basicsal.ToString(), Actualbasicsal.ToString(), Employee_Pf_Amount.ToString(), strSalaryPlanId, strDob, str, ArrearAmt, PreviousEmployerTotalEarning, PreviousEmployerTotalTDS, SeniorCitizenagelimit, FinancialYearStartDate, FinancialYearEndDate, Doj, ref trns, strTimeZoneId);

                            if (Convert.ToDouble(strTds[0].ToString()) > 0)
                            {
                                ObjAllDeduc.InsertPayEmpAllowDeduc(strcompanyId, str, "2", strDeductionId, "Monthly", "1", strTds[0].ToString(), strTds[1].ToString(), "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                            }

                        }
                    }
                    else
                    {

                    }

                    //for pt

                    strDeductionId = GetDeductionIdbyDeductionType(strcompanyId, "PT", ref trns);




                    if (strDeductionId != "0")
                    {
                        objDA.execute_Command("delete from Pay_Employee_Allow_Deduction where type=2 and ref_id=" + strDeductionId + "", ref trns);
                        string[] strPT = getProfessionalTaxdeduction(strcompanyId, basicsal.ToString(), Actualbasicsal.ToString(), strSalaryPlanId, strDob, str, ref trns, strTimeZoneId, strBrandId, strLocationId);
                        if (Convert.ToDouble(strPT[0].ToString()) > 0)
                        {
                            ObjAllDeduc.InsertPayEmpAllowDeduc(strcompanyId, str, "2", strDeductionId, "Monthly", "1", strPT[0].ToString(), strPT[1].ToString(), "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                        }

                    }


                    //penalty for ctc employee

                    ///if emploee is ctc then we will deduct employer pf contribution from emploee salary as penalty 



                    DeletePenaltyByEmployeeIdandPenaltyName(strcompanyId, strMonth, strYear, strUserId, str, "General Deduction", ref trns, strTimeZoneId);


                    if (IsCtc)
                    {
                        if ((Employer_Pf_Amount + Employer_FPF + Employer_PF_Admin_Charges + Employer_PF_EDLI + Employer_PF_Inspection_Charges) > 0)
                        {

                            b = objPEpenalty.Insert_In_Pay_Employee_Penalty(strcompanyId, str, "General Deduction", "Employer Pf Contribution ", "1", (Employer_Pf_Amount + Employer_FPF + Employer_PF_Admin_Charges + Employer_PF_EDLI + Employer_PF_Inspection_Charges).ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strMonth, strYear, "", "", "0", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                        }
                    }




                }


                //here we are checking that mobile payment

                DeletePenaltyByEmployeeIdandPenaltyName(strcompanyId, strMonth, strYear, strUserId, str, "Mobile Penalty", ref trns, strTimeZoneId);

                if (GetMobileExceedAmount(strcompanyId, strBrandId, strLocationId, strUserId, strMonth, strYear, str, strMobileNumber, MobileLimit.ToString(), ref trns, strTimeZoneId) > 0)
                {
                    b = objPEpenalty.Insert_In_Pay_Employee_Penalty(strcompanyId, str, "Mobile Penalty", "Exceed Mobile Usage", "1", GetMobileExceedAmount(strcompanyId, strBrandId, strLocationId, strUserId, strMonth, strYear, str, strMobileNumber, MobileLimit.ToString(), ref trns, strTimeZoneId).ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strMonth, strYear, "", "", "", "", "", true.ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString());
                }




                //this code for insert the deduction record in deduction temp table


                string strTDSDeductionId = GetDeductionIdbyDeductionType(strcompanyId, "TDS", ref trns);
                string strEPFDeductionId = GetDeductionIdbyDeductionType(strcompanyId, "PF", ref trns);
                string strESICDeductionId = GetDeductionIdbyDeductionType(strcompanyId, "ESIC", ref trns);

                dtEmpAllowDeduc = GetEmpAllowDedu(strcompanyId, Convert.ToInt32(str), ref trns);

                dtEmpAllowDeduc = new DataView(dtEmpAllowDeduc, "Type = 2", "", DataViewRowState.CurrentRows).ToTable();
                sumdeduc = 0;
                for (int i = 0; i < dtEmpAllowDeduc.Rows.Count; i++)
                {
                    Actualbasicsal = Common.getAllowanceanddeductionCalculation(dtEmpAllowDeduc.Rows[i]["Calculation_Type"].ToString(), dtEmpAllowDeduc.Rows[i]["Calculation_Value"].ToString(), dtPay, PerDaySal, str, strMonth, strYear, ref trns)[1];
                    workeddaysPercentage = (Actualbasicsal * 100) / basicsal;
                    string CalMethod = string.Empty;
                    DataRow row = dtEmpPay.NewRow();
                    row[0] = str;

                    row[1] = "";
                    row[2] = strMonthName;
                    row[3] = strYear;
                    row[4] = dtEmpAllowDeduc.Rows[i]["Type"].ToString();
                    if (row[4].ToString() == "1")
                    {
                        row[4] = "Allowance";
                    }
                    else
                    {
                        row[4] = "Deduction";

                    }
                    CalMethod = dtEmpAllowDeduc.Rows[i]["Calculation_Method"].ToString();
                    row[5] = dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString();
                    row[6] = dtEmpAllowDeduc.Rows[i]["Value_Type"].ToString();
                    double DeductionValue = 0;
                    if (row[6].ToString() == "1")
                    {
                        row[7] = dtEmpAllowDeduc.Rows[i]["Value"].ToString();
                        double deduc = Convert.ToDouble(dtEmpAllowDeduc.Rows[i]["Value"]);

                        if (dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString() != strTDSDeductionId && dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString() != strEPFDeductionId && dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString() != strESICDeductionId)
                        {
                            deduc = (deduc * workeddaysPercentage) / 100;
                        }

                        if (CalMethod == "Daily")
                        {
                            deduc = deduc * WorkDays;
                        }

                        DeductionValue = deduc;
                        row[7] = deduc.ToString();
                    }
                    else
                    {
                        double val = 0;
                        if (dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString() != strTDSDeductionId && dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString() != strEPFDeductionId && dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString() != strESICDeductionId)
                        {
                            val = Convert.ToDouble((Actualbasicsal * Convert.ToDouble(dtEmpAllowDeduc.Rows[i]["Value"].ToString())) / 100);
                        }
                        else
                        {
                            val = Convert.ToDouble((basicsal * Convert.ToDouble(dtEmpAllowDeduc.Rows[i]["Value"].ToString())) / 100);
                        }



                        row[7] = val.ToString();
                        if (CalMethod == "Daily")
                        {
                            val = val * WorkDays;
                        }

                        DeductionValue = val;
                        row[7] = val.ToString();
                    }
                    //this code is created by jitendra upadhyay on 07-05-2014
                    //here we add the last month remaining allowances
                    //code start

                    int Lastmonth = 0;
                    int LastYear = 0;
                    string DeductionId = string.Empty;
                    DeductionId = "Deduction Id=" + dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString() + "";
                    DataTable dtDueamount = objEmpDuePay.GetAllRecord_ByEmpId(str, ref trns, strcompanyId);
                    if (strMonth.ToString() == "1")
                    {
                        LastYear = Convert.ToInt32(strYear) - 1;
                        Lastmonth = 12;
                    }
                    else
                    {
                        Lastmonth = Convert.ToInt32(strMonth.ToString()) - 1;
                        LastYear = Convert.ToInt32(strYear);
                    }

                    try
                    {
                        dtDueamount = new DataView(dtDueamount, "Month=" + Lastmonth + " and Year=" + LastYear + " and Field1='Deduction' and Field2='" + DeductionId + "'", "", DataViewRowState.CurrentRows).ToTable();
                    }
                    catch
                    {
                    }

                    if (dtDueamount.Rows.Count > 0)
                    {
                        if (dtDueamount.Rows[0]["Amount"].ToString().Trim() != "")
                        {
                            try
                            {
                                DeductionValue = DeductionValue + Convert.ToDouble(dtDueamount.Rows[0]["Amount"].ToString());
                            }
                            catch
                            {
                                if (row[7].ToString() != "")

                                    DeductionValue = Convert.ToDouble(row[7].ToString());
                                else

                                    DeductionValue = 0;
                            }
                        }
                    }

                    //code end


                    if (DeductionValue.ToString().Trim() == "NaN" || DeductionValue.ToString().Trim() == "Infinity")
                    {
                        DeductionValue = 0;
                    }
                    sumdeduc += DeductionValue;

                    dtEmpPay.Rows.Add(row);


                    double ApplicableAmount = 0;
                    try
                    {
                        ApplicableAmount = Convert.ToDouble(dtEmpAllowDeduc.Rows[i]["Field1"].ToString());
                    }
                    catch
                    {

                    }
                    // Insert Deduction Temp Here\\\
                    // Update Ref Id = Trans Id of this Employee  in  Pay_Employe_Month_Temp
                    int j = objpayrolldeduc.InsertPayrollEmpDeduction(str, strMonth.ToString(), strYear, ma.ToString(), dtEmpAllowDeduc.Rows[i]["Ref_Id"].ToString(), dtEmpAllowDeduc.Rows[i]["Value_Type"].ToString(), DeductionValue.ToString(), DeductionValue.ToString(), ApplicableAmount.ToString(), ref trns);


                }




                // Here we will get all Penality record of this Employee acc to selected Month and Year
                // We will get data table and loop accrding to rows
                sumpenalty = 0;
                DataTable dtEmpPenalty = objPEpenalty.GetRecord_From_PayEmployeePenalty_By_EmpId_MonthandYear(strcompanyId, str, "", strMonth, strYear, "", "", ref trns);
                for (int i = 0; i < dtEmpPenalty.Rows.Count; i++)
                {

                    DataRow row = dtEmpPay.NewRow();
                    row[0] = str;
                    row[1] = "";
                    row[2] = strMonthName;
                    row[3] = strYear;
                    row[4] = dtEmpPenalty.Rows[i]["Penalty_Name"].ToString(); ;
                    row[5] = dtEmpPenalty.Rows[i]["Penalty_Id"].ToString();
                    row[6] = dtEmpPenalty.Rows[i]["Value_Type"].ToString();
                    if (row[6].ToString() == "1")
                    {
                        row[7] = dtEmpPenalty.Rows[i]["Value"].ToString();
                        double p = Convert.ToDouble(dtEmpPenalty.Rows[i]["Value"]);

                        //p =(p * workeddaysPercentage) / 100;

                        row[7] = p.ToString();
                        sumpenalty += p;
                    }
                    else
                    {
                        double val = Convert.ToDouble((basicsal * Convert.ToDouble(dtEmpPenalty.Rows[i]["Value"].ToString())) / 100);
                        row[7] = val.ToString();
                        sumpenalty += val;
                    }
                    row[6] = GetCalculation(dtEmpPenalty.Rows[i]["Value_Type"].ToString());


                    objPEpenalty.UpdateRecord_In_Pay_Employee_PenaltyAmount(dtEmpPenalty.Rows[i]["Company_Id"].ToString(), str, dtEmpPenalty.Rows[i]["Penalty_Id"].ToString(), row[7].ToString(), row[7].ToString(), strMonth, strYear, strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);


                    dtEmpPay.Rows.Add(row);


                }





                // Here we will get all claim record of this Employee acc to selected Month and Year only IsApproved Record
                // We will get data table and loop accrding to rows
                sum = 0;
                DataTable dtEmpClaim = objPEClaim.GetRecord_From_PayEmployeeClaim_By_EmpId_MonthandYear(strcompanyId, str, "", "Approved", strMonth, strYear, "", "", ref trns);
                for (int i = 0; i < dtEmpClaim.Rows.Count; i++)
                {

                    DataRow row = dtEmpPay.NewRow();
                    row[0] = str;
                    row[1] = "";
                    row[2] = strMonthName;
                    row[3] = strYear;
                    row[4] = dtEmpClaim.Rows[i]["Claim_Approved"].ToString();
                    row[5] = dtEmpClaim.Rows[i]["Claim_Id"].ToString();
                    row[6] = dtEmpClaim.Rows[i]["Value_Type"].ToString();
                    if (row[6].ToString() == "1")
                    {
                        Double h = Convert.ToDouble(dtEmpClaim.Rows[i]["Value"]);

                        //h = (h * workeddaysPercentage) / 100;
                        row[7] = h.ToString();
                        sum += h;
                    }
                    else
                    {

                        double val = Convert.ToDouble((basicsal * Convert.ToDouble(dtEmpClaim.Rows[i]["Value"].ToString())) / 100);
                        row[7] = val.ToString();
                        sum += val;


                    }
                    row[6] = GetCalculation(dtEmpClaim.Rows[i]["Value_Type"].ToString());
                    objPEClaim.UpdateRecord_In_Pay_Employee_ClaimAmount(dtEmpClaim.Rows[i]["Company_Id"].ToString(), dtEmpClaim.Rows[i]["Claim_Id"].ToString(), str, row[7].ToString(), row[7].ToString(), strMonth, strYear, strUserId, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);


                    dtEmpPay.Rows.Add(row);
                }
                // Get employee loan 
                //this code is updated by jitendra upadhyay on 07-05-2014
                //for update the paid amount and status field in loan detail table when we post payroll without edit payroll
                //code start
                sumloan = 0;

                //code end

                monthclaim = Convert.ToInt32(strMonth);
                yearclaim = Convert.ToInt32(strYear);
                if (monthclaim == 1)
                {
                    monthclaim = 12;
                    yearclaim = yearclaim - 1;

                }

                totaldueamt = 0;
                monthclaim = monthclaim - 1;
                DataTable dtdueamt = new DataTable();

                dtdueamt = objEmpDuePay.GetRecord_Emp_Due_paymentType1(str, monthclaim.ToString(), yearclaim.ToString(), ref trns, strcompanyId);

                DataTable dtdueamt1 = new DataTable();
                dtdueamt1 = objEmpDuePay.GetRecord_Emp_Due_paymentByType2(str, monthclaim.ToString(), yearclaim.ToString(), ref trns, strcompanyId);


                if (dtdueamt.Rows.Count > 0 && dtdueamt != null && dtdueamt.Rows[0]["Amount"].ToString() != "")
                {
                    dueamt = Convert.ToDouble(dtdueamt.Rows[0]["Amount"]);
                }

                if (dtdueamt1.Rows.Count > 0 && dtdueamt1 != null && dtdueamt1.Rows[0]["Amount"].ToString() != "")
                {

                    dueamtt = Convert.ToDouble(dtdueamt1.Rows[0]["Amount"]);

                }
                totaldueamt = dueamt - dueamtt;
                int u = 0;
                DataTable dtemprecord = new DataTable();
                dtemprecord = objPayEmpMonth.GetRecordByEmpIdMonthYear(str, strMonth.ToString(), strYear.ToString(), ref trns, strcompanyId);

                if (dtemprecord.Rows.Count > 0)
                {
                    u = objPayEmpMonth.UpdateRecord_PrvBal_fields_By_TransId(dtemprecord.Rows[0]["Trans_Id"].ToString(), totaldueamt.ToString(), dtemprecord.Rows[0]["Field1"].ToString(), dtemprecord.Rows[0]["Field2"].ToString(), dtemprecord.Rows[0]["Field3"].ToString(), dtemprecord.Rows[0]["Field4"].ToString(), dtemprecord.Rows[0]["Field5"].ToString(), dtemprecord.Rows[0]["Field6"].ToString(), dtemprecord.Rows[0]["Field7"].ToString(), dtemprecord.Rows[0]["Field8"].ToString(), dtemprecord.Rows[0]["Field9"].ToString(), dtemprecord.Rows[0]["Field10"].ToString(), ref trns, strcompanyId);

                }





                int dty = Convert.ToInt32(strYear);
                int dtm = Convert.ToInt32(strMonth);
                int days = System.DateTime.DaysInMonth(dty, dtm);

                int Id = 0;
                Id = objPayEmpMonth.UpdateRecord_Pay_Employee_Month(strcompanyId, str, strMonth.ToString(), strYear.ToString(), sumpenalty.ToString(), sum.ToString(), sumloan.ToString(), sumallow.ToString(), sumdeduc.ToString(), sumpenalty.ToString(), sum.ToString(), "0", Employer_Pf_Amount.ToString(), "0", Employer_Esic_Amount.ToString(), Employer_FPF.ToString(), Employer_PF_Admin_Charges.ToString(), Employer_PF_EDLI.ToString(), Employer_PF_Inspection_Charges.ToString(), ref trns);
                DataTable dtEmpattendnce = new DataTable();
                dtEmpattendnce = objPayEmpAtt.GetRecord_Emp_Attendance(str, strMonth.ToString(), strYear, ref trns, strcompanyId);
                if (dtEmpattendnce.Rows.Count > 0)
                {
                    int s = objPayEmpMonth.UpdateAttendenceRecord_By_EmpId_Monthandyear(str, strMonth.ToString(), strYear.ToString(), dtEmpattendnce.Rows[0]["Basic_Work_Salary"].ToString(), dtEmpattendnce.Rows[0]["Normal_OT_Work_Salary"].ToString(), dtEmpattendnce.Rows[0]["WeekOff_OT_Work_Salary"].ToString(), dtEmpattendnce.Rows[0]["Holiday_OT_Work_Salary"].ToString(), dtEmpattendnce.Rows[0]["Leave_Days_Salary"].ToString(), dtEmpattendnce.Rows[0]["Week_Off_Days_Salary"].ToString(), dtEmpattendnce.Rows[0]["Holiday_Days_Salary"].ToString(), dtEmpattendnce.Rows[0]["Absent_Day_Penalty"].ToString(), dtEmpattendnce.Rows[0]["Late_Min_Penalty"].ToString(), dtEmpattendnce.Rows[0]["Early_Min_Penalty"].ToString(), dtEmpattendnce.Rows[0]["Parital_Violation_Penalty"].ToString(), ref trns, strcompanyId);
                }


                //Code By Ghanshyam Suthar on 09-02-2018

                string strLoandetailId = "0";
                DataTable dtempmonthtemp = new DataTable();
                dtempmonthtemp = objPayEmpMonth.GetallTemprecords_By_EmployeeId(str, ref trns, strcompanyId);
                dtempmonthtemp = new DataView(dtempmonthtemp, "Emp_Id=" + str + "", "", DataViewRowState.CurrentRows).ToTable();
                double GrossSalary = 0;
                if (dtempmonthtemp != null && dtempmonthtemp.Rows.Count > 0)
                {
                    GrossSalary = (float.Parse(dtempmonthtemp.Rows[0]["Worked_Min_Salary"].ToString()) + float.Parse(dtempmonthtemp.Rows[0]["Normal_OT_Min_Salary"].ToString()) + float.Parse(dtempmonthtemp.Rows[0]["Week_Off_OT_Min_Salary"].ToString()) + float.Parse(dtempmonthtemp.Rows[0]["Holiday_OT_Min_Salary"].ToString()) + float.Parse(dtempmonthtemp.Rows[0]["Leave_Days_Salary"].ToString()) + float.Parse(dtempmonthtemp.Rows[0]["Week_Off_Salary"].ToString()) + float.Parse(dtempmonthtemp.Rows[0]["Holidays_Salary"].ToString()) - float.Parse(dtempmonthtemp.Rows[0]["Absent_Salary"].ToString()) - float.Parse(dtempmonthtemp.Rows[0]["Late_Min_Penalty"].ToString()) - float.Parse(dtempmonthtemp.Rows[0]["Early_Min_Penalty"].ToString()) - float.Parse(dtempmonthtemp.Rows[0]["Patial_Violation_Penalty"].ToString()) - float.Parse(dtempmonthtemp.Rows[0]["Employee_Penalty"].ToString()) + float.Parse(dtempmonthtemp.Rows[0]["Employee_Claim"].ToString()) - float.Parse(dtempmonthtemp.Rows[0]["Emlployee_Loan"].ToString()) + float.Parse(dtempmonthtemp.Rows[0]["Total_Allowance"].ToString()) - float.Parse(dtempmonthtemp.Rows[0]["Total_Deduction"].ToString()));
                }
                double Deduction = sumpenalty + sumdeduc + Employer_Pf_Amount + Employer_Esic_Amount + Employer_FPF + Employer_PF_Admin_Charges + Employer_PF_EDLI + Employer_PF_Inspection_Charges;
                double Addition = GrossSalary + sum + sumallow;
                double Net_Salary = Addition - Deduction;
                string Is_Greather = "False";
                DataTable Dtloan = new DataTable();
                Dtloan = objEmpLoan.GetRecord_From_PayEmployeeLoanByStatus(strcompanyId, "Approved", ref trns);
                Dtloan = new DataView(Dtloan, " Emp_Id=" + str + "", "", DataViewRowState.CurrentRows).ToTable();
                for (int i = 0; i < Dtloan.Rows.Count; i++)
                {
                    DataTable dtloandetial = new DataTable();
                    dtloandetial = objEmpLoan.GetRecord_From_PayEmployeeLoanDetailByLoanId(Dtloan.Rows[i]["Loan_Id"].ToString(), ref trns);

                    if (IsLoanSettlement)
                    {
                        dtloandetial = new DataView(dtloandetial, "Is_Status='Pending'", "", DataViewRowState.CurrentRows).ToTable();
                    }
                    else
                    {
                        dtloandetial = new DataView(dtloandetial, "Month=" + strMonth + " and Year=" + strYear + " and Is_Status='Pending'", "", DataViewRowState.CurrentRows).ToTable();
                    }
                    if (dtloandetial.Rows.Count > 0)
                    {


                        for (int k = 0; k < dtloandetial.Rows.Count; k++)
                        {


                            double loan = 0;
                            DataRow row = dtEmpPay.NewRow();

                            if (dtloandetial.Rows[k]["Total_Amount"].ToString() != "")
                            {
                                row[6] = dtloandetial.Rows[k]["Total_Amount"].ToString();
                                loan = Convert.ToDouble(dtloandetial.Rows[k]["Total_Amount"]);

                                sumloan += loan;
                                Net_Salary -= loan;
                            }


                            strLoandetailId = dtloandetial.Rows[k]["Trans_Id"].ToString();
                        }



                        //}
                    }

                    //if (Is_Greather == "True")
                    //{
                    int Rc_Update = 0;
                    Rc_Update = objPayEmpMonth.UpdateRecord_Pay_Employee_Month(strcompanyId, str, strMonth.ToString(), strYear.ToString(), sumpenalty.ToString(), sum.ToString(), sumloan.ToString(), sumallow.ToString(), sumdeduc.ToString(), sumpenalty.ToString(), sum.ToString(), "0", Employer_Pf_Amount.ToString(), "0", Employer_Esic_Amount.ToString(), Employer_FPF.ToString(), Employer_PF_Admin_Charges.ToString(), Employer_PF_EDLI.ToString(), Employer_PF_Inspection_Charges.ToString(), ref trns);

                    //}
                }
                // Code End by Ghanshyam Suthar




                // Update In Master Table Total Allowance /Deduction/Claim/Penalty
                // Acc to Month Year And Employee Id



            }
        }
        Result = true;


        return Result;
    }
    protected string GetAccountNameByTransId(string strAccountNo, ref SqlTransaction trns, string strCompanyid)
    {
        string strAccountName = string.Empty;
        if (strAccountNo != "0" && strAccountNo != "")
        {
            string sql = "select AccountName,Trans_Id from Ac_ChartOfAccount where Company_Id=" + strCompanyid + " and Trans_Id=" + strAccountNo + " and IsActive='True'";

            DataTable dtAccName = objDA.return_DataTable(sql, ref trns);
            if (dtAccName.Rows.Count > 0)
            {
                strAccountName = dtAccName.Rows[0]["AccountName"].ToString() + "/" + strAccountNo;
            }
        }
        else
        {
            strAccountName = "";
        }
        return strAccountName;
    }

    public DataTable Get_Decimal_Count(string Currency_ID, string Currency_Code, string Currency_Name, string Country_Id, string Country_Name, string Country_Code)
    {
        DataTable Dt_Decimal_Count = new DataTable();
        Dt_Decimal_Count = objCurrency.GetDecimalCount(Currency_ID, Currency_Code, Currency_Name, Country_Id, Country_Name, Country_Code, "1");
        return Dt_Decimal_Count;
    }

    public void UpdateMobileAdjustedFlag(string strEmpId, string strMonth, string strYear, SqlTransaction trans, string strCompanyid, string strBrandId, string strLocationid, string strTimeZoneId, string strUserid)
    {
        Pay_MobileBillPayment ObjMobilePayment = new Pay_MobileBillPayment(_strConString);

        DataTable dt = ObjMobilePayment.GetRecordByEmployeeId(strCompanyid, strEmpId, ref trans);

        dt = new DataView(dt, "Month='" + strMonth + "' and year='" + strYear + "' and Exceed_Amount>0", "", DataViewRowState.CurrentRows).ToTable();

        if (dt.Rows.Count > 0)
        {
            ObjMobilePayment.UpdateRecord(strCompanyid, strBrandId, strLocationid, dt.Rows[0]["Trans_Id"].ToString(), strEmpId, dt.Rows[0]["Mobile_Number"].ToString(), dt.Rows[0]["Month"].ToString(), dt.Rows[0]["Year"].ToString(), dt.Rows[0]["Bill_Amount"].ToString(), dt.Rows[0]["Bill_Limit"].ToString(), dt.Rows[0]["Exceed_Amount"].ToString(), dt.Rows[0]["Ref_Id"].ToString(), dt.Rows[0]["Operator"].ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), ref trans);
        }
    }


    public double GetActualAllowance(string strSalaryPlanId, double GrossAmt, double BasicSalary)
    {


        double RowAmount = 0;



        DataTable dtsalaryPlanAll = objsalaryplandetail.GetDeduction_By_headerId(strSalaryPlanId);


        DataTable dtsalaryPlan = new DataView(dtsalaryPlanAll, "Field1='False'", "", DataViewRowState.CurrentRows).ToTable();
        //  dttDetail = dttDetail.DefaultView.ToTable(true, "Trans_Id", "Ref_Id", "Calculation_Method", "Value", "Amount", "Deduction_Applicable");

        foreach (DataRow dr in dtsalaryPlan.Rows)
        {

            string strCalcmethod = string.Empty;
            if (dr["Calculation_Method"].ToString() == "Fixed")
            {



                RowAmount += Convert.ToDouble(dr["Value"].ToString());


            }
            else
            {


                RowAmount += (BasicSalary * Convert.ToDouble(dr["Value"].ToString())) / 100;

            }
        }


        RowAmount += (GrossAmt - (BasicSalary + RowAmount));


        return RowAmount;
    }

    public string GetMonthName(int MonthNumber)
    {
        System.Globalization.DateTimeFormatInfo mfi = new
System.Globalization.DateTimeFormatInfo();
        return mfi.GetMonthName(MonthNumber).ToString();
    }

    private string GetLocationCode(string strLocationId)
    {
        string strLocationCode = string.Empty;
        if (strLocationId != "0" && strLocationId != "")
        {
            DataTable dtLocation = ObjLocationMaster.GetLocationMasterByLocationId(strLocationId);
            if (dtLocation.Rows.Count > 0)
            {
                strLocationCode = dtLocation.Rows[0]["Location_Code"].ToString();
            }
        }
        return strLocationCode;
    }


    public string getFinanceVoucherNo(ref SqlTransaction trns, string strCompanyid, string strBrandId, string strLocId, string strDepartmentId, string strloginempid, string strTimeZoneId, string strFinancialYear)
    {
        //for Voucher Number
        string strVoucherNumber = objDocNo.GetDocumentNo(true, strCompanyid, false, "160", "302", "0", ref trns, strBrandId, strLocId, strDepartmentId, strloginempid, strTimeZoneId);
        if (strVoucherNumber != "")
        {
            DataTable dtCount = objVoucherHeader.GetVoucherAll(strCompanyid, strBrandId, strLocId, strFinancialYear, ref trns);
            if (dtCount.Rows.Count > 0)
            {
                dtCount = new DataView(dtCount, "Voucher_Type='JV'", "", DataViewRowState.CurrentRows).ToTable();
            }
            if (dtCount.Rows.Count == 0)
            {
                strVoucherNumber = strVoucherNumber + "1";
            }
            else
            {
                double TotalCount = Convert.ToDouble(dtCount.Rows.Count) + 1;
                strVoucherNumber = strVoucherNumber + TotalCount;
            }
        }
        return strVoucherNumber;
    }

    public bool PostPayroll(string strEmpIdList, string strLocationId, bool IsLoanSettlement, ref SqlTransaction trns, string strCompanyId, string strBrandId, string strTimeZoneId, string strUserid, string strFinancialyearId, string strDepartmentId, string strLoginEmpId)
    {
        string strCreditAccount = string.Empty;
        string strDebitAccount = string.Empty;
        string strLoanCreditAccount = string.Empty;
        string strLoanDebitAccount = string.Empty;
        string strPayrollMonth = string.Empty;
        string strPayrollYear = string.Empty;
        DataTable dtEmppayroll = new DataTable();
        string FinanceAllowancesList = string.Empty;
        string FinanceDeductionList = string.Empty;



        string strMaxVoucheno = objDA.return_DataTable("select max(ISNULL( pay_employe_month.Voucher_No,0))+1 from pay_employe_month inner join set_employeemaster on pay_employe_month.Emp_Id= set_employeemaster.Emp_Id where set_employeemaster.Location_Id=" + strLocationId + "", ref trns).Rows[0][0].ToString();

        string strPendingGenPayroll = string.Empty;
        string StrPostedEmployee = string.Empty;
        string TransNo = string.Empty;
        string SalaryPlanid = string.Empty;
        DataTable dtAppParam = new DataTable();
        double Employee_PF = 0;
        double Employer_PF = 0;
        double Employee_ESIC = 0;
        double Employer_ESIC = 0;

        double PF = 0;
        double ESIC = 0;
        double PF1 = 0;
        double ESIC1 = 0;

        bool IsPF = false;
        bool IsESIC = false;
        double BasicSal = 0;
        double EmpGrossSalary = 0;
        double TotalEmployeeAllowance = 0;
        bool IsEmpINPayroll = false;
        double ActualGross = 0;
        string[] EmpDetails = new string[1];
        string[] LeaveDetails = new string[1];
        try
        {
            Employee_PF = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employee_PF", strCompanyId, strBrandId, strLocationId, ref trns));
        }
        catch
        {

        }

        try
        {
            Employer_PF = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employer_PF", strCompanyId, strBrandId, strLocationId, ref trns));
        }
        catch
        {

        }

        try
        {
            Employee_ESIC = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employee_ESIC", strCompanyId, strBrandId, strLocationId, ref trns));
        }
        catch
        {
        }

        try
        {
            Employer_ESIC = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Employer_ESIC", strCompanyId, strBrandId, strLocationId, ref trns));
        }
        catch
        {

        }

        int TransId = 0;
        int EmpCount = -1;


        DataTable dtAcParameter = objAcParameter.GetParameterMasterAllTrue(strCompanyId, ref trns);
        DataTable dtCredit = new DataView(dtAcParameter, "Param_Name='Cash Transaction'", "", DataViewRowState.CurrentRows).ToTable();
        if (dtCredit.Rows.Count > 0)
        {
            strCreditAccount = dtCredit.Rows[0]["Param_Value"].ToString();
            strLoanCreditAccount = strCreditAccount;
        }

        DataTable dtDebit = new DataView(dtAcParameter, "Param_Name='HR Section'", "", DataViewRowState.CurrentRows).ToTable();
        if (dtDebit.Rows.Count > 0)
        {
            strDebitAccount = dtDebit.Rows[0]["Param_Value"].ToString();

        }

        dtDebit = new DataView(dtAcParameter, "Param_Name='Employee Loan Account'", "", DataViewRowState.CurrentRows).ToTable();
        if (dtDebit.Rows.Count > 0)
        {

            strLoanDebitAccount = dtDebit.Rows[0]["Param_Value"].ToString();
        }



        //if (strCreditAccount == "" || strDebitAccount == "" || strLoanDebitAccount == "")
        //{
        //    DisplayMessage("Finance account not configured");
        //    return;
        //}

        string EmployeeAccountName = GetAccountNameByTransId(objAcParameter.GetParameterValue_By_ParameterName(strCompanyId, "Employee Account", ref trns).Rows[0]["Param_Value"].ToString(), ref trns, strCompanyId);
        string EmployeeAccountId = EmployeeAccountName.Split('/')[1].ToString();
        bool Is_seperateVoucher_ForLeaveSalary = false;
        bool Is_seperateVoucher_ForAllowances = false;
        bool Is_seperateVoucher_ForDeductions = false;

        try
        {
            Is_seperateVoucher_ForLeaveSalary = Convert.ToBoolean(objAccParameterLocation.GetParameterValue_By_ParameterName(strCompanyId, strBrandId, strLocationId, "Seperate voucher for Leave", ref trns).Rows[0]["Param_Value"].ToString());
            Is_seperateVoucher_ForAllowances = Convert.ToBoolean(objAccParameterLocation.GetParameterValue_By_ParameterName(strCompanyId, strBrandId, strLocationId, "Seperate voucher for Allowance", ref trns).Rows[0]["Param_Value"].ToString());
            Is_seperateVoucher_ForDeductions = Convert.ToBoolean(objAccParameterLocation.GetParameterValue_By_ParameterName(strCompanyId, strBrandId, strLocationId, "Seperate voucher for Deduction", ref trns).Rows[0]["Param_Value"].ToString());
        }
        catch
        {

        }





        string strFinalPayEmp = strEmpIdList;



        string strCurrencyId = ObjLocationMaster.GetLocationMasterById(strCompanyId, strLocationId, ref trns).Rows[0]["Field1"].ToString();

        DataTable Dt_Decimal_Count = Get_Decimal_Count(strCurrencyId, "", "", "0", "", "");
        double TotalAmountPay = 0;
        double TotalLeaveSalary = 0;
        foreach (string str in strFinalPayEmp.Split(','))
        {
            if (str == "")
            {
                continue;
            }

            dtEmppayroll = objPayEmpMonth.GetPayEmpMonthTemp_By_EmployeeId(str, ref trns, strCompanyId);

            if (dtEmppayroll.Rows.Count > 0)
            {
                strPayrollMonth = dtEmppayroll.Rows[0]["Month"].ToString();
                strPayrollYear = dtEmppayroll.Rows[0]["Year"].ToString();
            }

            var arr = strFinalPayEmp.Split(',');
            if (EmpCount == -1)
            {
                EmpDetails = new string[arr.Length - 1];
                LeaveDetails = new string[arr.Length - 1];
            }
            if ((str != ""))
            {
                EmpCount++;
                UpdateMobileAdjustedFlag(str, strPayrollMonth, strPayrollYear, trns, strCompanyId, strBrandId, strLocationId, strTimeZoneId, strUserid);

                //here we insert the row in pay_employee_attendence table with current month and current year
                //this code is update on 05-04-2014
                DataTable DtEmpAttendence = objPayEmpAtt.GetRecord_Emp_Attendance(str, strPayrollMonth, strPayrollYear, ref trns, strCompanyId);
                if (DtEmpAttendence.Rows.Count == 0)
                {

                    //this code is created by jitendra upadhyay on 01-04-2015
                    //this code for check that record exists or not in employe detail table if exisr than we insert from employee detail table
                    DataTable dtobjempdetail = objEmpDetail.GetAllTrueRecord(ref trns);
                    try
                    {
                        dtobjempdetail = new DataView(dtobjempdetail, "Emp_Id=" + str + " and Month=" + strPayrollMonth + " and Year=" + strPayrollYear + "", "", DataViewRowState.CurrentRows).ToTable();
                    }
                    catch
                    {

                    }
                    if (dtobjempdetail.Rows.Count > 0)
                    {
                        objPayEmpAtt.InsertPayEmployeeAttendance(strCompanyId, str, strPayrollMonth, strPayrollYear, Math.Round(float.Parse(dtobjempdetail.Rows[0]["Total_Days"].ToString()), 0).ToString(), "0", Math.Round(float.Parse(dtobjempdetail.Rows[0]["Present_Days"].ToString()), 0).ToString(), Math.Round(float.Parse(dtobjempdetail.Rows[0]["WeekOff_Days"].ToString()), 0).ToString(), Math.Round(float.Parse(dtobjempdetail.Rows[0]["Holiday_Days"].ToString()), 0).ToString(), Math.Round(float.Parse(dtobjempdetail.Rows[0]["Leave_Days"].ToString()), 0).ToString(), Math.Round(float.Parse(dtobjempdetail.Rows[0]["Absent_Days"].ToString()), 0).ToString(), "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "", "", "", "", "", "", "", "", "", "", true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                    }
                    else
                    {
                        objPayEmpAtt.InsertPayEmployeeAttendance(strCompanyId, str, strPayrollMonth, strPayrollYear, "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "", "", "", "", "", "", "", "", "", "", true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                    }
                }

                PF = 0;
                ESIC = 0;
                PF1 = 0;
                ESIC1 = 0;


                IsPF = false;
                IsESIC = false;
                BasicSal = 0;


                IsEmpINPayroll = false;
                DataTable dtempmonthtemp = new DataTable();
                dtempmonthtemp = objPayEmpMonth.GetallTemprecords_By_EmployeeId(str, ref trns, strCompanyId);
                dtempmonthtemp = new DataView(dtempmonthtemp, "Emp_Id=" + str + " ", "", DataViewRowState.CurrentRows).ToTable();

                if (dtempmonthtemp.Rows.Count > 0)
                {
                    EmployeeParameter objEmpParam = new EmployeeParameter(_strConString);
                    DataTable dt = objEmpParam.GetEmployeeParameterByEmpId(str, strCompanyId, ref trns);

                    if (dt.Rows.Count > 0)
                    {

                        SalaryPlanid = dt.Rows[0]["Salary_Plan_Id"].ToString();
                        try
                        {
                            IsEmpINPayroll = Convert.ToBoolean(dt.Rows[0]["Field6"].ToString());
                        }
                        catch
                        {

                        }



                        try
                        {
                            IsPF = Convert.ToBoolean(dt.Rows[0]["Field4"].ToString());
                        }
                        catch
                        {

                        }

                        try
                        {
                            IsESIC = Convert.ToBoolean(dt.Rows[0]["Field5"].ToString());
                        }
                        catch
                        {

                        }


                        try
                        {
                            BasicSal = double.Parse(dt.Rows[0]["Basic_Salary"].ToString());
                        }
                        catch
                        {

                        }

                        try
                        {
                            EmpGrossSalary = Convert.ToDouble(dt.Rows[0]["Gross_Salary"].ToString());
                        }
                        catch
                        {


                        }


                        try
                        {
                            TotalEmployeeAllowance = GetActualAllowance(SalaryPlanid, EmpGrossSalary, BasicSal);
                        }
                        catch
                        {

                        }



                        if (IsEmpINPayroll)
                        {
                            if (BasicSal.ToString() != "")
                            {
                                if (IsPF == true)
                                {
                                    PF = (BasicSal * Employee_PF) / 100;
                                    PF1 = (BasicSal * Employer_PF) / 100;
                                }
                                if (IsESIC == true)
                                {
                                    ESIC1 = (BasicSal * Employer_ESIC) / 100;
                                    ESIC = (BasicSal * Employee_ESIC) / 100;
                                }
                            }
                        }
                    }

                    //this code also for insert the record in payroll table(pay_employee_month) from temporary table(pay_employee_month_Temp)
                    //code start

                    TransId = objPayEmpMonth.Insert_posted_Pay_Emp_Month(strCompanyId, str, dtempmonthtemp.Rows[0]["Month"].ToString(), dtempmonthtemp.Rows[0]["Year"].ToString(), dtempmonthtemp.Rows[0]["Worked_Min_Salary"].ToString(), dtempmonthtemp.Rows[0]["Normal_OT_Min_Salary"].ToString(), dtempmonthtemp.Rows[0]["Week_Off_OT_Min_Salary"].ToString(), dtempmonthtemp.Rows[0]["Holiday_OT_Min_Salary"].ToString(), dtempmonthtemp.Rows[0]["Leave_Days_Salary"].ToString(), dtempmonthtemp.Rows[0]["Week_Off_Salary"].ToString(), dtempmonthtemp.Rows[0]["Holidays_Salary"].ToString(), dtempmonthtemp.Rows[0]["Absent_Salary"].ToString(), dtempmonthtemp.Rows[0]["Late_Min_Penalty"].ToString(), dtempmonthtemp.Rows[0]["Early_Min_Penalty"].ToString(), dtempmonthtemp.Rows[0]["Patial_Violation_Penalty"].ToString(), dtempmonthtemp.Rows[0]["Employee_Penalty"].ToString(), dtempmonthtemp.Rows[0]["Employee_Claim"].ToString(), dtempmonthtemp.Rows[0]["Emlployee_Loan"].ToString(), dtempmonthtemp.Rows[0]["Total_Allowance"].ToString(), dtempmonthtemp.Rows[0]["Total_Deduction"].ToString(), dtempmonthtemp.Rows[0]["Previous_Month_Balance"].ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), dtempmonthtemp.Rows[0]["Employee_PF"].ToString(), dtempmonthtemp.Rows[0]["Employer_PF"].ToString(), dtempmonthtemp.Rows[0]["Employee_ESIC"].ToString(), dtempmonthtemp.Rows[0]["Employer_ESIC"].ToString(), dtempmonthtemp.Rows[0]["Field3"].ToString(), dtempmonthtemp.Rows[0]["Field4"].ToString(), dtempmonthtemp.Rows[0]["Field5"].ToString(), dtempmonthtemp.Rows[0]["Field6"].ToString(), EmpGrossSalary.ToString(), BasicSal.ToString(), TotalEmployeeAllowance.ToString(), "0", "0", "0", true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                    string strEmpCodeOnly = Common.GetEmployeeCode(str, _strConString, strCompanyId);
                    StrPostedEmployee += strEmpCodeOnly + ",";
                    //Code end



                    DataTable Dtloan = new DataTable();
                    Dtloan = objEmpLoan.GetRecord_From_PayEmployeeLoanByStatus(strCompanyId, "Approved", ref trns);

                    string Narration = string.Empty;
                    DataTable dtemppayrollpost = new DataTable();

                    string strAddition = string.Empty;
                    string strDeduction = string.Empty;
                    dtemppayrollpost = objPayEmpMonth.GetAllRecordPostedEmpMonth(str, dtempmonthtemp.Rows[0]["Month"].ToString(), dtempmonthtemp.Rows[0]["Year"].ToString(), ref trns, strCompanyId);
                    string strEmployeeActualSalary = string.Empty;
                    if (dtemppayrollpost.Rows.Count > 0)
                    {
                        strEmployeeActualSalary = string.Empty;
                        string WorkedSalary = dtemppayrollpost.Rows[0]["Worked_Min_Salary"].ToString();
                        string NormalOT = dtemppayrollpost.Rows[0]["Normal_OT_Min_Salary"].ToString();
                        string WeekOffOT = dtemppayrollpost.Rows[0]["Week_Off_OT_Min_Salary"].ToString();
                        string HolidayOT = dtemppayrollpost.Rows[0]["Holiday_OT_Min_Salary"].ToString();
                        string LeaveDaysSalary = dtemppayrollpost.Rows[0]["Leave_Days_Salary"].ToString();
                        string WeekOffSalary = dtemppayrollpost.Rows[0]["Week_Off_Salary"].ToString();
                        string HolidaySalary = dtemppayrollpost.Rows[0]["Holidays_Salary"].ToString();
                        string AbsentSalary = dtemppayrollpost.Rows[0]["Absent_Salary"].ToString();
                        string LateMinPenalty = dtemppayrollpost.Rows[0]["Late_Min_Penalty"].ToString();
                        string EarlyMinPenalty = dtemppayrollpost.Rows[0]["Early_Min_Penalty"].ToString();
                        string PartialViolationPenalty = dtemppayrollpost.Rows[0]["Patial_Violation_Penalty"].ToString();
                        string EmpPenalty = dtemppayrollpost.Rows[0]["Employee_Penalty"].ToString();
                        string EmpClaim = dtemppayrollpost.Rows[0]["Employee_Claim"].ToString();
                        string EmpLoan = dtemppayrollpost.Rows[0]["Emlployee_Loan"].ToString();
                        string TotalAllowance = dtemppayrollpost.Rows[0]["Total_Allowance"].ToString();
                        string TotalDeduction = dtemppayrollpost.Rows[0]["Total_Deduction"].ToString();
                        string PreviousMonthAdjust = dtemppayrollpost.Rows[0]["Previous_Month_Balance"].ToString();
                        string EmployeePF = dtemppayrollpost.Rows[0]["Employee_PF"].ToString();
                        string EmployeeESIC = dtemppayrollpost.Rows[0]["Employee_ESIC"].ToString();

                        ActualGross = (float.Parse(WorkedSalary) + float.Parse(LeaveDaysSalary) + float.Parse(WeekOffSalary) + float.Parse(HolidaySalary) + float.Parse(TotalAllowance));


                        strAddition = (float.Parse(WorkedSalary) + float.Parse(NormalOT) + float.Parse(WeekOffOT) + float.Parse(HolidayOT) + float.Parse(LeaveDaysSalary) + float.Parse(WeekOffSalary) + float.Parse(HolidaySalary) + float.Parse(EmpClaim) + float.Parse(TotalAllowance) + float.Parse(PreviousMonthAdjust)).ToString();

                        if (Is_seperateVoucher_ForLeaveSalary)
                        {
                            strAddition = (float.Parse(strAddition) - float.Parse(LeaveDaysSalary)).ToString();
                            TotalLeaveSalary += float.Parse(LeaveDaysSalary);
                            if (float.Parse(LeaveDaysSalary) > 0)
                            {
                                LeaveDetails[EmpCount] = str + "," + LeaveDaysSalary.ToString() + "," + "Leave Salary For the month " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + "," + strPayrollMonth + "," + strPayrollYear;
                            }
                            else
                            {
                                LeaveDetails[EmpCount] = "" + ",";
                            }
                        }


                        strDeduction = (float.Parse(AbsentSalary) + float.Parse(LateMinPenalty) + float.Parse(EarlyMinPenalty) + float.Parse(PartialViolationPenalty) + float.Parse(EmpPenalty) + float.Parse(TotalDeduction)).ToString();

                        //Code Comment by Ghanhshyam Suthar because loan Entry not save in this voucher on 09-02-2018
                        double sumloan = 0;

                        sumloan = Convert.ToDouble(EmpLoan);

                        //string strDeduction = (float.Parse(AbsentSalary) + float.Parse(LateMinPenalty) + float.Parse(EarlyMinPenalty) + float.Parse(PartialViolationPenalty) + float.Parse(EmpPenalty) + float.Parse(EmpLoan) + float.Parse(TotalDeduction)).ToString();
                        // Code End


                        //Narration = "Payroll For the month " + ddlMonth.SelectedItem.Text.ToString() + "-" + TxtYear.Text.ToString() + "";


                        if (strDeduction == "0")
                            Narration = "Payroll For the month " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + "";
                        else
                            Narration = "Payroll For the month " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + "";

                        //if (sumloan != 0)
                        //{
                        //    if (Convert.ToDouble(strAddition) < sumloan)
                        //    {
                        //        Narration = Narration + " Note: Unable to deduct loan installment amount " + sumloan + " because of insufficient salary.";
                        //    }
                        //}

                        //if (float.Parse(strAddition) > float.Parse(strDeduction))
                        //{
                        strEmployeeActualSalary = (float.Parse(strAddition) - float.Parse(strDeduction)).ToString();
                        //strEmployeeActualSalary = Common.Get_Roundoff_Amount_By_Location(strEmployeeActualSalary);
                        ////}
                        //else
                        //{
                        //    strEmployeeActualSalary = (float.Parse(strDeduction) - float.Parse(strAddition)).ToString();
                        //}


                    }


                    double GrossSalary = 0;

                    //GrossSalary = TotalAmountPay;
                    //string EmpDetail = str + "," + GrossSalary.ToString();

                    //here we are updating gross salary in pay_eemployee_month table
                    //28-06-2017 by jitendra

                    UpdateEmployeeGrossSalary(str, ActualGross.ToString(), strMaxVoucheno, strPayrollMonth, strPayrollYear, trns);


                    objAdvancePayment.InsertEmployeeStatement(strCompanyId, strBrandId, strLocationId, strFinancialyearId, str, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "0", GrossSalary.ToString(), strCurrencyId, "0", GrossSalary.ToString(), "0", GrossSalary.ToString(), "Pay_Employe_Month", TransId.ToString(), "0", "Employee Salary of " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + "-" + strPayrollYear, true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), false.ToString(), ref trns);


                    DataTable dtArrear = ObjEmpArrear.GetRecordByEmployeeId(strCompanyId, strBrandId, strLocationId, str, ref trns);

                    if (dtArrear.Rows.Count > 0)
                    {
                        ObjEmpArrear.updateRecord(strCompanyId, strBrandId, strLocationId, dtArrear.Rows[0]["Trans_Id"].ToString(), dtArrear.Rows[0]["Emp_Id"].ToString(), dtArrear.Rows[0]["From_Date"].ToString(), dtArrear.Rows[0]["To_Date"].ToString(), dtArrear.Rows[0]["Arrear_amount"].ToString(), dtArrear.Rows[0]["Currency_Id"].ToString(), true.ToString(), TransId.ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);


                    }


                    //Code End

                    //this code for insert the allowance record from temporary table to permanent table
                    //after that delete from temporary table using empid month and year

                    //code start

                    DataTable dtallowancetemp = new DataTable();
                    dtallowancetemp = objpayrollall.GetPayAllowPayaRoll(str, ref trns);

                    if (dtallowancetemp.Rows.Count > 0)
                    {
                        for (int k = 0; k < dtallowancetemp.Rows.Count; k++)
                        {
                            if (Is_seperateVoucher_ForAllowances && (dtallowancetemp.Rows[k]["AccountNo"].ToString() != "" && dtallowancetemp.Rows[k]["AccountNo"].ToString() != "0"))
                            {
                                if (!FinanceAllowancesList.Split(',').Contains(dtallowancetemp.Rows[k]["Allowance_Id"].ToString()))
                                {
                                    FinanceAllowancesList += dtallowancetemp.Rows[k]["Allowance_Id"].ToString() + ",";
                                }

                                strEmployeeActualSalary = (float.Parse(strEmployeeActualSalary) - float.Parse(dtallowancetemp.Rows[k]["Act_Allowance_Value"].ToString())).ToString();
                                //TotalAmountPay = TotalAmountPay - Convert.ToDouble(dtallowancetemp.Rows[k]["Act_Allowance_Value"].ToString());
                            }

                            objpayrollall.InsertPostPayrollAllowance(str, dtallowancetemp.Rows[k]["Month"].ToString(), dtallowancetemp.Rows[k]["Year"].ToString(), dtemppayrollpost.Rows[0]["Trans_Id"].ToString(), dtallowancetemp.Rows[k]["Allowance_Id"].ToString(), dtallowancetemp.Rows[k]["Allowance_Type"].ToString(), dtallowancetemp.Rows[k]["Allowance_Value"].ToString(), dtallowancetemp.Rows[k]["Act_Allowance_Value"].ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                            objpayrollall.DeletePayAllowanceTemp_By_EmpId_MonthandYear(str, dtallowancetemp.Rows[k]["Month"].ToString(), dtallowancetemp.Rows[k]["Year"].ToString(), ref trns);
                        }
                    }
                    //code end

                    //this code for insert the deduction record from temporary table to permanent table
                    //after that delete from temporary table using empid month and year

                    //code start

                    DataTable dtdeductiontemp = new DataTable();
                    dtdeductiontemp = objpayrolldeduc.GetPayDeducPayaRoll(str, ref trns);

                    if (dtdeductiontemp.Rows.Count > 0)
                    {
                        for (int k1 = 0; k1 < dtdeductiontemp.Rows.Count; k1++)
                        {
                            if (Is_seperateVoucher_ForDeductions && (dtdeductiontemp.Rows[k1]["AccountNo"].ToString() != "" && dtdeductiontemp.Rows[k1]["AccountNo"].ToString() != "0"))
                            {
                                if (!FinanceDeductionList.Split(',').Contains(dtdeductiontemp.Rows[k1]["Deduction_Id"].ToString()))
                                {
                                    FinanceDeductionList += dtdeductiontemp.Rows[k1]["Deduction_Id"].ToString() + ",";
                                }

                                strEmployeeActualSalary = (float.Parse(strEmployeeActualSalary) + float.Parse(dtdeductiontemp.Rows[k1]["Act_Deduction_Value"].ToString())).ToString();

                                //TotalAmountPay = TotalAmountPay + Convert.ToDouble(dtdeductiontemp.Rows[k1]["Act_Deduction_Value"].ToString());
                            }

                            objpayrolldeduc.InsertPostPayrollDeduction(str, dtdeductiontemp.Rows[k1]["Month"].ToString(), dtdeductiontemp.Rows[k1]["Year"].ToString(), dtemppayrollpost.Rows[0]["Trans_Id"].ToString(), dtdeductiontemp.Rows[k1]["Deduction_Id"].ToString(), dtdeductiontemp.Rows[k1]["Deduction_Type"].ToString(), dtdeductiontemp.Rows[k1]["Deduction_Value"].ToString(), dtdeductiontemp.Rows[k1]["Act_Deduction_Value"].ToString(), Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), dtdeductiontemp.Rows[k1]["applicable_amount"].ToString(), "0", "0", "0", "0", "0", "0", "0", "0", "0", true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                            objpayrolldeduc.DeletePayDeductionTemp_By_EmpId_MonthandYear(str, dtdeductiontemp.Rows[k1]["Month"].ToString(), dtdeductiontemp.Rows[k1]["Year"].ToString(), ref trns);
                        }
                    }
                    //code end


                    strEmployeeActualSalary = Common.Get_Roundoff_Amount_By_Location(strEmployeeActualSalary, _strConString, strCompanyId, strLocationId);

                    TotalAmountPay += Convert.ToDouble(strEmployeeActualSalary);

                    string EmpDetail = str + "," + strEmployeeActualSalary.ToString() + "," + Narration + "," + strPayrollMonth + "," + strPayrollYear;
                    EmpDetails[EmpCount] = EmpDetail;



                    //this code for delete the record from pay_employee_month_temp table using employee id and month and year
                    //objPayEmpMonth.DeleteEmpMonthTemp_By_EmpId_MonthandYear(HttpContext.Current.Session["CompId"].ToString(), str, dtempmonthtemp.Rows[0]["Month"].ToString(), dtempmonthtemp.Rows[0]["Year"].ToString(), ref trns);
                }
                else
                {
                    // DisplayMessage("You can not payroll posted");
                }
            }
        }

        //for Account Add

        //On 07-09-2015
        //Add Code for Voucher Entry for Paid Amount           

        //For Bank Account
        string strAccountId = string.Empty;
        string strVMaxIdLoan = string.Empty;
        strAccountId = objAccParameterLocation.getBankAccounts(strCompanyId, strBrandId, strLocationId, ref trns);

        if (strAccountId == "")
        {
            strAccountId = "0";
        }

        //for Voucher Number
        string strVoucherNumber = getFinanceVoucherNo(ref trns, strCompanyId, strBrandId, strLocationId, strDepartmentId, strLoginEmpId, strTimeZoneId, strFinancialyearId);
        int VMaxId = objVoucherHeader.InsertVoucherHeader(strCompanyId, strBrandId, strLocationId, strFinancialyearId, strLocationId, "0", TransId.ToString(), "Pay_Employe_Month", "0", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strVoucherNumber, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "JV", "1/1/1800", "1/1/1800", "", "Payroll for the month " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", strCurrencyId, "0.00", "Payroll posted for the month " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + "", false.ToString(), false.ToString(), false.ToString(), "AV", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
        string strVMaxId = VMaxId.ToString();
        strVMaxIdLoan = VMaxId.ToString();
        string strCompanyCrrValueDr = string.Empty;
        string CompanyCurrDebit = string.Empty;
        if (TotalAmountPay >= 0)
        {

            //For Debit
            strCompanyCrrValueDr = GetCurrency(strCurrencyId, TotalAmountPay.ToString(), strCurrencyId);
            CompanyCurrDebit = strCompanyCrrValueDr.Trim().Split('/')[0].ToString();
            if (strAccountId.Split(',').Contains(strDebitAccount))
            {
                objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strDebitAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", TotalAmountPay.ToString(), "0.00", "Payroll for '" + StrPostedEmployee + "' for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrDebit, "0.00", "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
            }
            else
            {
                objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strDebitAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", TotalAmountPay.ToString(), "0.00", "Payroll for '" + StrPostedEmployee + "' for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrDebit, "0.00", "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
            }
        }
        else
        {
            TotalAmountPay = Math.Abs(TotalAmountPay);


            //For Credit
            strCompanyCrrValueDr = GetCurrency(strCurrencyId, TotalAmountPay.ToString(), strCurrencyId);
            CompanyCurrDebit = strCompanyCrrValueDr.Trim().Split('/')[0].ToString();
            if (strAccountId.Split(',').Contains(strDebitAccount))
            {
                objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strDebitAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", TotalAmountPay.ToString(), "Payroll for '" + StrPostedEmployee + "' for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrDebit, "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
            }
            else
            {
                objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strDebitAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", TotalAmountPay.ToString(), "Payroll for '" + StrPostedEmployee + "' for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrDebit, "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
            }


        }



        //For Credit in employee accounts
        if (EmpDetails.Length > 0)
        {
            string strCompanyCrrValueCr = string.Empty;
            string CompanyCurrCredit = string.Empty;
            foreach (string EmpStr in EmpDetails)
            {
                string Emp_Id = EmpStr.Split(',')[0].ToString();

                string Emp_Sal = EmpStr.Split(',')[1].ToString();
                string Voucher_Narration = EmpStr.Split(',')[2].ToString();
                strPayrollMonth = EmpStr.Split(',')[3].ToString();
                strPayrollYear = EmpStr.Split(',')[4].ToString();
                //for credit
                if (Convert.ToDouble(Emp_Sal) >= 0)
                {
                    strCompanyCrrValueCr = GetCurrency(strCurrencyId, Emp_Sal.ToString(), strCurrencyId);
                    CompanyCurrCredit = strCompanyCrrValueCr.Trim().Split('/')[0].ToString();
                    if (strAccountId.Split(',').Contains(strCreditAccount))
                    {
                        objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strCreditAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", Emp_Sal, Voucher_Narration, "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrCredit, "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                    }
                    else
                    {
                        objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", EmployeeAccountId, Emp_Id, "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", Emp_Sal, Voucher_Narration, "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrCredit, "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                    }
                }
                //for debit
                else
                {
                    Emp_Sal = Math.Abs(Convert.ToDouble(Emp_Sal)).ToString();
                    strCompanyCrrValueCr = GetCurrency(strCurrencyId, Emp_Sal.ToString(), strCurrencyId);
                    CompanyCurrCredit = strCompanyCrrValueCr.Trim().Split('/')[0].ToString();
                    if (strAccountId.Split(',').Contains(strCreditAccount))
                    {
                        objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strCreditAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", Emp_Sal, "0.00", Voucher_Narration + "(Negative Salary Entry)", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrCredit, "0.00", "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                    }
                    else
                    {
                        objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", EmployeeAccountId, Emp_Id, "0", "PP", "1/1/1800", "1/1/1800", "", Emp_Sal, "0.00", Voucher_Narration + "(Negative Salary Entry)", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrCredit, "0.00", "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                    }
                }


                //updated on 21/11/2017
                //updating finance voucher id in pay employee month table in case of rollback we can delete finance voucher
                objDA.execute_Command("update pay_employe_month set Field10='" + strVMaxId + "'   where emp_id='" + Emp_Id + "' and month='" + strPayrollMonth + "' and year='" + strPayrollYear + "'", ref trns);

            }
        }


        //here we are making seperate voucher for leave , allowance and deduction if sepperate voucher option is true .

        if (Is_seperateVoucher_ForLeaveSalary && TotalLeaveSalary > 0)
        {
            strDebitAccount = GetAccountNameByTransId(objAcParameter.GetParameterValue_By_ParameterName(strCompanyId, "Leave Salary Account", ref trns).Rows[0]["Param_Value"].ToString(), ref trns, strCompanyId);
            strDebitAccount = strDebitAccount.Split('/')[1].ToString();
            strVoucherNumber = getFinanceVoucherNo(ref trns, strCompanyId, strBrandId, strLocationId, strDepartmentId, strLoginEmpId, strTimeZoneId, strFinancialyearId);
            VMaxId = objVoucherHeader.InsertVoucherHeader(strCompanyId, strBrandId, strLocationId, strFinancialyearId, strLocationId, "0", TransId.ToString(), "Pay_Employe_Month", "0", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strVoucherNumber, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "JV", "1/1/1800", "1/1/1800", "", "Leave Salary for the month " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", strCurrencyId, "0.00", "Leave Salary for the month " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + "", false.ToString(), false.ToString(), false.ToString(), "AV", "", "", "", strVMaxIdLoan, "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
            strVMaxId = VMaxId.ToString();
            //For Debit
            strCompanyCrrValueDr = GetCurrency(strCurrencyId, TotalLeaveSalary.ToString(), strCurrencyId);
            CompanyCurrDebit = strCompanyCrrValueDr.Trim().Split('/')[0].ToString();
            if (strAccountId.Split(',').Contains(strDebitAccount))
            {
                objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strDebitAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", TotalLeaveSalary.ToString(), "0.00", "Leave Salary  for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrDebit, "0.00", "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
            }
            else
            {
                objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strDebitAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", TotalLeaveSalary.ToString(), "0.00", "Leave Salary  for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrDebit, "0.00", "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
            }

            //for credit


            if (LeaveDetails.Length > 0)
            {
                foreach (string EmpStr in LeaveDetails)
                {
                    string Emp_Id = EmpStr.Split(',')[0].ToString();
                    if (Emp_Id == "")
                    {
                        continue;
                    }
                    string Emp_Sal = EmpStr.Split(',')[1].ToString();
                    strPayrollMonth = EmpStr.Split(',')[3].ToString();
                    strPayrollYear = EmpStr.Split(',')[4].ToString();
                    string Voucher_Narration = EmpStr.Split(',')[2].ToString();
                    string strCompanyCrrValueCr = GetCurrency(strCurrencyId, Emp_Sal.ToString(), strCurrencyId);
                    string CompanyCurrCredit = strCompanyCrrValueCr.Trim().Split('/')[0].ToString();
                    if (strAccountId.Split(',').Contains(strCreditAccount))
                    {
                        objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strCreditAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", Emp_Sal.ToString(), Voucher_Narration, "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrCredit, "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                    }
                    else
                    {
                        objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", EmployeeAccountId, Emp_Id, "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", Emp_Sal, Voucher_Narration, "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrCredit, "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                    }
                    //updated on 21/11/2017
                    //updating finance voucher id in pay employee month table in case of rollback we can delete finance voucher
                    objDA.execute_Command("update pay_employe_month set Leave_Voucher_No='" + strVMaxId + "'   where emp_id='" + Emp_Id + "' and month='" + strPayrollMonth + "' and year='" + strPayrollYear + "'", ref trns);

                }
            }
        }


        //for allowance

        double Total_Finance_Allowance = 0;
        DataTable dtAllowanceList = new DataTable();
        DataTable dtpostedAllowances = new DataTable();
        bool IsVoucherCreated = false;
        string strRefId = string.Empty;
        string strRefName = string.Empty;
        if (Is_seperateVoucher_ForAllowances)
        {

            foreach (string str in FinanceAllowancesList.Split(','))
            {
                if (str == "")
                {
                    continue;
                }

                dtAllowanceList = ObjAllow.GetAllowanceTruebyId(strCompanyId, str, ref trns);

                if (dtAllowanceList.Rows.Count > 0)
                {
                    strRefId = dtAllowanceList.Rows[0]["Field1"].ToString();
                    strRefName = dtAllowanceList.Rows[0]["Allowance"].ToString();
                }
                strVMaxId = "0";

                IsVoucherCreated = false;
                Total_Finance_Allowance = 0;
                if (EmpDetails.Length > 0)
                {
                    foreach (string EmpStr in EmpDetails)
                    {
                        string Emp_Id = EmpStr.Split(',')[0].ToString();
                        strPayrollMonth = EmpStr.Split(',')[3].ToString();
                        strPayrollYear = EmpStr.Split(',')[4].ToString();

                        dtpostedAllowances = objpayrollall.GetPostedAllowanceAll(Emp_Id, strPayrollMonth, strPayrollYear, ref trns);
                        dtpostedAllowances = new DataView(dtpostedAllowances, "Allowance_Id=" + str + "", "", DataViewRowState.CurrentRows).ToTable();
                        if (dtpostedAllowances.Rows.Count > 0)
                        {
                            Total_Finance_Allowance += Convert.ToDouble(dtpostedAllowances.Rows[0]["Act_Allowance_Value"].ToString());

                            if (!IsVoucherCreated && Total_Finance_Allowance > 0)
                            {
                                strDebitAccount = strRefId;
                                strVoucherNumber = getFinanceVoucherNo(ref trns, strCompanyId, strBrandId, strLocationId, strDepartmentId, strLoginEmpId, strTimeZoneId, strFinancialyearId);
                                VMaxId = objVoucherHeader.InsertVoucherHeader(strCompanyId, strBrandId, strLocationId, strFinancialyearId, strLocationId, "0", TransId.ToString(), "Pay_Employe_Month", "0", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strVoucherNumber, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "JV", "1/1/1800", "1/1/1800", "", "Payroll Allowance(" + strRefName + ") for the month " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", strCurrencyId, "0.00", "Payroll Allowance(" + strRefName + ") for the month " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + "", false.ToString(), false.ToString(), false.ToString(), "AV", "", "", "", strVMaxIdLoan, "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                                strVMaxId = VMaxId.ToString();
                                //For Debit
                                strCompanyCrrValueDr = GetCurrency(strCurrencyId, Total_Finance_Allowance.ToString(), strCurrencyId);
                                CompanyCurrDebit = strCompanyCrrValueDr.Trim().Split('/')[0].ToString();
                                if (strAccountId.Split(',').Contains(strDebitAccount))
                                {
                                    objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strDebitAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", Total_Finance_Allowance.ToString(), "0.00", "Payroll Allowance(" + strRefName + ")  for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrDebit, "0.00", "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                                }
                                else
                                {
                                    objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strDebitAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", Total_Finance_Allowance.ToString(), "0.00", "Payroll Allowance(" + strRefName + ")  for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrDebit, "0.00", "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                                }

                                IsVoucherCreated = true;

                            }
                            //for credit

                            if (Convert.ToDouble(dtpostedAllowances.Rows[0]["Act_Allowance_Value"].ToString()) > 0)
                            {
                                string strCompanyCrrValueCr = GetCurrency(strCurrencyId, dtpostedAllowances.Rows[0]["Act_Allowance_Value"].ToString(), strCurrencyId);
                                string CompanyCurrCredit = strCompanyCrrValueCr.Trim().Split('/')[0].ToString();
                                if (strAccountId.Split(',').Contains(strCreditAccount))
                                {
                                    objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strCreditAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", dtpostedAllowances.Rows[0]["Act_Allowance_Value"].ToString(), "Payroll Allowance(" + strRefName + ") for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear, "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrCredit, "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                                }
                                else
                                {
                                    objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", EmployeeAccountId, Emp_Id, "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", dtpostedAllowances.Rows[0]["Act_Allowance_Value"].ToString(), "Payroll Allowance(" + strRefName + ") for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear, "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrCredit, "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                                }


                                objDA.execute_Command("update Pay_Employe_Allowance set Field10='" + strVMaxId + "' where Trans_id=" + dtpostedAllowances.Rows[0]["Trans_Id"].ToString() + "", ref trns);

                            }
                        }
                    }
                }

                if (strVMaxId != "0")
                {
                    strCompanyCrrValueDr = GetCurrency(strCurrencyId, Total_Finance_Allowance.ToString(), strCurrencyId);
                    CompanyCurrDebit = strCompanyCrrValueDr.Trim().Split('/')[0].ToString();
                    objDA.execute_Command("	update ac_voucher_detail set Debit_Amount=" + Total_Finance_Allowance + ",CompanyCurrDebit=" + CompanyCurrDebit + " where Voucher_no=" + strVMaxId + " and Other_account_No='0'", ref trns);

                }

            }
        }



        //For deduction

        if (Is_seperateVoucher_ForDeductions)
        {

            foreach (string str in FinanceDeductionList.Split(','))
            {
                if (str == "")
                {
                    continue;
                }

                dtAllowanceList = ObjDeduc.GetDeductionTruebyId(strCompanyId, str, ref trns);

                if (dtAllowanceList.Rows.Count > 0)
                {
                    strRefId = dtAllowanceList.Rows[0]["Field2"].ToString();
                    strRefName = dtAllowanceList.Rows[0]["Deduction"].ToString();
                }
                strVMaxId = "0";

                IsVoucherCreated = false;
                Total_Finance_Allowance = 0;
                if (EmpDetails.Length > 0)
                {
                    foreach (string EmpStr in EmpDetails)
                    {
                        string Emp_Id = EmpStr.Split(',')[0].ToString();
                        strPayrollMonth = EmpStr.Split(',')[3].ToString();
                        strPayrollYear = EmpStr.Split(',')[4].ToString();

                        dtpostedAllowances = objpayrolldeduc.GetRecordPostedDeductionAll(Emp_Id, strPayrollMonth, strPayrollYear, ref trns);
                        dtpostedAllowances = new DataView(dtpostedAllowances, "Deduction_Id=" + str + "", "", DataViewRowState.CurrentRows).ToTable();
                        if (dtpostedAllowances.Rows.Count > 0)
                        {
                            Total_Finance_Allowance += Convert.ToDouble(dtpostedAllowances.Rows[0]["Act_Deduction_Value"].ToString());

                            if (!IsVoucherCreated && Total_Finance_Allowance > 0)
                            {
                                strDebitAccount = strRefId;
                                strVoucherNumber = getFinanceVoucherNo(ref trns, strCompanyId, strBrandId, strLocationId, strDepartmentId, strLoginEmpId, strTimeZoneId, strFinancialyearId);
                                VMaxId = objVoucherHeader.InsertVoucherHeader(strCompanyId, strBrandId, strLocationId, strFinancialyearId, strLocationId, "0", TransId.ToString(), "Pay_Employe_Month", "0", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strVoucherNumber, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "JV", "1/1/1800", "1/1/1800", "", "Payroll Deduction(" + strRefName + ") for the month " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", strCurrencyId, "0.00", "Payroll Deduction(" + strRefName + ") for the month " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + "", false.ToString(), false.ToString(), false.ToString(), "AV", "", "", "", strVMaxIdLoan, "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                                strVMaxId = VMaxId.ToString();
                                //For Credit
                                strCompanyCrrValueDr = GetCurrency(strCurrencyId, Total_Finance_Allowance.ToString(), strCurrencyId);
                                CompanyCurrDebit = strCompanyCrrValueDr.Trim().Split('/')[0].ToString();
                                if (strAccountId.Split(',').Contains(strDebitAccount))
                                {
                                    objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strDebitAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", Total_Finance_Allowance.ToString(), "Payroll Deduction(" + strRefName + ")  for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrDebit, "0.00", "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                                }
                                else
                                {
                                    objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strDebitAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", Total_Finance_Allowance.ToString(), "Payroll Deduction(" + strRefName + ") for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrDebit, "0.00", "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                                }

                                IsVoucherCreated = true;

                            }
                            //for Debit

                            if (Convert.ToDouble(dtpostedAllowances.Rows[0]["Act_Deduction_Value"].ToString()) > 0)
                            {
                                string strCompanyCrrValueCr = GetCurrency(strCurrencyId, dtpostedAllowances.Rows[0]["Act_Deduction_Value"].ToString(), strCurrencyId);
                                string CompanyCurrCredit = strCompanyCrrValueCr.Trim().Split('/')[0].ToString();
                                if (strAccountId.Split(',').Contains(strCreditAccount))
                                {
                                    objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", strCreditAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", dtpostedAllowances.Rows[0]["Act_Deduction_Value"].ToString(), "0.00", "Payroll Deduction(" + strRefName + ")  for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear, "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrCredit, "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                                }
                                else
                                {
                                    objVoucherDetail.InsertVoucherDetail(strCompanyId, strBrandId, strLocationId, strVMaxId, "1", EmployeeAccountId, Emp_Id, "0", "PP", "1/1/1800", "1/1/1800", "", dtpostedAllowances.Rows[0]["Act_Deduction_Value"].ToString(), "0.00", "Payroll Deduction(" + strRefName + ")  for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear, "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrCredit, "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                                }


                                objDA.execute_Command("update Pay_Employe_Deduction set Field10='" + strVMaxId + "' where Trans_id=" + dtpostedAllowances.Rows[0]["Trans_Id"].ToString() + "", ref trns);

                            }
                        }
                    }
                }

                if (strVMaxId != "0")
                {
                    strCompanyCrrValueDr = GetCurrency(strCurrencyId, Total_Finance_Allowance.ToString(), strCurrencyId);
                    CompanyCurrDebit = strCompanyCrrValueDr.Trim().Split('/')[0].ToString();
                    objDA.execute_Command("	update ac_voucher_detail set Credit_Amount=" + Total_Finance_Allowance + ",CompanyCurrCredit=" + CompanyCurrDebit + " where Voucher_no=" + strVMaxId + " and Other_account_No='0'", ref trns);

                }

            }
        }




        // if Radio button Employee is Select then
        Create_Loan_Voucher(strFinalPayEmp, strLocationId, Dt_Decimal_Count, strCurrencyId, strVMaxIdLoan.ToString(), TransId, strPayrollMonth, strPayrollYear, strLoanCreditAccount, strLoanDebitAccount, IsLoanSettlement, trns, strCompanyId, strBrandId, strFinancialyearId, strDepartmentId, strLoginEmpId, strTimeZoneId, strUserid);




        return true;

    }


    public void Create_Loan_Voucher(string strFinalPayEmp, string strLocationId, DataTable Dt_Decimal_Count, string strCurrencyId, string Salary_Header_ID, int Insert_posted_Pay_Emp_Month_Trans_ID, string strPayrollMonth, string strPayrollYear, string strCreditAccount, string strDebotAccount, bool IsloanSettlement, SqlTransaction trns, string strCompanyid, string strBrandId, string strFinancialyearId, string strDepartmentId, string strLoginEmpId, string strTimeZoneId, string strUserid)
    {


        string Paid_Loan_Amount = string.Empty;

        double ActualGross_Loan = 0;
        string StrPostedEmployee_Loan = string.Empty;
        string[] EmpDetails_Loan = new string[1];
        int EmpCount_Loan = -1;
        double TotalAmountPay_Loan = 0;
        double All_employee_Loan_Sum = 0;
        foreach (string str in strFinalPayEmp.Split(','))
        {
            var arr = strFinalPayEmp.Split(',');
            if (EmpCount_Loan == -1)
                EmpDetails_Loan = new string[arr.Length - 1];
            if ((str != ""))
            {
                EmpCount_Loan++;
                DataTable dtempmonthtemp = new DataTable();
                dtempmonthtemp = objPayEmpMonth.GetallTemprecords_By_EmployeeId(str, ref trns, strCompanyid);
                dtempmonthtemp = new DataView(dtempmonthtemp, "Emp_Id=" + str + " ", "", DataViewRowState.CurrentRows).ToTable();

                if (dtempmonthtemp.Rows.Count > 0)
                {
                    string strEmpCodeOnly = Common.GetEmployeeCode(str, _strConString, strCompanyid);
                    StrPostedEmployee_Loan += strEmpCodeOnly + ",";
                    DataTable Dtloan = new DataTable();
                    Dtloan = objEmpLoan.GetRecord_From_PayEmployeeLoanByStatus(strCompanyid, "Approved", ref trns);
                    string Narration = string.Empty;
                    DataTable dtemppayrollpost = new DataTable();
                    dtemppayrollpost = objPayEmpMonth.GetAllRecordPostedEmpMonth(str, dtempmonthtemp.Rows[0]["Month"].ToString(), dtempmonthtemp.Rows[0]["Year"].ToString(), ref trns, strCompanyid);
                    string strEmployeeActualSalary = string.Empty;
                    if (dtemppayrollpost.Rows.Count > 0)
                    {
                        strEmployeeActualSalary = string.Empty;
                        string WorkedSalary = dtemppayrollpost.Rows[0]["Worked_Min_Salary"].ToString();
                        string NormalOT = dtemppayrollpost.Rows[0]["Normal_OT_Min_Salary"].ToString();
                        string WeekOffOT = dtemppayrollpost.Rows[0]["Week_Off_OT_Min_Salary"].ToString();
                        string HolidayOT = dtemppayrollpost.Rows[0]["Holiday_OT_Min_Salary"].ToString();
                        string LeaveDaysSalary = dtemppayrollpost.Rows[0]["Leave_Days_Salary"].ToString();
                        string WeekOffSalary = dtemppayrollpost.Rows[0]["Week_Off_Salary"].ToString();
                        string HolidaySalary = dtemppayrollpost.Rows[0]["Holidays_Salary"].ToString();
                        string AbsentSalary = dtemppayrollpost.Rows[0]["Absent_Salary"].ToString();
                        string LateMinPenalty = dtemppayrollpost.Rows[0]["Late_Min_Penalty"].ToString();
                        string EarlyMinPenalty = dtemppayrollpost.Rows[0]["Early_Min_Penalty"].ToString();
                        string PartialViolationPenalty = dtemppayrollpost.Rows[0]["Patial_Violation_Penalty"].ToString();
                        string EmpPenalty = dtemppayrollpost.Rows[0]["Employee_Penalty"].ToString();
                        string EmpClaim = dtemppayrollpost.Rows[0]["Employee_Claim"].ToString();
                        string Employee_Loan = dtemppayrollpost.Rows[0]["Emlployee_Loan"].ToString();
                        string TotalAllowance = dtemppayrollpost.Rows[0]["Total_Allowance"].ToString();
                        string TotalDeduction = dtemppayrollpost.Rows[0]["Total_Deduction"].ToString();
                        string PreviousMonthAdjust = dtemppayrollpost.Rows[0]["Previous_Month_Balance"].ToString();
                        string EmployeePF = dtemppayrollpost.Rows[0]["Employee_PF"].ToString();
                        string EmployeeESIC = dtemppayrollpost.Rows[0]["Employee_ESIC"].ToString();
                        ActualGross_Loan = (float.Parse(WorkedSalary) + float.Parse(LeaveDaysSalary) + float.Parse(WeekOffSalary) + float.Parse(HolidaySalary) + float.Parse(TotalAllowance));
                        string strAddition = (float.Parse(WorkedSalary) + float.Parse(NormalOT) + float.Parse(WeekOffOT) + float.Parse(HolidayOT) + float.Parse(LeaveDaysSalary) + float.Parse(WeekOffSalary) + float.Parse(HolidaySalary) + float.Parse(EmpClaim) + float.Parse(TotalAllowance) + float.Parse(PreviousMonthAdjust)).ToString();
                        string strDeduction = (float.Parse(AbsentSalary) + float.Parse(LateMinPenalty) + float.Parse(EarlyMinPenalty) + float.Parse(PartialViolationPenalty) + float.Parse(EmpPenalty) + float.Parse(TotalDeduction)).ToString();
                        double sumloan = 0;

                        Paid_Loan_Amount = Employee_Loan;
                        sumloan = Convert.ToDouble(Employee_Loan);
                        strEmployeeActualSalary = sumloan.ToString();
                        TotalAmountPay_Loan = sumloan;
                        All_employee_Loan_Sum = All_employee_Loan_Sum + sumloan;
                        if (sumloan != 0)
                        {
                            //if (Convert.ToDouble(strAddition) >= sumloan)
                            //{
                            if (IsloanSettlement)
                            {
                                Narration = "Loan deduction till today (Month : " + GetMonthName(Convert.ToInt32(dtempmonthtemp.Rows[0]["Month"].ToString())) + " - " + dtempmonthtemp.Rows[0]["Year"].ToString() + ") (Loan Amount = " + (Convert.ToDouble(sumloan)).ToString(Dt_Decimal_Count.Rows[0]["Decimal_Format"].ToString()) + ")";
                            }
                            else
                            {
                                Narration = "Loan installment deduction for the Month : " + GetMonthName(Convert.ToInt32(dtempmonthtemp.Rows[0]["Month"].ToString())) + " - " + dtempmonthtemp.Rows[0]["Year"].ToString() + " (Loan Amount = " + (Convert.ToDouble(sumloan)).ToString(Dt_Decimal_Count.Rows[0]["Decimal_Format"].ToString()) + ")";
                            }
                            string EmpDetail = str + "," + strEmployeeActualSalary.ToString() + "," + Narration + "," + dtempmonthtemp.Rows[0]["Month"].ToString() + "," + dtempmonthtemp.Rows[0]["Year"].ToString();
                            EmpDetails_Loan[EmpCount_Loan] = EmpDetail;
                            //}
                        }
                    }
                    double GrossSalary = 0;
                    objPayEmpMonth.DeleteEmpMonthTemp_By_EmpId_MonthandYear(strCompanyid, str, dtempmonthtemp.Rows[0]["Month"].ToString(), dtempmonthtemp.Rows[0]["Year"].ToString(), ref trns);
                }
                else
                {

                }
            }
        }

        string strAccountId_Loan = string.Empty;
        DataTable dtAccount_Loan = objAccParameterLocation.GetParameterValue_By_ParameterName(strCompanyid, strBrandId, strLocationId, "BankAccount", ref trns);
        if (dtAccount_Loan.Rows.Count > 0)
        {
            for (int i = 0; i < dtAccount_Loan.Rows.Count; i++)
            {
                if (strAccountId_Loan == "")
                {
                    strAccountId_Loan = dtAccount_Loan.Rows[i]["Param_Value"].ToString();
                }
                else
                {
                    strAccountId_Loan = strAccountId_Loan + "," + dtAccount_Loan.Rows[i]["Param_Value"].ToString();
                }
            }
        }
        else
        {
            strAccountId_Loan = "0";
        }

        if (All_employee_Loan_Sum != 0)
        {
            string strVoucherNumber_Loan = objDocNo.GetDocumentNo(true, "0", false, "160", "302", "0", ref trns, strBrandId, strLocationId, strDepartmentId, strLoginEmpId, strTimeZoneId);
            if (strVoucherNumber_Loan != "")
            {
                DataTable dtCount = objVoucherHeader.GetVoucherAll(strCompanyid, strBrandId, strLocationId, strFinancialyearId, ref trns);
                if (dtCount.Rows.Count > 0)
                {
                    dtCount = new DataView(dtCount, "Voucher_Type='JV'", "", DataViewRowState.CurrentRows).ToTable();
                }
                if (dtCount.Rows.Count == 0)
                {
                    strVoucherNumber_Loan = strVoucherNumber_Loan + "1";
                }
                else
                {
                    double TotalCount = Convert.ToDouble(dtCount.Rows.Count) + 1;
                    strVoucherNumber_Loan = strVoucherNumber_Loan + TotalCount;
                }
            }

            if (EmpDetails_Loan.Length > 0)
            {
                EmpDetails_Loan = EmpDetails_Loan.Where(str => !string.IsNullOrEmpty(str)).ToArray();
                List<string> Temp_List_Emp = new List<string>();
                foreach (string str in EmpDetails_Loan)
                {
                    if (!string.IsNullOrEmpty(str))
                        Temp_List_Emp.Add(str);
                }
                EmpDetails_Loan = Temp_List_Emp.ToArray();
            }

            if (EmpDetails_Loan.Length > 0)
            {
                btnsaveloan_Click(EmpDetails_Loan, Paid_Loan_Amount, "", strPayrollMonth, strPayrollYear, IsloanSettlement, ref trns, strCompanyid);

                int VMaxId_Loan = objVoucherHeader.InsertVoucherHeader(strCompanyid, strBrandId, strLocationId, strFinancialyearId, strLocationId, "0", Insert_posted_Pay_Emp_Month_Trans_ID.ToString(), "Loan_Deduction", "0", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strVoucherNumber_Loan, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), "JV", "1/1/1800", "1/1/1800", "", "Loan Deduction for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", strCurrencyId, "0.00", "Loan installment for the month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + "", false.ToString(), false.ToString(), false.ToString(), "AV", "", "", "", Salary_Header_ID.ToString(), "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                string strVMaxId_Loan = VMaxId_Loan.ToString();
                string strLocationCurrencyId_Loan = ObjLocationMaster.GetLocationMasterById(strCompanyid, strLocationId, ref trns).Rows[0]["Field1"].ToString();
                string strLocationCurrencyValue_Loan = GetCurrency(strLocationCurrencyId_Loan, TotalAmountPay_Loan.ToString(), strCurrencyId);
                string TotalAmountLocation_Loan = TotalAmountPay_Loan.ToString();


                //For Credit


                foreach (string EmpStr in EmpDetails_Loan)
                {

                    string Emp_Id = EmpStr.Split(',')[0].ToString();
                    string Emp_Loan = EmpStr.Split(',')[1].ToString();
                    //For Debit
                    if (Emp_Loan.ToString() != "" && Emp_Loan.ToString() != "0")
                    {
                        string strCompanyCrrValueDr_Loan = GetCurrency(strCurrencyId, TotalAmountPay_Loan.ToString(), strCurrencyId);
                        string CompanyCurrDebit_Loan = strCompanyCrrValueDr_Loan.Trim().Split('/')[0].ToString();
                        if (strAccountId_Loan.Split(',').Contains(strDebotAccount))
                        {
                            objVoucherDetail.InsertVoucherDetail(strCompanyid, strBrandId, strLocationId, strVMaxId_Loan, "1", strDebotAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", Emp_Loan, "Loan installment deposited for the Month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location '" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrDebit_Loan, "0.00", "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                        }
                        else
                        {
                            objVoucherDetail.InsertVoucherDetail(strCompanyid, strBrandId, strLocationId, strVMaxId_Loan, "1", strDebotAccount, Emp_Id, "0", "PP", "1/1/1800", "1/1/1800", "", "0.00", Emp_Loan, "Loan installment deposited for the Month : " + GetMonthName(Convert.ToInt32(strPayrollMonth)) + " - " + strPayrollYear + " On Location'" + GetLocationCode(strLocationId) + "'", "", strLoginEmpId, strCurrencyId, "0.00", "0.00", CompanyCurrDebit_Loan, "0.00", "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                        }


                        string Voucher_Narration = EmpStr.Split(',')[2].ToString();
                        string EmployeeAccountName = GetAccountNameByTransId(objAcParameter.GetParameterValue_By_ParameterName(strCompanyid, "Employee Account", ref trns).Rows[0]["Param_Value"].ToString(), ref trns, strCompanyid);
                        string EmployeeAccountId = EmployeeAccountName.Split('/')[1].ToString();
                        string strCompanyCrrValueCr = GetCurrency(strCurrencyId, TotalAmountPay_Loan.ToString(), strCurrencyId);
                        string CompanyCurrCredit = strCompanyCrrValueCr.Trim().Split('/')[0].ToString();
                        if (strAccountId_Loan.Split(',').Contains(strCreditAccount))
                        {
                            objVoucherDetail.InsertVoucherDetail(strCompanyid, strBrandId, strLocationId, strVMaxId_Loan, "1", strCreditAccount, "0", "0", "PP", "1/1/1800", "1/1/1800", "", Emp_Loan, "0.00", Voucher_Narration, "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrCredit, "", "False", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                        }
                        else
                        {
                            objVoucherDetail.InsertVoucherDetail(strCompanyid, strBrandId, strLocationId, strVMaxId_Loan, "1", EmployeeAccountId, Emp_Id, "0", "PP", "1/1/1800", "1/1/1800", "", Emp_Loan, "0.00", Voucher_Narration, "", strLoginEmpId, strCurrencyId, "0.00", "0.00", "0.00", CompanyCurrCredit, "", "", "", "", "", "True", Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), true.ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), strUserid, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).ToString(), ref trns);
                        }
                    }
                }

                foreach (string EmpStr in EmpDetails_Loan)
                {
                    string Emp_Id = EmpStr.Split(',')[0].ToString();
                    strPayrollMonth = EmpStr.Split(',')[3].ToString();
                    strPayrollYear = EmpStr.Split(',')[4].ToString();

                    UpdateEmployeeLoanVoucherId(Emp_Id, strVMaxId_Loan, strPayrollMonth, strPayrollYear, trns);
                }


            }
        }
    }


    protected void btnsaveloan_Click(string[] EmpDetails_Loan, string Paid_Loan_Amount, string Voucher_ID, string strMonth, string strYear, bool IsLoansettlement, ref SqlTransaction trns, string strCompanyid)
    {
        double netamt = 0;
        double pvbal = 0;
        double instllamt = 0;
        double totalamt = 0;
        double txtamount = 0;
        double currentLoanAmt = 0;
        foreach (string EmpStr in EmpDetails_Loan)
        {
            string Emp_Id = EmpStr.Split(',')[0].ToString();
            string Emp_Loan = EmpStr.Split(',')[1].ToString();
            strMonth = EmpStr.Split(',')[3].ToString();
            strYear = EmpStr.Split(',')[4].ToString();


            double sumloan = 0;
            DataTable Dtloan = new DataTable();
            Dtloan = objEmpLoan.GetRecord_From_PayEmployeeLoanByStatus(strCompanyid, "Approved", ref trns);
            DataTable Dtloan_Str = new DataView(Dtloan, " Emp_Id=" + Emp_Id + "", "", DataViewRowState.CurrentRows).ToTable();
            for (int i = 0; i < Dtloan_Str.Rows.Count; i++)
            {
                string strLoandetailId = string.Empty;
                DataTable dtloandetial = new DataTable();
                dtloandetial = objEmpLoan.GetRecord_From_PayEmployeeLoanDetailByLoanId(Dtloan_Str.Rows[i]["Loan_Id"].ToString(), ref trns);

                if (IsLoansettlement)
                {
                    dtloandetial = new DataView(dtloandetial, "Is_Status='Pending'", "", DataViewRowState.CurrentRows).ToTable();
                }
                else
                {
                    dtloandetial = new DataView(dtloandetial, "Month<=" + DateTime.Now.ToString("MM") + " and Year=" + strYear + " and Is_Status='Pending'", "", DataViewRowState.CurrentRows).ToTable();
                }
                if (dtloandetial.Rows.Count > 0)
                {
                    for (int k = 0; k < dtloandetial.Rows.Count; k++)
                    {
                        //Commented on 09-08-2024 By Lokesh
                        //double txtamt = Convert.ToDouble(Paid_Loan_Amount);

                        double txtamt = Convert.ToDouble(Emp_Loan);

                        DataTable dtempedit = new DataTable();
                        dtempedit = objPayEmpMonth.GetPayEmpMonthTemp_By_EmployeeId(Emp_Id, ref trns, strCompanyid);
                        int counter = 0;
                        instllamt = Convert.ToDouble(dtloandetial.Rows[k]["Montly_Installment"].ToString());
                        txtamount = txtamt;
                        //txtamount = Convert.ToDouble(dtloandetial.Rows[k]["Montly_Installment"].ToString());
                        currentLoanAmt = Convert.ToDouble(dtloandetial.Rows[k]["Total_Amount"].ToString());
                        int trnsid = 0;
                        trnsid = Convert.ToInt32(dtloandetial.Rows[k]["Trans_Id"].ToString());
                        if (currentLoanAmt != txtamount)
                        {
                            DataTable dtlndedetials = new DataTable();
                            dtlndedetials = objEmpLoan.GetRecord_From_PayEmployeeLoanDetailAll(ref trns);
                            dtlndedetials = new DataView(dtlndedetials, "Loan_Id=" + dtloandetial.Rows[k]["Loan_Id"].ToString() + " and Trans_Id > " + (trnsid) + " ", "", DataViewRowState.CurrentRows).ToTable();
                            if (dtlndedetials.Rows.Count > 0)
                            {
                                if (currentLoanAmt > txtamount)
                                {
                                    pvbal = currentLoanAmt - txtamount;
                                    totalamt = instllamt + pvbal;
                                    objEmpLoan.UpdateRecord_loandetials_Amt(strCompanyid, dtloandetial.Rows[k]["Loan_Id"].ToString().ToString(), (trnsid + 1).ToString(), pvbal.ToString(), totalamt.ToString(), "0");
                                }
                                else if (txtamount > currentLoanAmt)
                                {
                                    double TotalPendingamount = currentLoanAmt;
                                    foreach (DataRow dr in dtlndedetials.Rows)
                                    {
                                        TotalPendingamount += Convert.ToDouble(dr["total_amount"].ToString());
                                    }
                                    if (txtamount > TotalPendingamount)
                                    {
                                        //DisplayMessage("Paid amount should not be greater then loan due amount");
                                        //return;
                                    }
                                    double PreviousBalance = 0;
                                    pvbal = txtamount - currentLoanAmt;
                                    PreviousBalance = pvbal;
                                    double currentloaninstallment = 0;
                                    string strStatus = string.Empty;
                                    foreach (DataRow dr in dtlndedetials.Rows)
                                    {
                                        if (pvbal <= 0)
                                        {
                                            break;
                                        }
                                        currentLoanAmt = Convert.ToDouble(dr["Montly_installment"].ToString());
                                        if (PreviousBalance > currentLoanAmt)
                                        {
                                            currentloaninstallment = 0;
                                            PreviousBalance = (currentLoanAmt);
                                        }
                                        else
                                        {
                                            currentloaninstallment = currentLoanAmt - PreviousBalance;
                                        }
                                        objEmpLoan.UpdateRecord_loandetials_Amt(strCompanyid, dtloandetial.Rows[k]["Loan_Id"].ToString().ToString(), dr["Trans_Id"].ToString(), (0 - PreviousBalance).ToString(), currentloaninstallment.ToString(), "0", ref trns);
                                        pvbal = pvbal - PreviousBalance;
                                        if (currentloaninstallment <= 0 || currentloaninstallment <= 1)
                                        {
                                            objDA.execute_Command("update pay_employee_loan_detail set is_status = 'Paid',Employee_Paid=0  where Trans_id = " + dr["Trans_Id"].ToString() + "", ref trns);
                                        }
                                        PreviousBalance = pvbal;
                                    }
                                }
                            }
                            else
                            {
                                counter = 1;
                            }
                        }

                        string strstatus = string.Empty;
                        if (counter == 1)
                        {

                        }
                        else
                        {
                            if (txtamt > 0)
                            {
                                strstatus = "Paid";
                            }
                            else
                            {
                                strstatus = "Pending";
                            }

                            if (objDA.return_DataTable("SELECT TOTAL_AMOUNT FROM PAY_EMPLOYEE_LOAN_DETAIL WHERE tRANS_ID=" + trnsid + " and Total_Amount>0", ref trns).Rows.Count > 0)
                            {
                                objEmpLoan.UpdateRecord_loandetials_WithPaidStatusandAmount(dtloandetial.Rows[k]["Loan_Id"].ToString().ToString(), trnsid.ToString(), txtamt.ToString(), strstatus, ref trns);
                            }
                            else
                            {
                                objEmpLoan.UpdateRecord_loandetials_WithPaidStatusandAmount(dtloandetial.Rows[k]["Loan_Id"].ToString().ToString(), trnsid.ToString(), "0", strstatus, ref trns);
                            }

                        }
                        if (txtamt != 0)
                        {
                            netamt += txtamt;
                        }
                        //loan loop end
                    }
                }
                DataTable dtPay = new DataTable();
                dtPay = objPayEmpMonth.GetRecordByEmpIdMonthYear(Emp_Id, strMonth, strYear, ref trns, strCompanyid);
                if (dtPay.Rows.Count > 0)
                {
                    objPayEmpMonth.UpdateRecord_Pay_Employee_Month(strCompanyid, Emp_Id, strMonth, strYear, dtPay.Rows[0]["Employee_Penalty"].ToString(), dtPay.Rows[0]["Employee_Claim"].ToString(), netamt.ToString(), dtPay.Rows[0]["Total_Allowance"].ToString(), dtPay.Rows[0]["Total_Deduction"].ToString(), dtPay.Rows[0]["Employee_Penalty"].ToString(), dtPay.Rows[0]["Employee_Claim"].ToString(), dtPay.Rows[0]["Employee_PF"].ToString(), dtPay.Rows[0]["Employer_PF"].ToString(), dtPay.Rows[0]["Employee_ESIC"].ToString(), dtPay.Rows[0]["Employer_ESIC"].ToString(), dtPay.Rows[0]["Field3"].ToString(), dtPay.Rows[0]["Field4"].ToString(), dtPay.Rows[0]["Field5"].ToString(), dtPay.Rows[0]["Field6"].ToString(), ref trns);
                }
            }
            //UpdateEmployeeLoanVoucherId(Emp_Id, Voucher_ID, trns);
        }
    }

    public void UpdateEmployeeLoanVoucherId(string strEmpId, string strVoucherNo, string strPayrollMonth, string strPayrollYear, SqlTransaction trns)
    {
        objDA.execute_Command("update Pay_Employe_Month  set LOan_Voucher_No=" + strVoucherNo + " where Emp_Id='" + strEmpId + "' and MONTH='" + strPayrollMonth + "' and YEAR='" + strPayrollYear + "'", ref trns);
    }

    public void UpdateEmployeeGrossSalary(string strEmpId, string strGrossSalary, string strVoucherNo, string strPayrollMonth, string strPayrollYear, SqlTransaction trns)
    {
        objDA.execute_Command("update Pay_Employe_Month  set Field8='" + strGrossSalary + "',Voucher_No=" + strVoucherNo + " where Emp_Id='" + strEmpId + "' and MONTH='" + strPayrollMonth + "' and YEAR='" + strPayrollYear + "'", ref trns);
    }

    public string GetCurrency(string strToCurrency, string strLocalAmount, string strCurrencyId)
    {
        string strExchangeRate = string.Empty;
        string strForienAmount = string.Empty;
        string strCurrency = strCurrencyId;
        //ObjLocationMaster.GetLocationMasterById(Session["CompId"].ToString(), Session["LocId"].ToString()).Rows[0]["Field1"].ToString();


        strExchangeRate = SystemParameter.GetExchageRate(strCurrency, strToCurrency, _strConString);
        try
        {
            strForienAmount = objSys.GetCurencyConversionForInv(strToCurrency, (float.Parse(strExchangeRate) * float.Parse(strLocalAmount)).ToString());
            strForienAmount = strForienAmount + "/" + strExchangeRate;
        }
        catch
        {
            strForienAmount = "0";
        }
        return strForienAmount;
    }

    public DataTable GetTable()
    {
        DataTable dt = new DataTable();
        dt.Columns.Add(new DataColumn("EmpId"));
        dt.Columns.Add(new DataColumn("EmpName"));
        dt.Columns.Add(new DataColumn("Month"));
        dt.Columns.Add(new DataColumn("Year"));
        dt.Columns.Add(new DataColumn("Type"));
        dt.Columns.Add(new DataColumn("RefId"));
        dt.Columns.Add(new DataColumn("ValueType"));
        dt.Columns.Add(new DataColumn("Value"));

        return dt;
    }
    #endregion

    public Double GetEmployeeSickLeavededuction(string strEmpId, string attdate, string strLeaveTypeId, DateTime FinancialYearStartDate, DateTime FinancialYearEndDate, ref SqlTransaction trns)
    {
        DataAccessClass Objda = new DataAccessClass(_strConString);
        double deduction_percentage = 0;



        int exceedDays = 0;

        string strsql = "select count(*), isnull( max(Att_Leave_Request.Leave_Type_Id),0) from Att_Leave_Request inner join Att_Leave_Request_Child on Att_Leave_Request.Trans_Id = Att_Leave_Request_Child.Ref_Id where Att_Leave_Request_Child.Is_Paid='False' and Att_Leave_Request.Emp_Id=" + strEmpId + " and Att_Leave_Request.Is_Approved='True' and Att_Leave_Request_Child.Leave_Date<='" + attdate.ToString() + "' and Att_Leave_Request.From_Date>='" + FinancialYearStartDate.ToString() + "' and Att_Leave_Request.To_Date<='" + FinancialYearEndDate.ToString() + "' and Att_Leave_Request_Child.LeaveType_Id='" + strLeaveTypeId + "'";

        if (Objda.return_DataTable(strsql, ref trns).Rows.Count > 0)
        {
            exceedDays = Convert.ToInt32(Objda.return_DataTable(strsql, ref trns).Rows[0][0].ToString());
            //  strLeaaveTypeId = ObjDa.return_DataTable(strsql).Rows[0][1].ToString();
        }

        DataTable dtdeduction = objLeavededuction.GetRecordbyLeaveTypeandEmployeeId(strLeaveTypeId, strEmpId, ref trns);

        if (dtdeduction.Rows.Count > 0)
        {

            strsql = "select deduction_percentage from Att_LeaveMaster_deduction where daysfrom <= '" + exceedDays.ToString() + "' and daysto >= '" + exceedDays.ToString() + "' and emp_id=" + strEmpId + " and LeaveType_id=" + strLeaveTypeId + "";

            if (Objda.return_DataTable(strsql, ref trns).Rows.Count > 0)
            {
                deduction_percentage = Convert.ToDouble(Objda.return_DataTable(strsql, ref trns).Rows[0][0].ToString());
            }
        }

        return deduction_percentage;

    }


    public double OnDayAbsentSalary(string strCompanyId, double PerMinSal, string EmpId, string strBrandId, string strlocationId)
    {
        double absentsal = 0;

        string AbsentType = string.Empty;
        double Value = 0;
        AbsentType = objAppParam.GetApplicationParameterValueByParamName("Absent_Type", strCompanyId, strBrandId, strlocationId);
        Value = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Absent_Value", strCompanyId, strBrandId, strlocationId));
        bool IsEmpAbsent = false;
        try
        {
            IsEmpAbsent = Convert.ToBoolean(objEmpParam.GetEmployeeParameterByParameterName(EmpId, "Field3"));

        }
        catch
        {

        }
        if (IsEmpAbsent)
        {

            if (AbsentType == "2")
            {
                absentsal = (PerMinSal * Value) / 100;

            }
            else if (AbsentType == "1")
            {
                absentsal = Value / 60;
            }

        }
        return absentsal;
    }


    public double OnDayAbsentSalary(string strCompanyId, double PerMinSal, string EmpId, ref SqlTransaction trns, string strBrandId, string strlocationId)
    {
        double absentsal = 0;

        string AbsentType = string.Empty;
        double Value = 0;
        AbsentType = objAppParam.GetApplicationParameterValueByParamName("Absent_Type", strCompanyId, strBrandId, strlocationId, ref trns);
        Value = double.Parse(objAppParam.GetApplicationParameterValueByParamName("Absent_Value", strCompanyId, strBrandId, strlocationId, ref trns));
        bool IsEmpAbsent = false;
        try
        {
            IsEmpAbsent = Convert.ToBoolean(objEmpParam.GetEmployeeParameterByParameterName(EmpId, "Field3", ref trns));

        }
        catch
        {

        }
        if (IsEmpAbsent)
        {

            if (AbsentType == "2")
            {
                absentsal = (PerMinSal * Value) / 100;

            }
            else if (AbsentType == "1")
            {
                absentsal = Value / 60;
            }

        }
        return absentsal;
    }
    public bool AbsentSandwich(string strEmpId, DateTime Dtfromdate, DateTime dttodate, bool is_sandwichweekoff, bool is_sandwichholiday)
    {
        bool Result = false;

        DataTable dtAttendanceregister = objAttReg.GetAttendanceRegDataByDate_EmpId(strEmpId, Dtfromdate.ToString(), dttodate.ToString());
        DataTable dtholiday = new DataTable();
        DataTable dtweekoff = new DataTable();
        bool PreviousDaysstatus = false;
        bool Nextdaystatus = false;

        if (is_sandwichweekoff && is_sandwichholiday)
        {
            dtAttendanceregister = new DataView(dtAttendanceregister, "Is_week_off='True' or Is_Holiday='True'", "", DataViewRowState.CurrentRows).ToTable();

            for (int i = 0; i < dtAttendanceregister.Rows.Count; i++)
            {
                try
                {
                    PreviousDaysstatus = Convert.ToBoolean(objDA.return_DataTable("select top 1  MAX(Att_Date),Is_Absent from att_attendanceregister where att_date<'" + Convert.ToDateTime(dtAttendanceregister.Rows[i]["att_date"].ToString()) + "' and Emp_Id=" + strEmpId + "  and (Is_Week_Off='False' and Is_Holiday='False')  group by Is_Absent order by MAX(Att_Date) desc ").Rows[0]["Is_Absent"].ToString());
                }
                catch
                {
                    PreviousDaysstatus = false;
                }
                try
                {
                    Nextdaystatus = Convert.ToBoolean(objDA.return_DataTable("select top 1  min(Att_Date),Is_Absent from att_attendanceregister where att_date>'" + Convert.ToDateTime(dtAttendanceregister.Rows[i]["att_date"].ToString()) + "' and Emp_Id=" + strEmpId + "  and (Is_Week_Off='False' and Is_Holiday='False')  group by Is_Absent order by min(Att_Date) asc  ").Rows[0]["Is_Absent"].ToString());
                }
                catch
                {
                    Nextdaystatus = false;
                }

                if (PreviousDaysstatus && Nextdaystatus)
                {
                    objDA.execute_Command("update att_attendanceregister set Is_week_off='False',Is_Holiday='False',Is_Absent='True' where  att_date='" + Convert.ToDateTime(dtAttendanceregister.Rows[i]["att_date"].ToString()) + "' and Emp_Id=" + strEmpId + "");
                }
            }
        }
        else
        {
            if (is_sandwichweekoff)
            {
                dtAttendanceregister = new DataView(dtAttendanceregister, "Is_week_off='True'", "", DataViewRowState.CurrentRows).ToTable();

                for (int i = 0; i < dtAttendanceregister.Rows.Count; i++)
                {
                    try
                    {
                        PreviousDaysstatus = Convert.ToBoolean(objDA.return_DataTable("select top 1  MAX(Att_Date),Is_Absent from att_attendanceregister where att_date<'" + Convert.ToDateTime(dtAttendanceregister.Rows[i]["att_date"].ToString()) + "' and Emp_Id=" + strEmpId + "  and (Is_Week_Off='False')  group by Is_Absent order by MAX(Att_Date) desc  ").Rows[0]["Is_Absent"].ToString());
                    }
                    catch
                    {
                        PreviousDaysstatus = false;
                    }

                    try
                    {
                        Nextdaystatus = Convert.ToBoolean(objDA.return_DataTable("select top 1  min(Att_Date),Is_Absent from att_attendanceregister where att_date>'" + Convert.ToDateTime(dtAttendanceregister.Rows[i]["att_date"].ToString()) + "' and Emp_Id=" + strEmpId + "  and (Is_Week_Off='False')  group by Is_Absent order by min(Att_Date) asc  ").Rows[0]["Is_Absent"].ToString());
                    }
                    catch
                    {
                        Nextdaystatus = false;
                    }

                    if (PreviousDaysstatus && Nextdaystatus)
                    {
                        objDA.execute_Command("update att_attendanceregister set Is_week_off='False',Is_Absent='True' where  att_date='" + Convert.ToDateTime(dtAttendanceregister.Rows[i]["att_date"].ToString()) + "' and Emp_Id=" + strEmpId + "");
                    }
                }
            }

            if (is_sandwichholiday)
            {
                dtAttendanceregister = new DataView(dtAttendanceregister, "Is_Holiday='True'", "", DataViewRowState.CurrentRows).ToTable();

                for (int i = 0; i < dtAttendanceregister.Rows.Count; i++)
                {
                    try
                    {
                        PreviousDaysstatus = Convert.ToBoolean(objDA.return_DataTable("select top 1  MAX(Att_Date),Is_Absent from att_attendanceregister where att_date<'" + Convert.ToDateTime(dtAttendanceregister.Rows[i]["att_date"].ToString()) + "' and Emp_Id=" + strEmpId + "  and (Is_Holiday='False')  group by Is_Absent order by MAX(Att_Date) desc  ").Rows[0]["Is_Absent"].ToString());
                    }
                    catch
                    {
                        PreviousDaysstatus = false;
                    }
                    try
                    {
                        Nextdaystatus = Convert.ToBoolean(objDA.return_DataTable("select top 1  min(Att_Date),Is_Absent from att_attendanceregister where att_date>'" + Convert.ToDateTime(dtAttendanceregister.Rows[i]["att_date"].ToString()) + "' and Emp_Id=" + strEmpId + "  and (Is_Holiday='False')  group by Is_Absent order by min(Att_Date) asc  ").Rows[0]["Is_Absent"].ToString());
                    }
                    catch
                    {
                        Nextdaystatus = false;
                    }

                    if (PreviousDaysstatus && Nextdaystatus)
                    {
                        objDA.execute_Command("update att_attendanceregister set Is_Holiday='False',Is_Absent='True' where  att_date='" + Convert.ToDateTime(dtAttendanceregister.Rows[i]["att_date"].ToString()) + "' and Emp_Id=" + strEmpId + "");
                    }
                }
            }

        }


        return Result;

    }


    public DataTable IsLeaveOnDate(string Date, string EmpId)
    {

        DataTable dtInfo = Objda.return_DataTable("select Emp_Id,Leave_Type_Id from dbo.Att_Leave_Request where Emp_Id=" + EmpId + " and ('" + Date + "' between From_Date and To_Date ) and Is_Approved='True'");

        return dtInfo;
    }


    public string GetApplicationParameterValueByParamName(string strParamName, DataTable dtCompanyParameter)
    {
        return new DataView(dtCompanyParameter, "Param_Name='" + strParamName + "'", "", DataViewRowState.CurrentRows).ToTable().Rows[0]["Param_Value"].ToString();
    }


    public string GetWorkCalculationMethod(string EmpId, string strCompanyId, string strBrandId, string strLocationId, DataTable dtCompanyParameter)
    {
        string WorkCalMethod = string.Empty;


        DataTable dt = objEmpParam.GetEmployeeParameterByEmpId(EmpId, strCompanyId);

        if (dt.Rows.Count > 0)
        {
            WorkCalMethod = dt.Rows[0]["Effective_Work_Cal_Method"].ToString();

        }
        else
        {
            WorkCalMethod = GetApplicationParameterValueByParamName("Effective Work Calculation Method", dtCompanyParameter);
        }

        return WorkCalMethod;

    }
    public string updateEmployeeaLeavebalance(string strEmpId, string Date, DataTable dtLogDetail, bool LogPriorityonLeave)
    {


        double Previous_Days = 0;
        double Total_Days = 0;
        double Used_Days = 0;
        double totalRemaingdays = 0;
        double paidRemainingdays = 0;
        double maxLeaveBalance = 0;
        double TotalpaidDays = 0;
        double TotalPendingDays = 0;




        // thid function created fot add or deduct log process according employee log on leave date 

        string strleaveTypeId = "0";
        string strTransId = string.Empty;
        DataTable dt = ObjLeaveReq.GetLeaveRequestChildData_By_Employeeidanddate(Date.ToString(), strEmpId);


        dtLogDetail = new DataView(dtLogDetail, "Event_Date='" + Date.ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();


        // here we are checking that leave  balance added or not during last log process if added then 


        //code start

        if (dt.Rows.Count > 0)
        {
            strleaveTypeId = dt.Rows[0]["LeaveType_Id"].ToString();
            strTransId = dt.Rows[0]["Trans_Id"].ToString();


            if (new DataView(dt, "Field1<>' '", "", DataViewRowState.CurrentRows).ToTable().Rows.Count > 0)
            {
                objDA.execute_Command("update Att_Leave_Request_Child set Field1=' ' where Trans_Id=" + strTransId + "");

                if (dt.Rows[0]["Is_Paid"].ToString() == "True")
                {
                    objDA.execute_Command("update Att_Employee_Leave_Trans set Used_Days=(Used_Days+1) ,Remaining_Days=(cast( Remaining_Days as decimal(18,6))-1),Field2=(cast( Field2 as decimal(18,6))-1) where emp_id=" + strEmpId + " and Field3='Open' and Leave_Type_Id=" + strleaveTypeId + "");
                }
                else
                {
                    objDA.execute_Command("update Att_Employee_Leave_Trans set Used_Days=(Used_Days+1) ,Remaining_Days=(cast( Remaining_Days as decimal(18,6))-1) where emp_id=" + strEmpId + " and Field3='Open' and Leave_Type_Id=" + strleaveTypeId + "");
                }
            }
            if (new DataView(dt, "Field2<>' '", "", DataViewRowState.CurrentRows).ToTable().Rows.Count > 0)
            {
                objDA.execute_Command("update Att_Leave_Request_Child set Field2=' ' where Trans_Id=" + strTransId + "");

                if (dt.Rows[0]["Is_Paid"].ToString() == "True")
                {
                    objDA.execute_Command("update Att_Employee_Leave_Trans set Previous_Days=(Previous_Days-1),Total_Days= (Total_Days-1),Remaining_Days=(cast( Remaining_Days as decimal(18,6))-1),Field1=(cast( Field1 as decimal(18,6))-1),Field2=(cast( Field2 as decimal(18,6))-1) where emp_id=" + strEmpId + " and Field3='Open' and Leave_Type_Id=" + strleaveTypeId + "");
                }
                else
                {
                    objDA.execute_Command("update Att_Employee_Leave_Trans set Previous_Days=(Previous_Days-1),Total_Days= (Total_Days-1),Remaining_Days=(cast( Remaining_Days as decimal(18,6))-1) where emp_id=" + strEmpId + " and Field3='Open' and Leave_Type_Id=" + strleaveTypeId + "");
                }
            }

            if (dtLogDetail.Rows.Count > 0)
            {

                DataTable dtleaveTransaction = objDA.return_DataTable("select * from Att_Employee_Leave_Trans where emp_id=" + strEmpId + " and Leave_Type_Id=" + strleaveTypeId + " and Field3='Open'");

                if (dtleaveTransaction.Rows.Count > 0)
                {
                    Previous_Days = Convert.ToDouble(dtleaveTransaction.Rows[0]["Previous_Days"].ToString());
                    Total_Days = Convert.ToDouble(dtleaveTransaction.Rows[0]["Total_Days"].ToString());
                    Used_Days = Convert.ToDouble(dtleaveTransaction.Rows[0]["Used_Days"].ToString());
                    totalRemaingdays = Convert.ToDouble(dtleaveTransaction.Rows[0]["Remaining_Days"].ToString());
                    paidRemainingdays = Convert.ToDouble(dtleaveTransaction.Rows[0]["Field2"].ToString());
                    maxLeaveBalance = Attendance.GetMaxLeaveBalance(strleaveTypeId, _strConString);
                    TotalpaidDays = Convert.ToDouble(dtleaveTransaction.Rows[0]["Field1"].ToString());
                    TotalPendingDays = Convert.ToDouble(dtleaveTransaction.Rows[0]["Pending_Days"].ToString());
                }


                totalRemaingdays = (Total_Days - Used_Days - TotalPendingDays) + 1;
                paidRemainingdays = paidRemainingdays + 1;
                TotalpaidDays = TotalpaidDays + 1;

                if (maxLeaveBalance > 0)
                {
                    if (totalRemaingdays > maxLeaveBalance)
                    {
                        totalRemaingdays = maxLeaveBalance;

                    }
                }

                string strLeaveRemarks = "Log Found on leave date " + Convert.ToDateTime(Date.ToString()).ToString("dd-MMM-yyyy");

                if (Used_Days <= 0)
                {
                    objDA.execute_Command("update Att_Leave_Request_Child set Field2='" + strLeaveRemarks + "' where Trans_Id=" + strTransId + "");

                    if (dt.Rows[0]["Is_Paid"].ToString() == "True")
                    {
                        objDA.execute_Command("update Att_Employee_Leave_Trans set Previous_Days=(Previous_Days+1),Total_Days= (Total_Days+1),Remaining_Days=" + totalRemaingdays + ",Field2=" + paidRemainingdays + " where emp_id=" + strEmpId + " and Field3='Open' and Leave_Type_Id=" + strleaveTypeId + "");
                    }
                    else
                    {
                        objDA.execute_Command("update Att_Employee_Leave_Trans set Previous_Days=(Previous_Days+1),Total_Days= (Total_Days+1) ,Remaining_Days=" + totalRemaingdays + " where emp_id=" + strEmpId + " and Field3='Open' and Leave_Type_Id=" + strleaveTypeId + "");
                    }
                }
                else
                {
                    objDA.execute_Command("update Att_Leave_Request_Child set Field1='" + strLeaveRemarks + "' where Trans_Id=" + strTransId + "");

                    if (dt.Rows[0]["Is_Paid"].ToString() == "True")
                    {
                        objDA.execute_Command("update Att_Employee_Leave_Trans set Used_Days=(Used_Days-1) ,Remaining_Days=" + totalRemaingdays + ",Field2=" + paidRemainingdays + " where emp_id=" + strEmpId + " and Field3='Open' and Leave_Type_Id=" + strleaveTypeId + "");
                    }
                    else
                    {
                        objDA.execute_Command("update Att_Employee_Leave_Trans set Used_Days=(Used_Days-1) ,Remaining_Days=" + totalRemaingdays + " where emp_id=" + strEmpId + " and Field3='Open' and Leave_Type_Id=" + strleaveTypeId + "");
                    }
                }

            }
        }

        dt.Dispose();
        dtLogDetail.Dispose();
        return strleaveTypeId;
    }
    public string GetLateRelaxMinPenaltyMin(string empid, DateTime date, int LateMin, string strCompanyId, string strBrandId, string strLocationId, DataTable dtCompanyParameter, int TimeTable_LateRelaxation_Min)
    {

        if (TimeTable_LateRelaxation_Min > 0)
        {
            if (LateMin <= TimeTable_LateRelaxation_Min)
            {
                return "0-0";
            }
        }



        string LateRelaxMinPenaltyMin = "0";

        bool IsLateFun = false;

        int RelaxMin = 0;

        int PenaltyMin = 0;
        int RelaxMinPrev = 0;
        int LateCount = 0;
        string PenaltyMethod = string.Empty;
        DataTable dtAttReg = new DataTable();
        bool IsEmpLate = false;
        try
        {
            IsEmpLate = Convert.ToBoolean(objEmpParam.GetEmployeeParameterByParameterName(empid, "Field1"));
        }
        catch
        {

        }

        dtAttReg = objAttReg.GetAttendanceRegDataByMonth_Year_EmpId(empid, date.Month.ToString(), date.Year.ToString());
        dtAttReg = new DataView(dtAttReg, "Late_Relaxation_Min<>'0'", "Att_Date", DataViewRowState.CurrentRows).ToTable();

        try
        {
            IsLateFun = Convert.ToBoolean(GetApplicationParameterValueByParamName("Is_Late_Penalty", dtCompanyParameter));

            RelaxMin = int.Parse(GetApplicationParameterValueByParamName("Late_Relaxation_Min", dtCompanyParameter));
        }
        catch
        {
        }

        if (IsLateFun)
        {

            PenaltyMethod = GetApplicationParameterValueByParamName("Is_Late_Penalty_Method", dtCompanyParameter);

            if (PenaltyMethod == "Salary")
            {
                if (LateIn_MinuteDeductionType == "2")
                {
                    LateCount = int.Parse(GetApplicationParameterValueByParamName("Late_Occurence", dtCompanyParameter));


                    if (LateMin > 0)
                    {

                        if (dtAttReg.Rows.Count > 0)
                        {
                            if (dtAttReg.Rows.Count >= LateCount)
                            {
                                RelaxMin = 0;
                                PenaltyMin = LateMin;
                            }
                            else
                            {


                                RelaxMinPrev = 0;
                                for (int i = 0; i < dtAttReg.Rows.Count; i++)
                                {
                                    RelaxMinPrev += int.Parse(dtAttReg.Rows[i]["Late_Relaxation_Min"].ToString());
                                }

                                //RelaxMinPrev = int.Parse(dtAttReg.Rows[dtAttReg.Rows.Count - 1]["Late_Relaxation_Min"].ToString());

                                if (RelaxMinPrev < RelaxMin)
                                {

                                    if (LateMin > (RelaxMin - RelaxMinPrev))
                                    {
                                        PenaltyMin = (LateMin - (RelaxMin - RelaxMinPrev));
                                        RelaxMin = LateMin - PenaltyMin;
                                    }
                                    else
                                    {
                                        PenaltyMin = 0;
                                        RelaxMin = LateMin;
                                    }
                                }
                                else
                                {

                                    int LastLate = 0;
                                    for (int i = 0; i < dtAttReg.Rows.Count; i++)
                                    {
                                        LastLate += int.Parse(dtAttReg.Rows[i]["Late_Relaxation_Min"].ToString());
                                    }

                                    if (LastLate < RelaxMin && LastLate != 0)
                                    {
                                        PenaltyMin = RelaxMin - LastLate;
                                        RelaxMin = PenaltyMin;
                                        PenaltyMin = LateMin - PenaltyMin;
                                    }
                                    else
                                    {
                                        RelaxMin = 0;
                                        PenaltyMin = LateMin;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (LateMin > RelaxMin)
                            {
                                PenaltyMin = LateMin - RelaxMin;
                                //RelaxMin = 0;       here Code modified on date 18 Jan 2014 Kunal
                            }
                            else
                            {

                                RelaxMin = LateMin;
                                //10-04-2014
                                //Start
                                // Session["CurLate"] = LateMin.ToString();
                                //End

                            }
                        }




                    }
                    else
                    {

                        int TotLateMin = 0;
                        for (int i = 0; i < dtAttReg.Rows.Count; i++)
                        {
                            TotLateMin += int.Parse(dtAttReg.Rows[i]["Late_Relaxation_Min"].ToString());

                        }

                        if (TotLateMin >= RelaxMin)
                        {
                            //  PenaltyMin = PenaltyDedMin * LateMin;
                            PenaltyMin = LateMin;

                            RelaxMin = 0;
                        }

                    }
                }
                else
                {
                    LateCount = int.Parse(GetApplicationParameterValueByParamName("Late_Occurence", dtCompanyParameter));
                    if (RelaxMin != 0)
                    {
                        RelaxMin = RelaxMin / LateCount;
                    }

                    if (LateMin > 0)
                    {

                        if (LateCount > 0)
                        {
                            if (dtAttReg.Rows.Count >= LateCount)
                            {
                                RelaxMin = 0;
                                PenaltyMin = LateMin;
                            }
                            else
                            {
                                if (LateMin > RelaxMin)
                                {
                                    PenaltyMin = LateMin - RelaxMin;
                                }
                                else
                                {
                                    PenaltyMin = 0;
                                    RelaxMin = LateMin;
                                }


                            }
                        }
                        else if (dtAttReg.Rows.Count > 0)
                        {
                            if (dtAttReg.Rows.Count >= LateCount)
                            {
                                RelaxMin = 0;
                                PenaltyMin = LateMin;
                            }
                            else
                            {
                                RelaxMinPrev = 0;
                                for (int i = 0; i < dtAttReg.Rows.Count; i++)
                                {
                                    RelaxMinPrev += int.Parse(dtAttReg.Rows[i]["Late_Relaxation_Min"].ToString());

                                }


                                //RelaxMinPrev = int.Parse(dtAttReg.Rows[dtAttReg.Rows.Count - 1]["Late_Relaxation_Min"].ToString());

                                if (RelaxMinPrev == RelaxMin && RelaxMinPrev != 0)
                                {
                                    if (LateMin > RelaxMin)
                                    {
                                        PenaltyMin = LateMin - RelaxMin;
                                        if (RelaxMin.ToString() == "0")
                                        {
                                            RelaxMin = 0;
                                        }
                                        else
                                        {
                                            RelaxMin = RelaxMin;
                                        }
                                    }
                                    else
                                    {
                                        // RelaxMin = EarlyMin + RelaxMinPrev;
                                        RelaxMin = LateMin;
                                        //Session["EarlyMin"] = LateMin;
                                    }
                                }

                                else
                                {

                                    //int LastLate = int.Parse(dtAttReg.Rows[dtAttReg.Rows.Count - 1]["Late_Relaxation_Min"].ToString());


                                    int LastLate = 0;
                                    for (int i = 0; i < dtAttReg.Rows.Count; i++)
                                    {
                                        LastLate += int.Parse(dtAttReg.Rows[i]["Late_Relaxation_Min"].ToString());

                                    }

                                    if (LastLate < RelaxMin && LastLate != 0)
                                    {
                                        if (LateMin < RelaxMin)
                                        {
                                            PenaltyMin = 0;
                                            RelaxMin = LateMin;
                                        }
                                        else
                                        {
                                        }

                                        //10-04-2014
                                        //Start
                                        //Session["CurLate"] = PenaltyMin.ToString();
                                        //End
                                        PenaltyMin = LateMin - PenaltyMin;

                                    }
                                    else
                                    {
                                        RelaxMin = 0;
                                        PenaltyMin = LateMin;


                                    }


                                }
                            }
                        }
                        else
                        {
                            if (LateMin > RelaxMin)
                            {
                                PenaltyMin = LateMin - RelaxMin;
                                RelaxMin = RelaxMin;
                            }
                            else
                            {

                                RelaxMin = LateMin;
                                //10-04-2014
                                //Start
                                //HttpContext.Current.Session["CurLate"] = LateMin.ToString();
                                //End

                            }
                        }




                    }
                    else
                    {

                        int TotLateMin = 0;
                        for (int i = 0; i < dtAttReg.Rows.Count; i++)
                        {
                            TotLateMin += int.Parse(dtAttReg.Rows[i]["Late_Relaxation_Min"].ToString());

                        }

                        if (TotLateMin >= RelaxMin)
                        {
                            //  PenaltyMin = PenaltyDedMin * LateMin;
                            PenaltyMin = LateMin;

                            RelaxMin = 0;
                        }

                    }
                }

            }


            /////----------------------------------
            else
            {
                int PenaltyDedMin = 0;

                if (LateMin > 0)
                {
                    PenaltyDedMin = int.Parse(GetApplicationParameterValueByParamName("Late_Penalty_Min_Deduct", dtCompanyParameter));


                    int TotLateMin = 0;
                    for (int i = 0; i < dtAttReg.Rows.Count; i++)
                    {
                        TotLateMin += int.Parse(dtAttReg.Rows[i]["Late_Relaxation_Min"].ToString());

                    }

                    if (TotLateMin >= RelaxMin)
                    {
                        //  PenaltyMin = PenaltyDedMin * LateMin;
                        PenaltyMin = LateMin;

                        RelaxMin = 0;
                    }
                    else
                    {
                        if ((TotLateMin + LateMin) > RelaxMin)
                        {
                            RelaxMin = RelaxMin - TotLateMin;
                            PenaltyMin = LateMin - RelaxMin;

                        }
                        else
                        {
                            RelaxMin = LateMin;
                        }
                    }
                }
                else
                {

                    int TotLateMin = 0;
                    for (int i = 0; i < dtAttReg.Rows.Count; i++)
                    {
                        TotLateMin += int.Parse(dtAttReg.Rows[i]["Late_Relaxation_Min"].ToString());

                    }

                    if (TotLateMin >= RelaxMin)
                    {
                        //  PenaltyMin = PenaltyDedMin * LateMin;
                        PenaltyMin = LateMin;

                        RelaxMin = 0;
                    }

                }
            }
        }
        LateRelaxMinPenaltyMin = RelaxMin.ToString() + "-" + PenaltyMin.ToString();
        return LateRelaxMinPenaltyMin;


    }
    public string GetEarlyRelaxMinPenaltyMin(string empid, DateTime date, int EarlyMin, string strCompanyId, string strBrandId, string strLocationId, DataTable dtCompanyParameter, int TimeTable_EarlyRelaxation_Min)
    {

        if (TimeTable_EarlyRelaxation_Min > 0)
        {
            if (EarlyMin <= TimeTable_EarlyRelaxation_Min)
            {
                return "0-0";
            }
        }



        string EarlyRelaxMinPenaltyMin = "0";

        bool IsEarlyFun = false;

        int RelaxMin = 0;

        int PenaltyMin = 0;
        int RelaxMinPrev = 0;
        int EarlyCount = 0;
        string PenaltyMethod = string.Empty;
        DataTable dtAttReg = new DataTable();
        dtAttReg = objAttReg.GetAttendanceRegDataByMonth_Year_EmpId(empid, date.Month.ToString(), date.Year.ToString());
        dtAttReg = new DataView(dtAttReg, "Early_Relaxation_Min<>'0'", "Att_Date", DataViewRowState.CurrentRows).ToTable();

        bool IsEmpEarly = false;
        try
        {
            IsEmpEarly = Convert.ToBoolean(objEmpParam.GetEmployeeParameterByParameterName(empid, "Field2"));
        }
        catch
        {

        }
        try
        {
            IsEarlyFun = Convert.ToBoolean(GetApplicationParameterValueByParamName("Is_Early_Penalty", dtCompanyParameter));
            RelaxMin = int.Parse(GetApplicationParameterValueByParamName("Early_Relaxation_Min", dtCompanyParameter));
        }
        catch
        {

        }
        if (IsEarlyFun)
        {

            PenaltyMethod = GetApplicationParameterValueByParamName("Is_Early_Penalty_Method", dtCompanyParameter);

            if (PenaltyMethod == "Salary")
            {

                if (EarlyOut_MinuteDeductionType == "2")
                {
                    EarlyCount = int.Parse(GetApplicationParameterValueByParamName("Early_Occurence", dtCompanyParameter));


                    if (EarlyMin > 0)
                    {

                        if (dtAttReg.Rows.Count > 0)
                        {
                            if (dtAttReg.Rows.Count >= EarlyCount)
                            {
                                RelaxMin = 0;
                                PenaltyMin = EarlyMin;
                            }
                            else
                            {
                                RelaxMinPrev = 0;

                                for (int i = 0; i < dtAttReg.Rows.Count; i++)
                                {
                                    RelaxMinPrev += int.Parse(dtAttReg.Rows[i]["Early_Relaxation_Min"].ToString());

                                }


                                if (RelaxMinPrev < RelaxMin && RelaxMinPrev != 0)
                                {
                                    if (EarlyMin > (RelaxMin - RelaxMinPrev))
                                    {
                                        PenaltyMin = EarlyMin - (RelaxMin - RelaxMinPrev);
                                        //RelaxMin = RelaxMinPrev + (RelaxMin - RelaxMinPrev);
                                        RelaxMin = (RelaxMin - RelaxMinPrev);
                                    }
                                    else
                                    {
                                        RelaxMin = EarlyMin;
                                        //Session["EarlyMin"] = EarlyMin;
                                    }
                                }
                                else
                                {

                                    int LastEarly = 0;

                                    for (int i = 0; i < dtAttReg.Rows.Count; i++)
                                    {
                                        LastEarly += int.Parse(dtAttReg.Rows[i]["Early_Relaxation_Min"].ToString());

                                    }


                                    if (LastEarly < RelaxMin && LastEarly != 0)
                                    {

                                        PenaltyMin = RelaxMin - LastEarly;
                                        RelaxMin = LastEarly + PenaltyMin;
                                        PenaltyMin = EarlyMin - PenaltyMin;

                                    }
                                    else
                                    {



                                        RelaxMin = 0;
                                        PenaltyMin = EarlyMin;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (EarlyMin > RelaxMin)
                            {
                                PenaltyMin = EarlyMin - RelaxMin;

                            }
                            else
                            {
                                RelaxMin = EarlyMin;
                            }
                        }




                    }

                    else
                    {
                        int TotEarlyMin = 0;
                        for (int i = 0; i < dtAttReg.Rows.Count; i++)
                        {
                            TotEarlyMin += int.Parse(dtAttReg.Rows[i]["Early_Relaxation_Min"].ToString());

                        }

                        if (TotEarlyMin >= RelaxMin)
                        {
                            // PenaltyMin = PenaltyDedMin * EarlyMin;
                            PenaltyMin = EarlyMin;

                            RelaxMin = 0;
                        }
                    }
                }
                else
                {
                    EarlyCount = int.Parse(GetApplicationParameterValueByParamName("Early_Occurence", dtCompanyParameter));

                    if (RelaxMin != 0)
                    {
                        RelaxMin = RelaxMin / EarlyCount;
                    }

                    if (EarlyMin > 0)
                    {

                        if (dtAttReg.Rows.Count > 0)
                        {
                            if (dtAttReg.Rows.Count >= EarlyCount)
                            {
                                RelaxMin = 0;
                                PenaltyMin = EarlyMin;
                            }
                            else
                            {

                                RelaxMinPrev = 0;

                                for (int i = 0; i < dtAttReg.Rows.Count; i++)
                                {
                                    RelaxMinPrev += int.Parse(dtAttReg.Rows[i]["Early_Relaxation_Min"].ToString());

                                }


                                if (RelaxMinPrev == RelaxMin && RelaxMinPrev != 0)
                                {
                                    if (EarlyMin > RelaxMin)
                                    {
                                        PenaltyMin = EarlyMin - RelaxMin;
                                        if (RelaxMin.ToString() == "0")
                                        {
                                            RelaxMin = 0;
                                        }
                                        else
                                        {
                                            RelaxMin = RelaxMin;
                                        }
                                    }
                                    else
                                    {
                                        // RelaxMin = EarlyMin + RelaxMinPrev;
                                        RelaxMin = EarlyMin;
                                        //Session["EarlyMin"] = EarlyMin;
                                    }
                                }
                                else
                                {

                                    int LastEarly = 0;

                                    for (int i = 0; i < dtAttReg.Rows.Count; i++)
                                    {
                                        LastEarly += int.Parse(dtAttReg.Rows[i]["Early_Relaxation_Min"].ToString());

                                    }



                                    if (LastEarly < RelaxMin && LastEarly != 0)
                                    {

                                        //PenaltyMin = RelaxMin - LastEarly;
                                        RelaxMin = RelaxMin;

                                        //Update Condition On 02-06-2015
                                        if (EarlyMin > RelaxMin)
                                        {
                                            PenaltyMin = EarlyMin - RelaxMin;
                                        }
                                        else
                                        {
                                            PenaltyMin = RelaxMin - EarlyMin;
                                        }
                                    }
                                    else
                                    {



                                        RelaxMin = 0;
                                        PenaltyMin = EarlyMin;
                                    }


                                }
                            }
                        }
                        else
                        {
                            if (EarlyMin > RelaxMin)
                            {
                                PenaltyMin = EarlyMin - RelaxMin;

                            }
                            else
                            {
                                RelaxMin = EarlyMin;
                            }
                        }




                    }

                    else
                    {
                        int TotEarlyMin = 0;
                        for (int i = 0; i < dtAttReg.Rows.Count; i++)
                        {
                            TotEarlyMin += int.Parse(dtAttReg.Rows[i]["Early_Relaxation_Min"].ToString());

                        }

                        if (TotEarlyMin >= RelaxMin)
                        {
                            // PenaltyMin = PenaltyDedMin * EarlyMin;
                            PenaltyMin = EarlyMin;

                            RelaxMin = 0;
                        }
                    }
                }
            }


            //.................... Salary End
            else
            {
                int PenaltyDedMin = 0;

                if (EarlyMin > 0)
                {
                    PenaltyDedMin = int.Parse(GetApplicationParameterValueByParamName("Early_Penalty_Min_Deduct", dtCompanyParameter));

                    int TotEarlyMin = 0;
                    for (int i = 0; i < dtAttReg.Rows.Count; i++)
                    {
                        TotEarlyMin += int.Parse(dtAttReg.Rows[i]["Early_Relaxation_Min"].ToString());

                    }

                    if (TotEarlyMin >= RelaxMin)
                    {
                        // PenaltyMin = PenaltyDedMin * EarlyMin;
                        PenaltyMin = EarlyMin;

                        RelaxMin = 0;
                    }
                    else
                    {




                        if ((TotEarlyMin + EarlyMin) > RelaxMin)
                        {
                            RelaxMin = RelaxMin - TotEarlyMin;
                            PenaltyMin = EarlyMin - RelaxMin;

                        }
                        else
                        {
                            RelaxMin = EarlyMin;
                        }
                    }


                }
                else
                {
                    int TotEarlyMin = 0;
                    for (int i = 0; i < dtAttReg.Rows.Count; i++)
                    {
                        TotEarlyMin += int.Parse(dtAttReg.Rows[i]["Early_Relaxation_Min"].ToString());

                    }

                    if (TotEarlyMin >= RelaxMin)
                    {
                        // PenaltyMin = PenaltyDedMin * EarlyMin;
                        PenaltyMin = EarlyMin;

                        RelaxMin = 0;
                    }
                }
            }
        }
        EarlyRelaxMinPenaltyMin = RelaxMin.ToString() + "-" + PenaltyMin.ToString();



        return EarlyRelaxMinPenaltyMin;


    }
    public string GetPartialViolationMin(string EmpId, DateTime Date, string TimeTableId, string strCompanyId, string strBrandId, string strLocationId, string WorkCalculationMethod, DataTable dtPartialdetail, DataTable DtNextPartailInOut, string strTimeZoneId)
    {
        string PartialMin_Violation = string.Empty;
        int PartialMin = 0;
        int PartialViolationMin = 0;
        bool IsCompPartial = false;
        bool IsEmpPartial = false;
        string PartialInKey = string.Empty;
        string PartialOutKey = string.Empty;
        int PartialAssignMin = 0;
        int PartialMinInDay = 0;
        int CompViolationMin = 0;
        int EmpPartialAssignMin = 0;
        int PartialMinEmp = 0;
        int EmpTotalPartialMin = 0;
        string WithKeyPref = string.Empty;
        WithKeyPref = objAppParam.GetApplicationParameterValueByParamName("With Key Preference", strCompanyId, strBrandId, strLocationId);

        DataTable dt = objEmpParam.GetEmployeeParameterByEmpId(EmpId, strCompanyId);

        if (dt.Rows.Count > 0)
        {
            IsEmpPartial = Convert.ToBoolean(dt.Rows[0]["Is_Partial_Enable"].ToString());
            PartialAssignMin = Convert.ToInt32(dt.Rows[0]["Partial_Leave_Mins"].ToString());
            PartialMinInDay = Convert.ToInt32(dt.Rows[0]["Partial_Leave_Day"].ToString());
        }

        DataTable dtLogPartial = new DataTable();
        DataTable dtLogPartialIn = new DataTable();
        DataTable dtLogPartialOut = new DataTable();
        DateTime PartialIn = Convert.ToDateTime("1/1/1900");
        DateTime PartialOut = Convert.ToDateTime("1/1/1900");


        IsCompPartial = Convert.ToBoolean(objAppParam.GetApplicationParameterValueByParamName("Partial_Leave_Enable", strCompanyId, strBrandId, strLocationId));
        if (IsCompPartial && IsEmpPartial)
        {
            DataTable dtLog = new DataTable();


            DataTable dtPartialOffical = objPartialReq.GetPartialLeaveRequestByEmpIdAndCurrentMonthYear(strCompanyId, EmpId, Date.Month.ToString(), Date.Year.ToString());
            dtPartialOffical = new DataView(dtPartialOffical, "Emp_Id='" + EmpId + "' and Partial_Leave_Type<>'0' and Is_Confirmed='Approved'", "", DataViewRowState.CurrentRows).ToTable();
            DataTable DtReg = objAttReg.GetAttendanceRegDataByMonth_Year_EmpId(EmpId, Date.Month.ToString(), Date.Year.ToString());


            for (int k = 0; k < DtReg.Rows.Count; k++)
            {
                DataTable dt2 = new DataView(dtPartialOffical, "Partial_Leave_Date<>'" + DtReg.Rows[k]["Att_Date"].ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();
                if (dt2.Rows.Count == 0)
                {
                    EmpTotalPartialMin += int.Parse(DtReg.Rows[k]["Partial_Min"].ToString());
                }
            }


            CompViolationMin = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Partial_Violation_Min", strCompanyId, strBrandId, strLocationId));
            if (PartialAssignMin == 0)
            {
                PartialAssignMin = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Total Partial Leave Minutes", strCompanyId, strBrandId, strLocationId));

            }
            if (PartialMinInDay == 0)
            {
                PartialMinInDay = int.Parse(objAppParam.GetApplicationParameterValueByParamName("Partial Leave Minute Use In A Day", strCompanyId, strBrandId, strLocationId));
            }

            // Open For Pryce Pegasus 
            DataTable dtPartialLeave = objPartialReq.GetPartialLeaveRequestByDate(strCompanyId, Date.ToString());
            dtPartialLeave = new DataView(dtPartialLeave, "Emp_Id='" + EmpId + "'", "", DataViewRowState.CurrentRows).ToTable();


            // Open For NIC  
            // DataTable dtPartialLeave = objPartialReq.GetPartialLeaveType_EmpId(strCompanyId, EmpId, Date.ToString());



            PartialInKey = objAppParam.GetApplicationParameterValueByParamName("Partial Leave In  Func Key", strCompanyId, strBrandId, strLocationId);
            PartialOutKey = objAppParam.GetApplicationParameterValueByParamName("Partial Leave Out  Func Key", strCompanyId, strBrandId, strLocationId);
            string PartialInTime = string.Empty;
            string PartialOutTime = string.Empty;
            string WorkCalMethod = string.Empty;
            string DefaultShiftId1 = string.Empty;


            DateTime PartialInTimeF = Convert.ToDateTime("1/1/1900");
            DateTime PartialOutTimeF = Convert.ToDateTime("1/1/1900");
            PartialInTime = Convert.ToDateTime("1/1/1900").ToString();

            if (dtPartialLeave.Rows.Count > 0)
            {

                for (int i = 0; i < dtPartialLeave.Rows.Count; i++)
                {
                    EmpPartialAssignMin = 0;
                    EmpPartialAssignMin = objAttendance.GetTimeDifference(Convert.ToDateTime(dtPartialLeave.Rows[i]["From_Time"].ToString()), Convert.ToDateTime(dtPartialLeave.Rows[i]["To_Time"].ToString()));

                    // On 21-07-2015
                    DateTime FromTime = new DateTime(Convert.ToDateTime(dtPartialLeave.Rows[i]["Partial_Leave_Date"]).Year, Convert.ToDateTime(dtPartialLeave.Rows[i]["Partial_Leave_Date"]).Month, Convert.ToDateTime(dtPartialLeave.Rows[i]["Partial_Leave_Date"]).Day, Convert.ToDateTime(dtPartialLeave.Rows[i]["From_Time"].ToString()).Hour, Convert.ToDateTime(dtPartialLeave.Rows[i]["From_Time"].ToString()).Minute, Convert.ToDateTime(dtPartialLeave.Rows[i]["From_Time"].ToString()).Second);
                    DateTime ToTime = new DateTime(Convert.ToDateTime(dtPartialLeave.Rows[i]["Partial_Leave_Date"]).Year, Convert.ToDateTime(dtPartialLeave.Rows[i]["Partial_Leave_Date"]).Month, Convert.ToDateTime(dtPartialLeave.Rows[i]["Partial_Leave_Date"]).Day, Convert.ToDateTime(dtPartialLeave.Rows[i]["To_Time"].ToString()).Hour, Convert.ToDateTime(dtPartialLeave.Rows[i]["To_Time"].ToString()).Minute, Convert.ToDateTime(dtPartialLeave.Rows[i]["To_Time"].ToString()).Second);
                    //commented by jitendra upadhyay on 27-02-2018


                    FromTime = FromTime.AddMinutes(-CompViolationMin);





                    //if shift id not equal to 0 then find shift onduty time and off duty time
                    // then findout partial leave between that shift
                    if (TimeTableId != "0" && TimeTableId != "")
                    {
                        //Modified By Priya Jain(03.04.2014)
                        DateTime OnDutyTime = new DateTime();
                        DateTime OffDutyTime = new DateTime();

                        DefaultShiftId1 = objAppParam.GetApplicationParameterValueByParamName("Default_Shift", strCompanyId, strBrandId, strLocationId);
                        DataTable defaultShift = new DataTable();
                        defaultShift = objShift.GetShiftDescriptionByShiftId(DefaultShiftId1);
                        DataTable dtshift = objEmpSch.GetSheduleDescriptionByEmpId(EmpId, Date.ToString());
                        dtshift = new DataView(dtshift, "TimeTable_Id='" + TimeTableId + "'", "", DataViewRowState.CurrentRows).ToTable();
                        if (dtshift.Rows.Count > 0)
                        {


                            OnDutyTime = new DateTime(Date.Year, Date.Month, Date.Day, Convert.ToDateTime(dtshift.Rows[0]["OnDuty_Time"].ToString()).Hour, Convert.ToDateTime(dtshift.Rows[0]["OnDuty_Time"].ToString()).Minute, Convert.ToDateTime(dtshift.Rows[0]["OnDuty_Time"].ToString()).Second);
                            OffDutyTime = new DateTime(Date.Year, Date.Month, Date.Day, Convert.ToDateTime(dtshift.Rows[0]["OffDuty_Time"].ToString()).Hour, Convert.ToDateTime(dtshift.Rows[0]["OffDuty_Time"].ToString()).Minute, Convert.ToDateTime(dtshift.Rows[0]["OffDuty_Time"].ToString()).Second);
                            //string WorkCalculationMethod = (string)ViewState["WorkCalculationMethod"];

                            //Modified By Priya Jain(03.04.2014)
                            //Modified By Priya Jain(04.04.2014)

                            if (WorkCalculationMethod == "PairWise")
                            {
                                //Same Day Log

                                if (Convert.ToDateTime(OnDutyTime) < Convert.ToDateTime(OffDutyTime))
                                {

                                    dtLog = objAttLog.GetAttendanceLogByDate(strCompanyId, Date.ToString(), Date.ToString());
                                    dtLog = new DataView(dtLog, "Emp_Id='" + EmpId + "'", "", DataViewRowState.CurrentRows).ToTable();
                                    if (PartialInKey != "")
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            dtLogPartialIn = new DataView(dtLog, "Func_Code='" + PartialInKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            //dtLogPartialIn = new DataView(dtLog, "", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            dtLogPartialIn = new DataView(dtLog, "Type='In' AND Verified_Type='By Partial Leave'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        // dtLogPartialIn = new DataView(dtLogPartialIn, "Event_Time>='" + FromTime.ToString() + "' and Event_Time<='" + ToTime.ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();


                                        if (dtLogPartialIn.Rows.Count > 0)
                                        {
                                            PartialIn = Convert.ToDateTime(dtLogPartialIn.Rows[0]["Event_Time"].ToString());
                                        }
                                    }

                                    if (PartialOutKey != "")
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            dtLogPartialOut = new DataView(dtLog, "Func_Code='" + PartialOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            dtLogPartialOut = new DataView(dtLog, "Type='Out' AND Verified_Type='By Partial Leave'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }


                                        //dtLogPartialOut = new DataView(dtLogPartialOut, "Event_Time>='" + ToTime + "'", "", DataViewRowState.CurrentRows).ToTable();

                                        if (dtLogPartialOut.Rows.Count > 0)
                                        {
                                            PartialOut = Convert.ToDateTime(dtLogPartialOut.Rows[0]["Event_Time"].ToString());

                                        }

                                    }


                                }
                                //Next day Log
                                else if (Convert.ToDateTime(OnDutyTime) > Convert.ToDateTime(OffDutyTime))
                                {

                                    string Partial = "By Partial Leave";
                                    DataTable dtpartiallogin = new DataTable();
                                    dtpartiallogin = new DataView(dtPartialdetail, "Emp_Id='" + EmpId + "'", "", DataViewRowState.CurrentRows).ToTable();



                                    if (PartialOutKey != "")
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            dtLogPartialOut = new DataView(dtLogPartialIn, "Func_Code='" + PartialOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            dtLogPartialOut = new DataView(dtpartiallogin, "Verified_Type='" + Partial + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }


                                        dtLogPartialOut = new DataView(dtLogPartialOut, "Event_Time>='" + ToTime + "'", "", DataViewRowState.CurrentRows).ToTable();

                                        //Modified By Priya Jain(03.04.2014)
                                        if (dtLogPartialOut.Rows.Count > 1)
                                        {
                                            PartialInTime = dtLogPartialOut.Rows[0]["Event_Time"].ToString();
                                            PartialInTimeF = Convert.ToDateTime(PartialInTime);

                                            try
                                            {
                                                PartialOutTime = dtLogPartialOut.Rows[1]["Event_Time"].ToString();
                                                PartialOutTimeF = Convert.ToDateTime(PartialOutTime);

                                            }
                                            catch
                                            {
                                            }

                                        }




                                    }


                                }
                            }
                            //Modified By Priya Jain(04.04.2014)
                            // InOut Method 

                            else
                            {

                                //Same Day Log

                                if (Convert.ToDateTime(OnDutyTime) < Convert.ToDateTime(OffDutyTime))
                                {

                                    dtLog = objAttLog.GetAttendanceLogByDate(strCompanyId, Date.ToString(), Date.ToString());
                                    dtLog = new DataView(dtLog, "Emp_Id='" + EmpId + "'", "", DataViewRowState.CurrentRows).ToTable();
                                    if (PartialInKey != "")
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            dtLogPartialIn = new DataView(dtLog, "Type='In' AND Verified_Type='By Partial Leave'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            //dtLogPartialIn = new DataView(dtLog, "", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            dtLogPartialIn = new DataView(dtLog, "Type='In' AND Verified_Type='By Partial Leave'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        // dtLogPartialIn = new DataView(dtLogPartialIn, "Event_Time>='" + FromTime.ToString() + "' and Event_Time<='" + ToTime.ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();



                                        if (dtLogPartialIn.Rows.Count > 0)
                                        {
                                            PartialIn = Convert.ToDateTime(dtLogPartialIn.Rows[0]["Event_Time"].ToString());
                                        }
                                    }

                                    if (PartialOutKey != "")
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            dtLogPartialOut = new DataView(dtLog, "Type='Out' AND Verified_Type='By Partial Leave'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            dtLogPartialOut = new DataView(dtLog, "Type='Out' AND Verified_Type='By Partial Leave'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }


                                        // dtLogPartialOut = new DataView(dtLogPartialOut, "Event_Time>='" + ToTime + "'", "", DataViewRowState.CurrentRows).ToTable();
                                        // dtLogPartialOut = new DataView(dtLogPartialOut, "Event_Time>='" + ToTime + "'", "", DataViewRowState.CurrentRows).ToTable();
                                        if (dtLogPartialOut.Rows.Count > 0)
                                        {
                                            PartialOut = Convert.ToDateTime(dtLogPartialOut.Rows[0]["Event_Time"].ToString());
                                        }
                                    }
                                }

                                // Next Day Log


                                else if (Convert.ToDateTime(OnDutyTime) > Convert.ToDateTime(OffDutyTime))
                                {

                                    string Partial = "By Partial Leave";
                                    DataTable dtpartiallogin = DtNextPartailInOut;
                                    dtpartiallogin = new DataView(dtpartiallogin, "Emp_Id='" + EmpId + "'", "", DataViewRowState.CurrentRows).ToTable();



                                    if (PartialOutKey != "")
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            dtLogPartialOut = new DataView(dtLogPartialIn, "Func_Code='" + PartialOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            dtLogPartialOut = new DataView(dtpartiallogin, "Verified_Type='" + Partial + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }


                                        dtLogPartialOut = new DataView(dtLogPartialOut, "Event_Time>='" + ToTime + "'", "", DataViewRowState.CurrentRows).ToTable();

                                        //Modified By Priya Jain(03.04.2014)
                                        if (dtLogPartialOut.Rows.Count > 1)
                                        {
                                            PartialInTime = dtLogPartialOut.Rows[0]["Event_Time"].ToString();
                                            PartialInTimeF = Convert.ToDateTime(PartialInTime);

                                            try
                                            {
                                                PartialOutTime = dtLogPartialOut.Rows[1]["Event_Time"].ToString();
                                                PartialOutTimeF = Convert.ToDateTime(PartialOutTime);

                                            }
                                            catch
                                            {
                                            }

                                        }




                                    }


                                }
                            }




                            //***************************

                            //Modified By Priya Jain(03.04.2014)
                            //if (!((FromTime >= OnDutyTime) && (FromTime <= OffDutyTime)))
                            if (true)
                            {

                                //if (PartialIn != Convert.ToDateTime("1/1/1900") && PartialOut != Convert.ToDateTime("1/1/1900"))
                                //{

                                //    PartialMin = objAttendance.GetTimeDifference(PartialIn, PartialOut);


                                //    if ((EmpTotalPartialMin + PartialMin) < PartialAssignMin)
                                //    {
                                //        if ((PartialMin) < objAttendance.GetTimeDifference(FromTime, ToTime))
                                //        {
                                //            PartialMinEmp += PartialMin;

                                //        }
                                //        else
                                //        {
                                //            PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                //            PartialViolationMin += PartialMin - PartialMinEmp;
                                //        }
                                //    }
                                //    else
                                //    {
                                //        PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                //        PartialViolationMin += PartialMin - PartialMinEmp;

                                //    }
                                //}

                                //if (PartialViolationMin < 0)
                                //{
                                //    PartialViolationMin = 0;

                                //}


                                PartialMinEmp += EmpPartialAssignMin;

                                //PartialMin_Violation = PartialMinEmp + "-" + PartialViolationMin;

                                //return PartialMin_Violation;



                            }
                            //Modified By Priya Jain(03.04.2014)
                            else
                            {
                                if (PartialIn != Convert.ToDateTime("1/1/1900") && PartialOut != Convert.ToDateTime("1/1/1900"))
                                {

                                    PartialMin = objAttendance.GetTimeDifference(PartialIn, PartialOut);


                                    if ((EmpTotalPartialMin + PartialMin) < PartialAssignMin)
                                    {
                                        if ((PartialMin) < objAttendance.GetTimeDifference(FromTime, ToTime))
                                        {
                                            PartialMinEmp += PartialMin;

                                        }
                                        else
                                        {
                                            PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);

                                            PartialViolationMin += PartialMin - PartialMinEmp;


                                        }

                                    }
                                    else
                                    {
                                        PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                        PartialViolationMin += PartialMin - PartialMinEmp;

                                    }


                                }



                                //Modified By Priya Jain(03.04.2014)

                                else if (PartialIn != Convert.ToDateTime("1/1/1900") && PartialOut != Convert.ToDateTime("1/1/1900"))
                                {

                                    PartialMin = objAttendance.GetTimeDifference(PartialIn, PartialOut);


                                    if ((EmpTotalPartialMin + PartialMin) < PartialAssignMin)
                                    {
                                        if ((PartialMin) < objAttendance.GetTimeDifference(FromTime, ToTime))
                                        {
                                            PartialMinEmp += PartialMin;

                                        }
                                        else
                                        {
                                            PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);

                                            PartialViolationMin += PartialMin - PartialMinEmp;

                                        }

                                    }
                                    else
                                    {
                                        PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                        PartialViolationMin += PartialMin - PartialMinEmp;

                                    }
                                }
                                else if (PartialIn != Convert.ToDateTime("1/1/1900") && PartialOut == Convert.ToDateTime("1/1/1900"))
                                {
                                    if (WithKeyPref == "Yes")
                                    {
                                        dtLogPartialOut = new DataView(dtLog, "Func_Code='" + PartialOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    if (dtLogPartialOut.Rows.Count > 0)
                                    {
                                        PartialOut = Convert.ToDateTime(dtLogPartialOut.Rows[dtLogPartialOut.Rows.Count - 1]["Event_Time"].ToString());

                                    }
                                    if (PartialOut != Convert.ToDateTime("1/1/1900"))
                                    {
                                        PartialViolationMin += objAttendance.GetTimeDifference(PartialIn, PartialOut);
                                        PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                    }
                                    else
                                    {
                                        DataTable dtSch = objEmpSch.GetSheduleDescriptionByEmpId(EmpId, Date.ToString());
                                        dtSch = new DataView(dtSch, "", "OffDuty_Time", DataViewRowState.CurrentRows).ToTable();

                                        if (dtSch.Rows.Count > 0)
                                        {
                                            OffDutyTime = Convert.ToDateTime(dtSch.Rows[dtSch.Rows.Count - 1]["OffDuty_Time"].ToString());


                                            OffDutyTime = new DateTime(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Year, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Month, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Day, OffDutyTime.Hour, OffDutyTime.Minute, OffDutyTime.Second);

                                            PartialViolationMin += objAttendance.GetTimeDifference(PartialIn, OffDutyTime);
                                            PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);

                                        }
                                        else
                                        {
                                            string DefaultShiftId = string.Empty;
                                            DataTable dtShift = new DataTable();
                                            string OnDutyTime2 = string.Empty;
                                            string OffDutyTime2 = string.Empty;
                                            DefaultShiftId = objAppParam.GetApplicationParameterValueByParamName("Default_Shift", strCompanyId, strBrandId, strLocationId);

                                            dtShift = objShift.GetShiftDescriptionByShiftId(DefaultShiftId);
                                            if (dtShift.Rows.Count > 0)
                                            {
                                                OnDutyTime2 = GetTime24(dtShift.Rows[0]["OnDuty_Time"].ToString());
                                                OffDutyTime2 = GetTime24(dtShift.Rows[0]["OffDuty_Time"].ToString());

                                                PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);

                                                PartialViolationMin += objAttendance.GetTimeDifference(PartialIn, Convert.ToDateTime(OffDutyTime2));

                                            }





                                        }



                                    }
                                }
                                else if (PartialIn == Convert.ToDateTime("1/1/1900") && PartialOut != Convert.ToDateTime("1/1/1900"))
                                {



                                    if (WithKeyPref == "Yes")
                                    {
                                        dtLogPartialIn = new DataView(dtLog, "Func_Code='" + PartialInKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    else
                                    {
                                        dtLogPartialIn = new DataView(dtLog, "", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    if (dtLogPartialIn.Rows.Count > 0)
                                    {
                                        PartialIn = Convert.ToDateTime(dtLogPartialIn.Rows[0]["Event_Time"].ToString());

                                    }
                                    if (PartialIn != Convert.ToDateTime("1/1/1900"))
                                    {
                                        PartialViolationMin += objAttendance.GetTimeDifference(PartialIn, PartialOut);
                                        PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                        // Updated By Nitin jain On 01/08/2014 
                                        PartialViolationMin = PartialViolationMin - PartialMinEmp;
                                    }
                                    else
                                    {
                                        DataTable dtSch = objEmpSch.GetSheduleDescriptionByEmpId(EmpId, Date.ToString());
                                        dtSch = new DataView(dtSch, "", "OnDuty_Time", DataViewRowState.CurrentRows).ToTable();


                                        OnDutyTime = Convert.ToDateTime(dtSch.Rows[dtSch.Rows.Count - 1]["OnDuty_Time"].ToString());


                                        OnDutyTime = new DateTime(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Year, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Month, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Day, OnDutyTime.Hour, OnDutyTime.Minute, OnDutyTime.Second);



                                        if (dtSch.Rows.Count > 0)
                                        {
                                            PartialViolationMin += objAttendance.GetTimeDifference(OnDutyTime, PartialOut);
                                            PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                        }
                                        else
                                        {

                                            string DefaultShiftId = string.Empty;
                                            DataTable dtShift = new DataTable();
                                            string OnDutyTime1 = string.Empty;
                                            string OffDutyTime1 = string.Empty;
                                            DefaultShiftId = objAppParam.GetApplicationParameterValueByParamName("Default_Shift", strCompanyId, strBrandId, strLocationId);

                                            dtShift = objShift.GetShiftDescriptionByShiftId(DefaultShiftId);
                                            if (dtShift.Rows.Count > 0)
                                            {
                                                OnDutyTime1 = GetTime24(dtShift.Rows[0]["OnDuty_Time"].ToString());
                                                OffDutyTime1 = GetTime24(dtShift.Rows[0]["OffDuty_Time"].ToString());

                                                PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);

                                                PartialViolationMin += objAttendance.GetTimeDifference(Convert.ToDateTime(OnDutyTime1), PartialOut);
                                            }
                                        }
                                    }
                                }

                                else
                                {
                                    if (WithKeyPref == "Yes")
                                    {
                                        dtLogPartialIn = new DataView(dtLog, "Func_Code='" + PartialInKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    else
                                    {
                                        dtLogPartialIn = new DataView(dtLog, "", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    if (dtLogPartialIn.Rows.Count > 0)
                                    {
                                        PartialIn = Convert.ToDateTime(dtLogPartialIn.Rows[0]["Event_Time"].ToString());

                                    }
                                    if (WithKeyPref == "Yes")
                                    {
                                        dtLogPartialOut = new DataView(dtLog, "Func_Code='" + PartialOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    else
                                    {
                                        dtLogPartialOut = new DataView(dtLog, "", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                    }
                                    if (dtLogPartialOut.Rows.Count > 0)
                                    {
                                        PartialOut = Convert.ToDateTime(dtLogPartialOut.Rows[dtLogPartialOut.Rows.Count - 1]["Event_Time"].ToString());

                                    }


                                    if (PartialIn != Convert.ToDateTime("1/1/1900") && PartialOut != Convert.ToDateTime("1/1/1900"))
                                    {
                                        PartialMin = objAttendance.GetTimeDifference(PartialIn, PartialOut);
                                        if ((EmpTotalPartialMin + PartialMin) < PartialAssignMin)
                                        {
                                            if ((PartialMin) > PartialAssignMin)
                                            {
                                                if ((PartialMin) < PartialMinInDay)
                                                {
                                                    PartialMinEmp += PartialMin;
                                                }
                                                else
                                                {
                                                    PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                                    PartialViolationMin += (PartialMin) - PartialMinInDay;
                                                }

                                            }
                                            else
                                            {

                                                PartialViolationMin += PartialMin;
                                                PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);

                                            }
                                        }
                                        else
                                        {
                                            PartialMinEmp += PartialMin;
                                            PartialViolationMin += PartialMin - (PartialAssignMin - EmpTotalPartialMin);
                                        }
                                    }
                                }
                            }
                        }
                        //*******
                        //Modify By Priya Jain (07.04.2014)
                        else
                        {
                            if (defaultShift.Rows.Count > 0)
                            {
                                OnDutyTime = new DateTime(Date.Year, Date.Month, Date.Day, Convert.ToDateTime(defaultShift.Rows[0]["OnDuty_Time"].ToString()).Hour, Convert.ToDateTime(defaultShift.Rows[0]["OnDuty_Time"].ToString()).Minute, Convert.ToDateTime(defaultShift.Rows[0]["OnDuty_Time"].ToString()).Second);
                                OffDutyTime = new DateTime(Date.Year, Date.Month, Date.Day, Convert.ToDateTime(defaultShift.Rows[0]["OffDuty_Time"].ToString()).Hour, Convert.ToDateTime(defaultShift.Rows[0]["OffDuty_Time"].ToString()).Minute, Convert.ToDateTime(defaultShift.Rows[0]["OffDuty_Time"].ToString()).Second);
                                //string WorkCalculationMethod = (string)ViewState["WorkCalculationMethod"];

                                //Modified By Priya Jain(03.04.2014)
                                //Modified By Priya Jain(04.04.2014)

                                if (WorkCalculationMethod == "PairWise")
                                {
                                    //Same Day Log

                                    if (Convert.ToDateTime(OnDutyTime) < Convert.ToDateTime(OffDutyTime))
                                    {

                                        dtLog = objAttLog.GetAttendanceLogByDate(strCompanyId, Date.ToString(), Date.ToString());
                                        dtLog = new DataView(dtLog, "Emp_Id='" + EmpId + "'", "", DataViewRowState.CurrentRows).ToTable();
                                        if (PartialInKey != "")
                                        {
                                            if (WithKeyPref == "Yes")
                                            {
                                                dtLogPartialIn = new DataView(dtLog, "Func_Code='" + PartialInKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            else
                                            {
                                                dtLogPartialIn = new DataView(dtLog, "", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            dtLogPartialIn = new DataView(dtLogPartialIn, "Event_Time>='" + FromTime.ToString() + "' and Event_Time<='" + ToTime.ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();

                                            if (dtLogPartialIn.Rows.Count > 0)
                                            {
                                                PartialIn = Convert.ToDateTime(dtLogPartialIn.Rows[0]["Event_Time"].ToString());

                                            }
                                        }
                                        if (PartialOutKey != "")
                                        {
                                            if (WithKeyPref == "Yes")
                                            {
                                                dtLogPartialOut = new DataView(dtLog, "Func_Code='" + PartialOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            else
                                            {
                                                dtLogPartialOut = new DataView(dtLog, "", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            dtLogPartialOut = new DataView(dtLogPartialOut, "Event_Time>='" + ToTime + "'", "", DataViewRowState.CurrentRows).ToTable();

                                            if (dtLogPartialOut.Rows.Count > 0)
                                            {
                                                PartialOut = Convert.ToDateTime(dtLogPartialOut.Rows[0]["Event_Time"].ToString());

                                            }
                                        }
                                    }
                                    //Next day Log
                                    else if (Convert.ToDateTime(OnDutyTime) > Convert.ToDateTime(OffDutyTime))
                                    {
                                        string Partial = "By Partial Leave";
                                        DataTable dtpartiallogin = new DataTable();
                                        dtpartiallogin = new DataView(dtPartialdetail, "Emp_Id='" + EmpId + "'", "", DataViewRowState.CurrentRows).ToTable();
                                        if (PartialOutKey != "")
                                        {
                                            if (WithKeyPref == "Yes")
                                            {
                                                dtLogPartialOut = new DataView(dtLogPartialIn, "Func_Code='" + PartialOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            else
                                            {
                                                dtLogPartialOut = new DataView(dtpartiallogin, "Verified_Type='" + Partial + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            dtLogPartialOut = new DataView(dtLogPartialOut, "Event_Time>='" + ToTime + "'", "", DataViewRowState.CurrentRows).ToTable();

                                            //Modified By Priya Jain(03.04.2014)
                                            if (dtLogPartialOut.Rows.Count > 1)
                                            {
                                                PartialInTime = dtLogPartialOut.Rows[0]["Event_Time"].ToString();
                                                PartialInTimeF = Convert.ToDateTime(PartialInTime);

                                                try
                                                {
                                                    PartialOutTime = dtLogPartialOut.Rows[1]["Event_Time"].ToString();
                                                    PartialOutTimeF = Convert.ToDateTime(PartialOutTime);
                                                }
                                                catch
                                                {
                                                }
                                            }
                                        }
                                    }
                                }
                                //Modified By Priya Jain(04.04.2014)
                                // InOut Method 

                                else
                                {
                                    //Same Day Log

                                    if (Convert.ToDateTime(OnDutyTime) < Convert.ToDateTime(OffDutyTime))
                                    {

                                        dtLog = objAttLog.GetAttendanceLogByDate(strCompanyId, Date.ToString(), Date.ToString());
                                        dtLog = new DataView(dtLog, "Emp_Id='" + EmpId + "'", "", DataViewRowState.CurrentRows).ToTable();
                                        string Partial = "By Partial Leave";
                                        if (PartialInKey != "")
                                        {
                                            if (WithKeyPref == "Yes")
                                            {
                                                dtLogPartialIn = new DataView(dtLog, "Func_Code='" + PartialInKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            else
                                            {
                                                dtLogPartialIn = new DataView(dtLog, "Verified_Type='" + Partial + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            dtLogPartialIn = new DataView(dtLogPartialIn, "Event_Time>='" + FromTime.ToString() + "' and Event_Time<='" + ToTime.ToString() + "'", "", DataViewRowState.CurrentRows).ToTable();

                                            if (dtLogPartialIn.Rows.Count > 0)
                                            {
                                                PartialIn = Convert.ToDateTime(dtLogPartialIn.Rows[0]["Event_Time"].ToString());

                                            }

                                        }


                                        if (PartialOutKey != "")
                                        {
                                            if (WithKeyPref == "Yes")
                                            {
                                                dtLogPartialOut = new DataView(dtLog, "Func_Code='" + PartialOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            else
                                            {
                                                dtLogPartialOut = new DataView(dtLog, "Verified_Type='" + Partial + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }


                                            dtLogPartialOut = new DataView(dtLogPartialOut, "Event_Time>='" + ToTime + "'", "", DataViewRowState.CurrentRows).ToTable();

                                            if (dtLogPartialOut.Rows.Count > 0)
                                            {
                                                PartialOut = Convert.ToDateTime(dtLogPartialOut.Rows[0]["Event_Time"].ToString());

                                            }
                                        }
                                    }
                                    // Next Day Log
                                    else if (Convert.ToDateTime(OnDutyTime) > Convert.ToDateTime(OffDutyTime))
                                    {
                                        string Partial = "By Partial Leave";
                                        DataTable dtpartiallogin = DtNextPartailInOut;
                                        dtpartiallogin = new DataView(dtpartiallogin, "Emp_Id='" + EmpId + "'", "", DataViewRowState.CurrentRows).ToTable();

                                        if (PartialOutKey != "")
                                        {
                                            if (WithKeyPref == "Yes")
                                            {
                                                dtLogPartialOut = new DataView(dtLogPartialIn, "Func_Code='" + PartialOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }
                                            else
                                            {
                                                dtLogPartialOut = new DataView(dtpartiallogin, "Verified_Type='" + Partial + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                            }


                                            dtLogPartialOut = new DataView(dtLogPartialOut, "Event_Time>='" + ToTime + "'", "", DataViewRowState.CurrentRows).ToTable();

                                            //Modified By Priya Jain(03.04.2014)
                                            if (dtLogPartialOut.Rows.Count > 1)
                                            {
                                                PartialInTime = dtLogPartialOut.Rows[0]["Event_Time"].ToString();
                                                PartialInTimeF = Convert.ToDateTime(PartialInTime);

                                                try
                                                {
                                                    PartialOutTime = dtLogPartialOut.Rows[1]["Event_Time"].ToString();
                                                    PartialOutTimeF = Convert.ToDateTime(PartialOutTime);

                                                }
                                                catch
                                                {
                                                }

                                            }
                                        }
                                    }
                                }
                                //***************************

                                //Modified By Priya Jain(03.04.2014)
                                if (!((FromTime >= OnDutyTime) && (FromTime <= OffDutyTime)))
                                {

                                    if (PartialInTimeF != Convert.ToDateTime("1/1/1900") && PartialOutTimeF != Convert.ToDateTime("1/1/1900"))
                                    {

                                        PartialMin = objAttendance.GetTimeDifference(PartialInTimeF, PartialOutTimeF);


                                        if ((EmpTotalPartialMin + PartialMin) < PartialAssignMin)
                                        {
                                            if ((PartialMin) < objAttendance.GetTimeDifference(FromTime, ToTime))
                                            {
                                                PartialMinEmp += PartialMin;

                                            }
                                            else
                                            {
                                                PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                                PartialViolationMin += PartialMin - PartialMinEmp;
                                            }
                                        }
                                        else
                                        {
                                            PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                            PartialViolationMin += PartialMin - PartialMinEmp;
                                        }
                                    }

                                    if (PartialViolationMin < 0)
                                    {
                                        PartialViolationMin = 0;

                                    }
                                    PartialMin_Violation = PartialMinEmp + "-" + PartialViolationMin;

                                    return PartialMin_Violation;



                                }
                                //Modified By Priya Jain(03.04.2014)
                                else
                                {
                                    if (PartialIn != Convert.ToDateTime("1/1/1900") && PartialOut != Convert.ToDateTime("1/1/1900"))
                                    {

                                        PartialMin = objAttendance.GetTimeDifference(PartialIn, PartialOut);


                                        if ((EmpTotalPartialMin + PartialMin) < PartialAssignMin)
                                        {
                                            if ((PartialMin) < objAttendance.GetTimeDifference(FromTime, ToTime))
                                            {
                                                PartialMinEmp += PartialMin;

                                            }
                                            else
                                            {
                                                PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);

                                                PartialViolationMin += PartialMin - PartialMinEmp;

                                            }

                                        }
                                        else
                                        {
                                            PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                            PartialViolationMin += PartialMin - PartialMinEmp;
                                        }
                                    }

                                    //Modified By Priya Jain(03.04.2014)

                                    else if (PartialIn != Convert.ToDateTime("1/1/1900") && PartialOut != Convert.ToDateTime("1/1/1900"))
                                    {

                                        PartialMin = objAttendance.GetTimeDifference(PartialIn, PartialOut);


                                        if ((EmpTotalPartialMin + PartialMin) < PartialAssignMin)
                                        {
                                            if ((PartialMin) < objAttendance.GetTimeDifference(FromTime, ToTime))
                                            {
                                                PartialMinEmp += PartialMin;

                                            }
                                            else
                                            {
                                                PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);

                                                PartialViolationMin += PartialMin - PartialMinEmp;

                                            }

                                        }
                                        else
                                        {
                                            PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                            PartialViolationMin += PartialMin - PartialMinEmp;

                                        }
                                    }
                                    else if (PartialIn != Convert.ToDateTime("1/1/1900") && PartialOut == Convert.ToDateTime("1/1/1900"))
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            dtLogPartialOut = new DataView(dtLog, "Func_Code='" + PartialOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        if (dtLogPartialOut.Rows.Count > 0)
                                        {
                                            PartialOut = Convert.ToDateTime(dtLogPartialOut.Rows[dtLogPartialOut.Rows.Count - 1]["Event_Time"].ToString());

                                        }
                                        if (PartialOut != Convert.ToDateTime("1/1/1900"))
                                        {
                                            PartialViolationMin += objAttendance.GetTimeDifference(PartialIn, PartialOut);
                                            PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                        }
                                        else
                                        {
                                            DataTable dtSch = objEmpSch.GetSheduleDescriptionByEmpId(EmpId, Date.ToString());
                                            dtSch = new DataView(dtSch, "", "OffDuty_Time", DataViewRowState.CurrentRows).ToTable();

                                            if (dtSch.Rows.Count > 0)
                                            {
                                                OffDutyTime = Convert.ToDateTime(dtSch.Rows[dtSch.Rows.Count - 1]["OffDuty_Time"].ToString());


                                                OffDutyTime = new DateTime(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Year, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Month, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Day, OffDutyTime.Hour, OffDutyTime.Minute, OffDutyTime.Second);

                                                PartialViolationMin += objAttendance.GetTimeDifference(PartialIn, OffDutyTime);
                                                PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);

                                            }
                                            else
                                            {
                                                string DefaultShiftId = string.Empty;
                                                DataTable dtShift = new DataTable();
                                                string OnDutyTime2 = string.Empty;
                                                string OffDutyTime2 = string.Empty;
                                                DefaultShiftId = objAppParam.GetApplicationParameterValueByParamName("Default_Shift", strCompanyId, strBrandId, strLocationId);

                                                dtShift = objShift.GetShiftDescriptionByShiftId(DefaultShiftId);
                                                if (dtShift.Rows.Count > 0)
                                                {
                                                    OnDutyTime2 = GetTime24(dtShift.Rows[0]["OnDuty_Time"].ToString());
                                                    OffDutyTime2 = GetTime24(dtShift.Rows[0]["OffDuty_Time"].ToString());

                                                    PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);

                                                    PartialViolationMin += objAttendance.GetTimeDifference(PartialIn, Convert.ToDateTime(OffDutyTime2));

                                                }





                                            }



                                        }
                                    }
                                    else if (PartialIn == Convert.ToDateTime("1/1/1900") && PartialOut != Convert.ToDateTime("1/1/1900"))
                                    {



                                        if (WithKeyPref == "Yes")
                                        {
                                            dtLogPartialIn = new DataView(dtLog, "Func_Code='" + PartialInKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            dtLogPartialIn = new DataView(dtLog, "", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        if (dtLogPartialIn.Rows.Count > 0)
                                        {
                                            PartialIn = Convert.ToDateTime(dtLogPartialIn.Rows[0]["Event_Time"].ToString());

                                        }
                                        if (PartialIn != Convert.ToDateTime("1/1/1900"))
                                        {
                                            PartialViolationMin += objAttendance.GetTimeDifference(PartialIn, PartialOut);
                                            PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                        }
                                        else
                                        {
                                            DataTable dtSch = objEmpSch.GetSheduleDescriptionByEmpId(EmpId, Date.ToString());
                                            dtSch = new DataView(dtSch, "", "OnDuty_Time", DataViewRowState.CurrentRows).ToTable();
                                            //Update On 26-03-2015
                                            if (dtSch.Rows.Count > 0)
                                            {
                                                OnDutyTime = Convert.ToDateTime(dtSch.Rows[dtSch.Rows.Count - 1]["OnDuty_Time"].ToString());
                                            }


                                            OnDutyTime = new DateTime(Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Year, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Month, Common.getCountryTimeFormatStatic(DateTime.Now.ToUniversalTime().ToString(), strTimeZoneId).Day, OnDutyTime.Hour, OnDutyTime.Minute, OnDutyTime.Second);



                                            if (dtSch.Rows.Count > 0)
                                            {
                                                PartialViolationMin += objAttendance.GetTimeDifference(OnDutyTime, PartialOut);
                                                PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                            }
                                            else
                                            {

                                                string DefaultShiftId = string.Empty;
                                                DataTable dtShift = new DataTable();
                                                string OnDutyTime1 = string.Empty;
                                                string OffDutyTime1 = string.Empty;
                                                DefaultShiftId = objAppParam.GetApplicationParameterValueByParamName("Default_Shift", strCompanyId, strBrandId, strLocationId);

                                                dtShift = objShift.GetShiftDescriptionByShiftId(DefaultShiftId);
                                                if (dtShift.Rows.Count > 0)
                                                {
                                                    OnDutyTime1 = GetTime24(dtShift.Rows[0]["OnDuty_Time"].ToString());
                                                    OffDutyTime1 = GetTime24(dtShift.Rows[0]["OffDuty_Time"].ToString());

                                                    PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);

                                                    PartialViolationMin += objAttendance.GetTimeDifference(Convert.ToDateTime(OnDutyTime1), PartialOut);
                                                }




                                            }


                                        }
                                    }

                                    else
                                    {
                                        if (WithKeyPref == "Yes")
                                        {
                                            dtLogPartialIn = new DataView(dtLog, "Func_Code='" + PartialInKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            dtLogPartialIn = new DataView(dtLog, "", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        if (dtLogPartialIn.Rows.Count > 0)
                                        {
                                            PartialIn = Convert.ToDateTime(dtLogPartialIn.Rows[0]["Event_Time"].ToString());

                                        }
                                        if (WithKeyPref == "Yes")
                                        {
                                            dtLogPartialOut = new DataView(dtLog, "Func_Code='" + PartialOutKey + "'", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        else
                                        {
                                            dtLogPartialOut = new DataView(dtLog, "", "Event_Time", DataViewRowState.CurrentRows).ToTable();
                                        }
                                        if (dtLogPartialOut.Rows.Count > 0)
                                        {
                                            PartialOut = Convert.ToDateTime(dtLogPartialOut.Rows[dtLogPartialOut.Rows.Count - 1]["Event_Time"].ToString());

                                        }


                                        if (PartialIn != Convert.ToDateTime("1/1/1900") && PartialOut != Convert.ToDateTime("1/1/1900"))
                                        {
                                            PartialMin = objAttendance.GetTimeDifference(PartialIn, PartialOut);


                                            if ((EmpTotalPartialMin + PartialMin) < PartialAssignMin)
                                            {

                                                if ((PartialMin) > PartialAssignMin)
                                                {
                                                    if ((PartialMin) < PartialMinInDay)
                                                    {
                                                        PartialMinEmp += PartialMin;
                                                    }
                                                    else
                                                    {
                                                        PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                                        PartialViolationMin += (PartialMin) - PartialMinInDay;
                                                    }
                                                }
                                                else
                                                {
                                                    PartialViolationMin += PartialMin;
                                                    PartialMinEmp += objAttendance.GetTimeDifference(FromTime.AddMinutes(CompViolationMin), ToTime);
                                                }
                                            }
                                            else
                                            {
                                                PartialMinEmp += PartialMin;
                                                PartialViolationMin += PartialMin - (PartialAssignMin - EmpTotalPartialMin);
                                            }
                                        }
                                    }
                                }
                            }
                        }//End Of Else For Default Shit



                        //*******

                    }


                }

            }
        }

        if (PartialViolationMin < 0)
        {
            PartialViolationMin = 0;

        }

        if (PartialViolationMin > CompViolationMin)
        {
            PartialViolationMin = PartialViolationMin - CompViolationMin;
        }
        else
        {
            PartialViolationMin = 0;
        }
        //commented previous line and added new because total partial minute was not showing on partial violation report 
        //modified by jitendra on 27-02-2018

        PartialMin_Violation = PartialMinEmp + "-" + PartialViolationMin;

        //PartialMin_Violation = PartialMin + "-" + PartialViolationMin;

        return PartialMin_Violation;


    }
    public string getWorkMinute(string effec, string assign, string strCompanyId, string strBrandId, string strLocationId, DataTable dtCompanyParameter)
    {
        int TempInt = 0;
        double effecmin = Convert.ToDouble(effec);
        double assignmin = Convert.ToDouble(assign);
        double minut = effecmin;

        if (GetApplicationParameterValueByParamName("Pay Salary Acc To Work Hour or Ref Hour", dtCompanyParameter) == "Ref Hour")
        {
            int WorkPercentTo1 = Convert.ToInt16(GetApplicationParameterValueByParamName("WorkPercentTo1", dtCompanyParameter));
            int WorkPercentTo2 = Convert.ToInt16(GetApplicationParameterValueByParamName("WorkPercentTo2", dtCompanyParameter));
            int WorkPercentTo3 = Convert.ToInt16(GetApplicationParameterValueByParamName("WorkPercentTo3", dtCompanyParameter));
            int WorkPercentFrom1 = Convert.ToInt16(GetApplicationParameterValueByParamName("WorkPercentFrom1", dtCompanyParameter));
            int WorkPercentFrom2 = Convert.ToInt16(GetApplicationParameterValueByParamName("WorkPercentFrom2", dtCompanyParameter));
            int WorkPercentFrom3 = Convert.ToInt16(GetApplicationParameterValueByParamName("WorkPercentFrom3", dtCompanyParameter));
            int Value1 = Convert.ToInt16(GetApplicationParameterValueByParamName("Value1", dtCompanyParameter));
            int Value2 = Convert.ToInt16(GetApplicationParameterValueByParamName("Value2", dtCompanyParameter));
            int Value3 = Convert.ToInt16(GetApplicationParameterValueByParamName("Value3", dtCompanyParameter));


            if (effecmin < assignmin)
            {
                double workper = (effecmin * 100) / assignmin;



                if (workper >= WorkPercentFrom1 && workper <= WorkPercentTo1)
                {
                    minut = (assignmin * Value1) / 100;
                }

                else if (workper >= WorkPercentFrom2 && workper <= WorkPercentTo2)
                {
                    minut = (assignmin * Value2) / 100;
                }
                else if (workper >= WorkPercentFrom3 && workper <= WorkPercentTo3)
                {
                    minut = (assignmin * Value3) / 100;

                }




            }
            TempInt = Convert.ToInt32(minut);
            if (Convert.ToInt32(TempInt) > Convert.ToInt32(assign))
            {
                TempInt = Convert.ToInt32(assign);
            }



        }
        else
        {
            if (Convert.ToInt32(effec) > Convert.ToInt32(assign))
            {
                TempInt = Convert.ToInt32(assign);
            }
            else
            {
                TempInt = Convert.ToInt32(effec);
            }
        }

        return (TempInt.ToString());
    }
    private string GetTime24(string timepart)
    {
        string str = "00:00";
        DateTime date = Convert.ToDateTime(timepart);
        str = date.ToString("HH:mm");
        return str;
    }
    public string GetAssignWorkMin(string EmpId, string strCompanyId, string strBrandId, string strLocationId, DataTable dtCompanyParameter)
    {
        string AssignMin = string.Empty;


        DataTable dt = objEmpParam.GetEmployeeParameterByEmpId(EmpId, strCompanyId);

        if (dt.Rows.Count > 0)
        {
            AssignMin = dt.Rows[0]["Assign_Min"].ToString();

        }
        else
        {
            AssignMin = GetApplicationParameterValueByParamName("Work Day Min", dtCompanyParameter);
        }

        return AssignMin;
    }
    public int GetOverTimeMinWithOutShift(string EmpId, int WorkMin, string strCompanyId, string strBrandId, string strLocationId, DataTable dtCompanyParameter)
    {
        int OtMin = 0;
        bool IsCompOT = false;
        bool IsEmpOT = false;
        int MaxOt = 0;
        int MinOt = 0;
        string OverTimeMethod = string.Empty;

        IsCompOT = Convert.ToBoolean(GetApplicationParameterValueByParamName("IsOverTime", dtCompanyParameter));
        MaxOt = int.Parse(GetApplicationParameterValueByParamName("Max Over Time Min", dtCompanyParameter));
        MinOt = int.Parse(GetApplicationParameterValueByParamName("Min OVer Time Min", dtCompanyParameter));

        if (IsCompOT)
        {
            DataTable dt = objEmpParam.GetEmployeeParameterByEmpId(EmpId, strCompanyId);

            if (dt.Rows.Count > 0)
            {
                IsEmpOT = Convert.ToBoolean(dt.Rows[0]["Is_OverTime"].ToString());

                if (IsEmpOT)
                {


                    int assignMin = int.Parse(GetAssignWorkMin(EmpId, strCompanyId, strBrandId, strLocationId, dtCompanyParameter));

                    OtMin = WorkMin;
                    OtMin = OtMin - assignMin;
                    if (OtMin < 0)
                    {
                        OtMin = 0;
                    }
                }
            }
        }
        if (OtMin < MinOt)
        {
            OtMin = 0;
        }
        if (OtMin > MaxOt)
        {
            OtMin = MaxOt;
        }
        return OtMin;
    }


}