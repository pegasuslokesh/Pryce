using System;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web.UI;
using PegasusDataAccess;
using System.Data.SqlClient;
using System.IO;
//using Microsoft.SqlServer.Management.Smo;
using System.Web.UI.WebControls;

public partial class DatabaseUtility_Databaseutility : System.Web.UI.Page
{
    SystemParameter objSys = null; DataAccessClass daClass = null;
    MasterDataAccess objMDa = null;
    //Arc_Directory_Master ObjDirectory = new Arc_Directory_Master();
    Set_ApplicationParameter objAppParam = null;
    string SelectedTables = string.Empty;
    Common cmn = null;
    DataAccessClass objDa = null;
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["UserId"] == null)
        {
            Response.Redirect("~/ERPLogin.aspx");
        }

        objSys = new SystemParameter(Session["DBConnection"].ToString());
        daClass = new DataAccessClass(Session["DBConnection"].ToString());
        objMDa = new MasterDataAccess(ConfigurationManager.ConnectionStrings["PegaConnection1"].ConnectionString);
        //Arc_Directory_Master ObjDirectory = new Arc_Directory_Master();
        objAppParam = new Set_ApplicationParameter(Session["DBConnection"].ToString());
        cmn = new Common(Session["DBConnection"].ToString());
        objDa = new DataAccessClass(Session["DBConnection"].ToString());


        Page.Title = objSys.GetSysTitle();

        if (!IsPostBack)
        {
            btnBackup_Click(null, null);
            if (ConfigurationManager.AppSettings["ApplicationType"].ToString().Trim().ToLower() == "cloud")
            {
                txtFileName.Text = Session["CloudDB"].ToString();
                txtFileName.Enabled = false;
            }
            else
            {
                txtFileName.Text = "pryce_client_2895";
            }
            GetFiles();
            string User = Session["UserId"].ToString();

            if (User == "superadmin")
            {
                txtFileName.ReadOnly = false;
            }
            else
            {
                txtFileName.ReadOnly = true;
            }





                //here we configuring visibility for update all database
                //if (ConfigurationManager.AppSettings["ApplicationType"].ToString().Trim() == "Cloud")
                //{
                //chkupdateALLDB.Visible = true;
                //chkupdateALLDB.Checked = true;
                //}

                ListItem liLog_DB = new ListItem("Database Log", "Log_DB");
            ListItem liAtt_AttendanceRegister = new ListItem("Attendance Detail", "Att_AttendanceRegister");
            ListItem liAtt_AttendanceLog = new ListItem("Attendance Log", "Att_AttendanceLog");
            ListItem liAtt_Device_Operation = new ListItem("Device Operation", "Att_Device_Operation");
            ListItem liAtt_ScheduleDescription = new ListItem("Employee Shift Information", "Att_ScheduleDescription");
            ListTableList.Items.Insert(0, liLog_DB);
            ListTableList.Items.Insert(1, liAtt_AttendanceRegister);
            ListTableList.Items.Insert(2, liAtt_AttendanceLog);
            ListTableList.Items.Insert(3, liAtt_Device_Operation);
            ListTableList.Items.Insert(4, liAtt_ScheduleDescription);
            //if (Session["EmpId"].ToString().Trim() == "0")
            //{
            li_DBUpdate.Visible = true;
            setModuleWiseControls();
            //}
        }
        Session["AccordianId"] = "112";
        li_DBUpdate.Visible = false;
        li_DBbakup.Visible = false;
        Update_Backup.Visible = false;
        Update_Update.Visible = false;
    }

    private void setModuleWiseControls()
    {
        try
        {

            Common.clsApplicationModules _cls = (Common.clsApplicationModules)Session["clsApplicationModule"];
            Div_DB_Maintanance.Visible = _cls.isAttendanceModule;

        }
        catch (Exception ex)
        {

        }
    }

    protected void btnIntialDb_Click(object sender, EventArgs e)
    {

    }
    protected void btnRestore_Click(object sender, EventArgs e)
    {
        //btnreset_Click1(null, null);
        //GetFiles();
        //PanelBackup.BackColor = System.Drawing.ColorTranslator.FromHtml("#90bde9");
        //PanelRestore.BackColor = System.Drawing.ColorTranslator.FromHtml("#ccddee");
        //PanelInitialize.BackColor = System.Drawing.ColorTranslator.FromHtml("#90bde9");
        //pnlBackUp.Visible = false;
        //pnlRestore.Visible = true;
        //pnlInitialize.Visible = false;
    }
    protected void btnInitialize_Click(object sender, EventArgs e)
    {
        //PanelBackup.BackColor = System.Drawing.ColorTranslator.FromHtml("#90bde9");
        //PanelRestore.BackColor = System.Drawing.ColorTranslator.FromHtml("#90bde9");
        //PanelInitialize.BackColor = System.Drawing.ColorTranslator.FromHtml("#ccddee");
        //pnlBackUp.Visible = false;
        //pnlRestore.Visible = false;
        //pnlInitialize.Visible = true;
    }
    protected void btnBackup_Click(object sender, EventArgs e)
    {
        //btnreset_Click(null, null);

        //PanelBackup.BackColor = System.Drawing.ColorTranslator.FromHtml("#ccddee");
        //PanelRestore.BackColor = System.Drawing.ColorTranslator.FromHtml("#90bde9");
        //PanelInitialize.BackColor = System.Drawing.ColorTranslator.FromHtml("#90bde9");
        //pnlBackUp.Visible = true;
        //pnlRestore.Visible = false;
        //pnlInitialize.Visible = false;
        if (ConfigurationManager.AppSettings["ApplicationType"].ToString().Trim().ToLower() == "cloud")
        {
            txtFileName.Text = Session["CloudDB"].ToString();
            txtFileName.Enabled = false;
        }
        else
        {
            txtFileName.Text = "pryce_client_2895";
        }
    }
    // ------------------------------------
    //---------------------------------------------------
    protected void btnIntializeDb_Click(object sender, EventArgs e)
    {
        if (RestoreDatabase(ConfigurationManager.AppSettings["DBPath"].ToString().Trim()))
        {
            DisplayMessage("Database has been initialized");
            if (ConfigurationManager.AppSettings["ApplicationType"].ToString().Trim().ToLower() == "cloud")
            {
                MasterDataAccess.clsMasterCompany clsMasterCmp = objMDa.getMasterCompanyInfo(Session["RegistrationCode"].ToString(), ConfigurationManager.AppSettings["masterDbApiBaseAddress"].ToString());
                objDa.execute_Command("update set_usermaster set password='" + Common.Encrypt(clsMasterCmp.password) + "' where user_id='Admin'");
            }
            Session.Clear();
            Session.Abandon();
            Response.Redirect("~/ERPLogin.aspx");
            return;
        }
        else
        {
            DisplayMessage("Database is not initialized successfully");
        }

        //FileInfo file;
        //string script = string.Empty;
        //SqlConnection conn = new SqlConnection(Session["DBConnection"].ToString());
        //try
        //{
        //    if (dpDbInitialize.SelectedValue == "0")
        //    {
        //        DisplayMessage("Select Script File from List");

        //        return;
        //    }
        //    else if (dpDbInitialize.SelectedValue == "1")
        //    {
        //        file = new FileInfo(Server.MapPath("~") + "\\Script\\DemoScript_DemoDb.sql");
        //        script = file.OpenText().ReadToEnd();
        //        Server server = new Server(new ServerConnection(conn));
        //        server.ConnectionContext.ExecuteNonQuery(script);
        //        DisplayMessage("Database has been initialized");
        //        return;
        //    }
        //    else if (dpDbInitialize.SelectedValue == "2")
        //    {

        //        file = new FileInfo(Server.MapPath("~") + "\\Script\\BlankScript_MasterDb.sql");
        //        script = file.OpenText().ReadToEnd();
        //        Server server = new Server(new ServerConnection(conn));
        //        server.ConnectionContext.ExecuteNonQuery(script);
        //        DisplayMessage("Database has been initialized");
        //        return;
        //    }
        //    else if (dpDbInitialize.SelectedValue == "3")
        //    {

        //        file = new FileInfo(Server.MapPath("~") + "\\Script\\Blank_Script.sql");
        //        script = file.OpenText().ReadToEnd();
        //        Server server = new Server(new ServerConnection(conn));
        //        server.ConnectionContext.ExecuteNonQuery(script);
        //        DisplayMessage("Database has been initialized");
        //        return;
        //    }
        //    else if (dpDbInitialize.SelectedValue == "4")
        //    {
        //        file = new FileInfo(Server.MapPath("~") + "\\Script\\InitializeTimeMan_HR.sql");
        //        script = file.OpenText().ReadToEnd();
        //        Server server = new Server(new ServerConnection(conn));
        //        server.ConnectionContext.ExecuteNonQuery(script);
        //        DisplayMessage("Database has been initialized");
        //        return;
        //    }
        //    else if (dpDbInitialize.SelectedValue == "5")
        //    {
        //        file = new FileInfo(Server.MapPath("~") + "\\Script\\Initialize_Inventory.sql");
        //        script = file.OpenText().ReadToEnd();
        //        Server server = new Server(new ServerConnection(conn));
        //        server.ConnectionContext.ExecuteNonQuery(script);
        //        DisplayMessage("Database has been Initialized");
        //        return;
        //    }
        //    else
        //    {

        //    }
        //}
        //catch
        //{
        //    DisplayMessage("Error in run Script");
        //    return;
        //}
    }
    public void GetFiles()
    { 
		
        //string path = AppDomain.CurrentDomain.BaseDirectory;
        //string Location = path + "\\DatabaseBackup";
        string Db_Backup_Restore_Path = string.Empty;
        //string chkDbLoc = objAppParam.GetApplicationParameterValueByParamName("IsDefault_DbLocation", Session["CompId"].ToString());
        //if (chkDbLoc.ToString() == "True")
        //{
        //    Db_Backup_Restore_Path = Location;
        //}
        //else
        //{
        //    Db_Backup_Restore_Path = objAppParam.GetApplicationParameterValueByParamName("Backup_Restore_Location", Session["CompId"].ToString());
        //}
        DataTable DtDbLoc = objSys.GetSysParameterByParamName("Database BackUp Location");
        if (DtDbLoc.Rows.Count > 0)
        {
            Db_Backup_Restore_Path = DtDbLoc.Rows[0]["Param_Value"].ToString();
        }
        else
        {
            DisplayMessage("Please Set Database BackUp Path");
            return;
        }

        string RegistrationCode = Common.Decrypt(objDa.get_SingleValue("Select registration_code from Application_Lic_Main"));
		
        string folderPath = Db_Backup_Restore_Path+'\\' + RegistrationCode;		
        Db_Backup_Restore_Path = folderPath;

        try
        {
            string[] files = Directory.GetFiles(Db_Backup_Restore_Path + "\\");
            //string[] files = Directory.GetFiles("F:\\Rahul\\.Net" + "\\");      
             DataTable dt = new DataTable();
            dt.Columns.Add("FileName");
            foreach (string file in files)
            {
			// && !file.Contains(txtFileName.Text.Trim())
                if (ConfigurationManager.AppSettings["ApplicationType"].ToString().Trim().ToLower() == "cloud")
                {
					
					DataRow dr = dt.NewRow();
					dr["FileName"] = Path.GetFileName(file);
					//DisplayMessage(""+dr["FileName"]+"");
  
					string[] SplitString = file.Split('.');					
					if (SplitString[2].ToString() == "bak")
					{
						dt.Rows.Add(dr);
					}

                    //continue;

                }else{
					//DisplayMessage("here");
				}
				
				
                // Session["RegCode"]

                
            }


            if (dt.Rows.Count > 0)
            {
                ddlFileName.DataSource = null;
                ddlFileName.DataBind();
                //Common Function add By Lokesh on 22-05-2015
                new PageControlCommon(Session["DBConnection"].ToString()).FillData((object)ddlFileName, dt, "FileName", "FileName");
            }
            else
            {
                try
                {
                    ddlFileName.Items.Clear();
                    ddlFileName.DataSource = null;
                    ddlFileName.DataBind();
                    ddlFileName.Items.Insert(0, "--Select--");
                    ddlFileName.SelectedIndex = 0;
                }
                catch
                {
                    ddlFileName.Items.Insert(0, "--Select--");
                    ddlFileName.SelectedIndex = 0;
                }
            }
        }
        catch
        {
			    //DisplayMessage("File not found");
        }
    }
    protected void btnRestoreDB_Click(object sender, EventArgs e)
    {
        int b = 0;

        //string path = AppDomain.CurrentDomain.BaseDirectory;
        //string Location = path + "DatabaseBackup\\" + ddlFileName.SelectedItem.Text;
        string Db_Backup_Restore_Path = string.Empty;
        //string chkDbLoc = objAppParam.GetApplicationParameterValueByParamName("IsDefault_DbLocation", Session["CompId"].ToString());
        //if (chkDbLoc.ToString() == "True")
        //{
        //    Db_Backup_Restore_Path = Location;
        //}
        //else
        //{

        if (ddlFileName.SelectedItem == null)
        {
            DisplayMessage("Please Select DatabaseFile");
            return;
        }
        DataTable DtDbLoc = objSys.GetSysParameterByParamName("Database BackUp Location");
        if (DtDbLoc.Rows.Count > 0)
        {
            Db_Backup_Restore_Path = DtDbLoc.Rows[0]["Param_Value"].ToString();
        }
        else
        {
            DisplayMessage("Please Set Database BackUp Path");
            return;
        }
        string RegistrationCode = Common.Decrypt(objDa.get_SingleValue("Select registration_code from Application_Lic_Main"));


        if (RestoreDatabase(Db_Backup_Restore_Path+"\\"+RegistrationCode + "\\" + ddlFileName.SelectedItem.Text))
        {
            DisplayMessage("Database Restored successfully");
            Session.Clear();
            Session.Abandon();
            Response.Redirect("~/ERPLogin.aspx");
        }
        else
        {
            DisplayMessage("Database not Restored successfully");
        }



    }

    //public bool RestoreDatabase(string DbFilePath)
    //{
    //    bool result = false;
    //    string strserverName = objMDa.get_SingleValue("select @@servername");

    //    //string strserverName = "74.208.235.72";

    //    int i = 0;
    //    DataTable dt = objMDa.return_DataTable("SELECT file_id, name as [logical_file_name],physical_name from sys.database_files");
    //    string strlogincalName = ConfigurationManager.AppSettings["DBLogicalName"].ToString();
    //    string strlogincafilepath = dt.Rows[0][2].ToString();
    //    string strphysicalName = ConfigurationManager.AppSettings["DBPhysicalName"].ToString();
    //    string strphysicalfilepath = dt.Rows[1][2].ToString();

    //    //ConfigurationManager.AppSettings["ShiftSeperationKey"].ToString();
    //   objMDa.execute_Command("ALTER DATABASE " + txtFileName.Text + " SET SINGLE_USER WITH ROLLBACK IMMEDIATE; ALTER DATABASE " + txtFileName.Text + " SET MULTI_USER");

    //    //i = objMDa.execute_Command("create database " + strRegistrationCode + " RESTORE FILELISTONLY FROM DISK='E:\\Pryce_Blank_Database\\Pryce_Blank_DB.bak' RESTORE DATABASE " + strRegistrationCode + " FROM DISK='E:\\Pryce_Blank_Database\\Pryce_Blank_DB.bak' WITH REPLACE, RECOVERY, MOVE 'Pegasus_ERP' TO '" + strlogincafilepath.Replace("PryceMaster", strRegistrationCode) + "', MOVE 'Pegasus_ERP_log' TO '" + strphysicalfilepath.Replace("PryceMaster", strRegistrationCode) + "'");
    //    //**  i = objMDa.execute_Command("create database " + txtFileName.Text + " RESTORE FILELISTONLY FROM DISK='" + DbFilePath + "' RESTORE DATABASE " + txtFileName.Text + " FROM DISK='" + DbFilePath + "' WITH REPLACE, RECOVERY, MOVE '" + strlogincalName + "' TO '" + strlogincafilepath.Replace("PryceMaster", txtFileName.Text) + "', MOVE '" + strphysicalName + "' TO '" + strphysicalfilepath.Replace("PryceMaster", txtFileName.Text) + "'");
    //    //i = objMDa.execute_Command("create database " + strRegistrationCode + " RESTORE FILELISTONLY FROM DISK='" + DbFilePath + "' RESTORE DATABASE " + strRegistrationCode + " FROM DISK='" + DbFilePath + "' WITH REPLACE, RECOVERY, MOVE '" + strlogincalName + "' TO '" + strlogincafilepath.Replace("PryceMaster", strRegistrationCode) + "', MOVE '" + strphysicalName + "' TO '" + strphysicalfilepath.Replace("PryceMaster", strRegistrationCode) + "'");

    //    int j = objMDa.execute_Command("USE master KILL <session_id>");
 //  int  i = objMDa.execute_Command("RESTORE DATABASE " + txtFileName.Text + " FROM DISK='" + DbFilePath + "' WITH REPLACE, RECOVERY, MOVE '" + strlogincalName + "' TO '" + strlogincafilepath.Replace("Pryce_Live21102023", txtFileName.Text) + "', MOVE '" + strphysicalName + "' TO '" + strphysicalfilepath.Replace("Pryce_Live21102023", txtFileName.Text) + "'");

    //    int B= objMDa.execute_Command("USE " + txtFileName.Text + "");
    //    if (i > 0)
    //    {
    //        result = true;
    //    }

    //    return result;

    //}
    public bool RestoreDatabase(string DbFilePath)
    {
		
        bool result = false;
        string strserverName = objMDa.get_SingleValue("select @@servername");
        int i = 0;
        DataTable dt = objMDa.return_DataTable("SELECT file_id, name as [logical_file_name],physical_name from sys.database_files");
        string strlogincalName = ConfigurationManager.AppSettings["DBLogicalName"].ToString();
        string strlogincafilepath = dt.Rows[0][2].ToString();
        string strphysicalName = ConfigurationManager.AppSettings["DBPhysicalName"].ToString();
        string strphysicalfilepath = dt.Rows[1][2].ToString();
        strlogincafilepath = strlogincafilepath.Replace("Pryce", txtFileName.Text);
        strphysicalfilepath = strphysicalfilepath.Replace("Pryce", txtFileName.Text);
        PassDataToSql[] paramList = new PassDataToSql[7];
        paramList[0] = new PassDataToSql("@DatabaseName", txtFileName.Text, PassDataToSql.ParaTypeList.Nvarchar, PassDataToSql.ParaDirectonList.Input);
        paramList[1] = new PassDataToSql("@DbFilePath", DbFilePath, PassDataToSql.ParaTypeList.Nvarchar, PassDataToSql.ParaDirectonList.Input);
        paramList[2] = new PassDataToSql("@strlogincalName", strlogincalName, PassDataToSql.ParaTypeList.Nvarchar, PassDataToSql.ParaDirectonList.Input);
        paramList[3] = new PassDataToSql("@strlogincafilepath", strlogincafilepath, PassDataToSql.ParaTypeList.Nvarchar, PassDataToSql.ParaDirectonList.Input);
        paramList[4] = new PassDataToSql("@strphysicalName", strphysicalName, PassDataToSql.ParaTypeList.Nvarchar, PassDataToSql.ParaDirectonList.Input);
        paramList[5] = new PassDataToSql("@strphysicalfilepath", strphysicalfilepath, PassDataToSql.ParaTypeList.Nvarchar, PassDataToSql.ParaDirectonList.Input);
        paramList[6] = new PassDataToSql("@ReferenceId", "0", PassDataToSql.ParaTypeList.Int, PassDataToSql.ParaDirectonList.Output);
        objMDa.execute_Sp("SYS_DatabaseRestore", paramList);
        i= Convert.ToInt32(paramList[6].ParaValue);
        if (i > 0)
        {
            result = true;
        }
        return result;
    }
    protected void btnBackupDb_Click(object sender, EventArgs e)
    {
        string sqlConnectionString = Session["DBConnection"].ToString();

        string CatlogName = string.Empty;
        foreach (string str in sqlConnectionString.Split(';'))
        {
            if (str.Contains("Initial Catalog"))
            {
                CatlogName = str.Split('=')[1];
            }
        }

        if (txtFileName.Text == "")
        {
            DisplayMessage("Enter back up file name without extension");
            return;
        }
        if (txtFileName.Text.Contains('.'))
        {
            DisplayMessage("Enter back up file name without extension");
            return;
        }

        //string path = AppDomain.CurrentDomain.BaseDirectory;
        //string Location = path + "DatabaseBackup";
        string DBName = CatlogName;
        // Updated By Nitin Jain on 23-05-2014 , Take Location From Company Parameter
        string Db_Backup_Restore_Path = string.Empty;
        // string chkDbLoc = objAppParam.GetApplicationParameterValueByParamName("IsDefault_DbLocation", Session["CompId"].ToString());
        DataTable DtDbLoc = objSys.GetSysParameterByParamName("Database BackUp Location");
        if (DtDbLoc.Rows.Count > 0)
        {
            Db_Backup_Restore_Path = DtDbLoc.Rows[0]["Param_Value"].ToString();
        }
        else
        {
            DisplayMessage("Please Set Database BackUp Path");
            return;
        }
        //if (DbLoc.ToString() == "True")
        //{
        //    Db_Backup_Restore_Path = Location;
        //}
        //else
        //{
        // Db_Backup_Restore_Path = objSys.GetSysParameterByParamName("Database BackUp Location").ToString();
        //objAppParam.GetApplicationParameterValueByParamName("Backup_Restore_Location", Session["CompId"].ToString());
        //}


        string RegistrationCode = Common.Decrypt(objDa.get_SingleValue("Select registration_code from Application_Lic_Main"));
        string folderPath = Db_Backup_Restore_Path+'\\' + RegistrationCode;
        string fullPath = folderPath;
        if (Directory.Exists(fullPath))
        {
            //Console.WriteLine("The folder already exists.");
        }
        else
        {
            try
            {
                Directory.CreateDirectory(fullPath);
                //Console.WriteLine("The folder has been created.");
            }
            catch (Exception ex)
            {

            }
        }
        if (txtFileName.Text == "")
        {
            txtFileName.Text = "Database";
        }
        string Query = "BACKUP DATABASE " + DBName + " TO DISK = '" + fullPath + "\\" + txtFileName.Text + "-" + DateTime.Now.ToString("ddMMMyyyyHHmm") + ".bak'";

        int a = 0;
        try
        {
            a = daClass.execute_Command(Query);

            if (a != 0)
            {
                GetFiles();
                DisplayMessage("Database back up successfully processed");
                return;
            }
        }
        catch(Exception ex)
        {
            DisplayMessage("Error in database back up");
            return;
        }
    }
    public void DisplayMessage(string str, string color = "orange")
    {
        ScriptManager.RegisterStartupScript(this, GetType(), "", "showAlert('" + str + "','" + color + "','white');", true);
    }
    protected void btnreset_Click1(object sender, EventArgs e)
    {
        GetFiles();
        try
        {
            ddlFileName.SelectedIndex = 0;
        }
        catch
        {
        }

    }
    protected void btnreset_Click(object sender, EventArgs e)
    {


        txtFileName.Text = "";

        Session["Backuppath"] = null;
        if (ConfigurationManager.AppSettings["ApplicationType"].ToString().Trim().ToLower() == "cloud")
        {
            txtFileName.Text = Session["CloudDB"].ToString();
            txtFileName.Enabled = false;
        }
        else
        {
            txtFileName.Text = "pryce_client_2895";
        }

    }
    //here we wrote code for run database script 
    protected void btnRunScript_Click(object sender, EventArgs e)
    {


        string confirmValue = Request.Form["confirm_value"];


        if (confirmValue.Contains(","))
        {
            confirmValue = confirmValue.Split(',')[confirmValue.Split(',').Length - 1].ToString();
        }

        if (confirmValue == "Yes")
        {
            string sqlConnectionString = Session["DBConnection"].ToString();

            string CatlogName = string.Empty;
            foreach (string str in sqlConnectionString.Split(';'))
            {
                if (str.Contains("Initial Catalog"))
                {
                    CatlogName = str.Split('=')[1];
                    break;
                }
            }
            string DBName = CatlogName;

            string Db_Backup_Restore_Path = string.Empty;
            // string chkDbLoc = objAppParam.GetApplicationParameterValueByParamName("IsDefault_DbLocation", Session["CompId"].ToString());
            DataTable DtDbLoc = objSys.GetSysParameterByParamName("Database BackUp Location");
            if (DtDbLoc.Rows.Count > 0)
            {
                Db_Backup_Restore_Path = DtDbLoc.Rows[0]["Param_Value"].ToString();
            }
            else
            {
                DisplayMessage("Please Set Database BackUp Path");
                return;
            }
            //string filepath = Server.MapPath("~/" + "DatabaseBackup" + "\\Pryce" + "-" + DateTime.Now.ToString("ddMMyyyyHHmm") + ".bak");
            string RegistrationCode = Common.Decrypt(objDa.get_SingleValue("Select registration_code from Application_Lic_Main"));
            string folderPath = Db_Backup_Restore_Path + '\\' + RegistrationCode;
            string fullPath = folderPath;
            if (Directory.Exists(fullPath))
            {
                //Console.WriteLine("The folder already exists.");
            }
            else
            {
                try
                {
                    Directory.CreateDirectory(fullPath);
                    //Console.WriteLine("The folder has been created.");
                }
                catch (Exception ex)
                {

                }
            }
            string Query = "BACKUP DATABASE " + DBName + " TO DISK = '" + fullPath + "\\" + txtFileName.Text + "-" + DateTime.Now.ToString("ddMMMyyyyHHmm") + ".bak'";

            //string Query = "BACKUP DATABASE " + DBName + " TO DISK = '" + fullPath + "'";

            int a = 0;
            try
            {
                a = daClass.execute_Command(Query);
                if (a != 0)
                {


                }
            }
            catch(Exception ex)
            {
                DisplayMessage("Error in database backup , Try again !");

                return;
            }
        }


        //if cloud solution is enable 
        if (ConfigurationManager.AppSettings["ApplicationType"].ToString().Trim().ToLower() == "cloud")
        {
            SqlScript(Session["DBConnection"].ToString());
            //MasterDataAccess ObjMa = new MasterDataAccess();
            //DataTable dtConnection = ObjMa.return_DataTable("SELECT pr_company_db.* FROM    pr_company  inner join dbo.pr_company_db  on pr_company_db.company_code = pr_company.company_code  ");
            ////cloud application
            //foreach (DataRow dr in dtConnection.Rows)
            //{
            //    SqlScript("Data Source=" + dr["server_name"].ToString() + ";Initial Catalog=" + dr["db_name"].ToString() + ";User ID=" + dr["user_id"].ToString() + ";Password=" + dr["db_password"].ToString() + ";Max Pool Size=10000;");
            //}
        }
        else
        {
            SqlScript(Session["DBConnection"].ToString());
        }


        DisplayMessage("Database updated Successfully");
        return;
    }

    public void SqlScript(string strConnectionstring)
    {
        ////approval updation
        string strsql = string.Empty;
        using (SqlConnection con = new SqlConnection())
        {
            con.ConnectionString = strConnectionstring;
            con.Open();
            SqlCommand cmd = new SqlCommand();
            cmd.Connection = con;





            //08-11-2019

            //start

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Att_ScheduleDescription_Insert] @Schedule_Id int, @Emp_Id int, @Att_Date datetime, @Shift_Id int, @TimeTable_Id int, @Is_Off bit, @Is_Temp bit, @Is_OverTime bit, @Field1 nvarchar(255), @Field2 nvarchar(255), @Field3 nvarchar(255), @Field4 nvarchar(255), @Field5 nvarchar(255), @Field6 bit, @Field7 datetime, @IsActive bit, @CreatedBy varchar(11), @CreatedDate datetime, @ModifiedBy varchar(11), @ModifiedDate datetime, @ReferenceID int OUTPUT AS BEGIN DECLARE @OTminute nvarchar(10) (SELECT @OTminute = Field2 FROM Att_TimeTable WHERE TimeTable_Id = @TimeTable_Id) IF (@OTminute = NULL OR @OTminute = '') BEGIN SET @OTminute = '0' END INSERT INTO Att_ScheduleDescription (Schedule_Id, Emp_Id, Att_Date, Shift_Id, TimeTable_Id, Is_Off, Is_Temp, Is_OverTime, [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (@Schedule_Id, @Emp_Id, @Att_Date, @Shift_Id, @TimeTable_Id, @Is_Off, @Is_Temp, @Is_OverTime, @Field1, @OTminute, @Field3, @Field4, @Field5, @Field6, @Field7, @IsActive, @CreatedBy, @CreatedDate, @ModifiedBy, @ModifiedDate) SELECT @ReferenceID = (SELECT MAX(Schedule_Id) FROM Att_ScheduleDescription) RETURN @ReferenceID END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }


            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Att_ScheduleDescription_SelectRow] @Emp_Id nvarchar(500), @Att_Date datetime, @Optype int AS BEGIN IF (@Optype = 1) BEGIN SELECT * FROM Att_ScheduleDescription WHERE IsActive = 'True' END ELSE IF (@Optype = 2) BEGIN SELECT Att_TimeTable.Late_min, Att_TimeTable.Early_min, Att_ScheduleDescription.Trans_Id, Att_ScheduleDescription.Schedule_Id, Att_ScheduleDescription.Emp_Id, Att_ScheduleDescription.Att_Date, Att_ScheduleDescription.Shift_Id, Att_ScheduleDescription.TimeTable_Id, Att_ScheduleDescription.Is_Off, Att_ScheduleDescription.Is_Temp, Att_ScheduleDescription.Field2, Att_ScheduleDescription.Is_OverTime, Att_ScheduleDescription.IsActive, Att_ScheduleDescription.CreatedBy, Att_ScheduleDescription.CreatedDate, Att_TimeTable.Beginning_In, Att_TimeTable.Beginning_Out, Att_TimeTable.Ending_In, Att_TimeTable.Ending_Out, Att_ScheduleDescription.ModifiedBy, Att_ScheduleDescription.ModifiedDate, Att_TimeTable.OnDuty_Time, Att_TimeTable.Work_Minute, Att_TimeTable.Break_Min, Att_TimeTable.OffDuty_Time, Att_TimeTable.Field1 FROM Att_ScheduleDescription LEFT OUTER JOIN Att_TimeTable ON Att_ScheduleDescription.TimeTable_Id = Att_TimeTable.TimeTable_Id WHERE (Att_ScheduleDescription.Emp_Id = @Emp_Id) AND (Att_ScheduleDescription.Att_Date = @Att_Date) AND (Att_ScheduleDescription.IsActive = 'True') ORDER BY LEFT(CONVERT(varchar, OnDuty_Time, 108), 5) END ELSE IF (@Optype = 3) BEGIN SELECT Att_ScheduleDescription.Trans_Id, Att_ScheduleDescription.Schedule_Id, Att_ScheduleDescription.Emp_Id, Att_ScheduleDescription.Att_Date, Att_ScheduleDescription.Shift_Id, Att_ScheduleDescription.TimeTable_Id, (SELECT TimeTable_Name FROM Att_TimeTable WHERE TimeTable_Id = Att_ScheduleDescription.TimeTable_Id) AS TimeTable_Name, Att_ScheduleDescription.Is_Off, Att_ScheduleDescription.Is_Temp, Att_ScheduleDescription.Is_OverTime, Att_TimeTable.Field1, Att_ScheduleDescription.Field2, Att_ScheduleDescription.Field3, Att_ScheduleDescription.Field4, Att_ScheduleDescription.Field5, Att_ScheduleDescription.Field6, Att_ScheduleDescription.Field7, Att_ScheduleDescription.IsActive, Att_ScheduleDescription.CreatedBy, Att_ScheduleDescription.CreatedDate, Att_ScheduleDescription.ModifiedBy, Att_ScheduleDescription.ModifiedDate, Att_TimeTable.OnDuty_Time, Att_TimeTable.Work_Minute, Att_TimeTable.Break_Min, Att_TimeTable.OffDuty_Time, Att_TimeTable.Beginning_In, Att_TimeTable.Beginning_Out, Att_TimeTable.Ending_In, Att_TimeTable.Ending_Out, CASE WHEN Att_ScheduleDescription.Is_Temp = 'True' THEN 'Temp_Shift' ELSE Att_ShiftManagement.Shift_Name END AS Shift_Name, (SELECT Emp_Name FROM Set_EmployeeMaster WHERE Emp_Id = Att_ScheduleDescription.Emp_Id) AS EmpName, (SELECT Emp_Code FROM Set_EmployeeMaster WHERE Emp_Id = Att_ScheduleDescription.Emp_Id) AS Emp_Code FROM Att_ScheduleDescription LEFT OUTER JOIN Att_ShiftManagement ON Att_ScheduleDescription.Shift_Id = Att_ShiftManagement.Shift_Id LEFT OUTER JOIN Att_TimeTable ON Att_ScheduleDescription.TimeTable_Id = Att_TimeTable.TimeTable_Id WHERE (Att_ScheduleDescription.Emp_Id = @Emp_Id) END ELSE IF (@Optype = 4) BEGIN SELECT Att_ScheduleDescription.Is_Off AS IS_Off, Att_ScheduleDescription.Is_Temp AS Is_Temp FROM Att_ScheduleDescription LEFT OUTER JOIN Att_ShiftManagement ON Att_ScheduleDescription.Shift_Id = Att_ShiftManagement.Shift_Id LEFT OUTER JOIN Att_TimeTable ON Att_ScheduleDescription.TimeTable_Id = Att_TimeTable.TimeTable_Id WHERE (Att_ScheduleDescription.Emp_Id = @Emp_Id AND Att_ScheduleDescription.Att_Date = @Att_Date) END ELSE IF (@Optype = 5) BEGIN SELECT Att_ScheduleDescription.Trans_Id, Att_ScheduleDescription.Schedule_Id, Att_ScheduleDescription.Emp_Id, Att_ScheduleDescription.Att_Date, Att_ScheduleDescription.Shift_Id, Att_ScheduleDescription.TimeTable_Id, Att_ScheduleDescription.Is_Off, CASE WHEN Att_ScheduleDescription.Is_Temp = 'True' THEN 'Temp_Shift' ELSE Att_ShiftManagement.Shift_Name END AS Shift_Name, Att_ScheduleDescription.Is_Temp, Att_ScheduleDescription.Is_OverTime, Att_TimeTable.Field1, Att_ScheduleDescription.Field2, Att_ScheduleDescription.Field3, Att_ScheduleDescription.Field4, Att_ScheduleDescription.Field5, Att_ScheduleDescription.Field6, Att_ScheduleDescription.Field7, Att_ScheduleDescription.IsActive, Att_ScheduleDescription.CreatedBy, Att_ScheduleDescription.CreatedDate, Att_ScheduleDescription.ModifiedBy, Att_ScheduleDescription.ModifiedDate, Att_TimeTable.OnDuty_Time, Att_TimeTable.Work_Minute, Att_TimeTable.Break_Min, Att_TimeTable.OffDuty_Time, Att_TimeTable.Beginning_In, Att_TimeTable.Beginning_Out, Att_TimeTable.Ending_In, Att_TimeTable.Ending_Out, set_employeemaster.Emp_Name AS EmpName, set_employeemaster.Emp_Code FROM Att_ScheduleDescription LEFT OUTER JOIN Att_ShiftManagement ON Att_ScheduleDescription.Shift_Id = Att_ShiftManagement.Shift_Id LEFT OUTER JOIN Att_TimeTable ON Att_ScheduleDescription.TimeTable_Id = Att_TimeTable.TimeTable_Id LEFT JOIN set_employeemaster ON Att_ScheduleDescription.Emp_Id = set_employeemaster.emp_id WHERE (Att_ScheduleDescription.Emp_Id IN (SELECT CAST(Value AS int) FROM F_Split(@Emp_Id, ',')) ) END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }
            //end

            //08-11-2019



            try
            {
                cmd.CommandText = "ALTER PROC [dbo].[sp_Att_HalfDay_Balance_Report] @Location_Id varchar(max), @Emp_Id varchar(max), @Year int AS BEGIN SELECT Att_Employee_HalfDay_Trans.Trans_Id, Att_Employee_HalfDay_Trans.Company_Id, Att_Employee_HalfDay_Trans.Emp_Id, Att_Employee_HalfDay_Trans.Year, Att_Employee_HalfDay_Trans.Total_Days, Att_Employee_HalfDay_Trans.Used_Days, Att_Employee_HalfDay_Trans.Remaining_Days, Att_Employee_HalfDay_Trans.Pending_Days, Att_Employee_HalfDay_Trans.IsActive, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Set_LocationMaster.Location_Name, (set_employeemaster.Emp_Name + '(' + Set_EmployeeMaster.Emp_Code + ') For Year = ' + CAST(Att_Employee_HalfDay_Trans.Year AS nvarchar(4))) AS GroupHeaderName, company.* FROM Att_Employee_HalfDay_Trans LEFT OUTER JOIN Set_EmployeeMaster ON Att_Employee_HalfDay_Trans.Emp_Id = Set_EmployeeMaster.Emp_Id left join Set_LocationMaster on Set_LocationMaster.Location_Id=Set_EmployeeMaster.Location_Id INNER JOIN (SELECT Set_CompanyMaster.Company_Id, Set_CompanyMaster.Company_Name AS HeaderName, Set_CompanyMaster.Company_Name_L AS HeaderName_L, Set_AddressMaster.Address FROM Set_CompanyMaster FULL OUTER JOIN Set_AddressChild ON Set_CompanyMaster.Company_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Company' FULL OUTER JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id) company ON company.Company_Id = Att_Employee_HalfDay_Trans.Company_Id WHERE (Att_Employee_HalfDay_Trans.IsActive = 'True') AND CASE WHEN @Location_Id = '' THEN '1' ELSE Set_EmployeeMaster.location_id END IN (SELECT CAST(Value AS int) FROM F_Split(@Location_Id, ',')) AND Att_Employee_HalfDay_Trans.Year = @Year AND CASE WHEN @Emp_Id = '' THEN '1' ELSE Att_Employee_HalfDay_Trans.Emp_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Emp_Id, ',')) END";
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            { }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Att_LateInDetail_Report] @Location_Id varchar(max), @Emp_Id varchar(max), @FromDate datetime, @ToDate datetime AS BEGIN SELECT Att_AttendanceRegister.Trans_Id, Att_AttendanceRegister.Company_Id, Att_AttendanceRegister.Emp_Id, REPLACE(CONVERT(char(11), Att_AttendanceRegister.Att_Date, 106), ' ', '-') AS Att_Date, LEFT(CONVERT(varchar, Att_AttendanceRegister.OnDuty_Time, 108), 5) AS OnDuty_Time, LEFT(CONVERT(varchar, Att_AttendanceRegister.In_Time, 108), 5) AS In_Time, Att_AttendanceRegister.IsLate, Att_AttendanceRegister.Late_Relaxation_Min, Att_AttendanceRegister.Late_Penalty_Min, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Emp_Name, Set_LocationMaster.location_name, CASE WHEN Att_AttendanceRegister.Is_TempShift = '1' THEN 'Temp Shift' ELSE Att_ShiftManagement.Shift_Name END AS Shift_Name, Att_AttendanceRegister.LateMin, Att_TimeTable.TimeTable_Name AS TimeTable_Name, CAST(Att_AttendanceRegister.LateMin / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.LateMin % 60 AS varchar(2)), 2) AS LateMin_hhmm, CAST(Att_AttendanceRegister.EffectiveWork_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.EffectiveWork_Min % 60 AS varchar(2)), 2) AS EffectiveWork_Min_hhmm, CAST(Att_AttendanceRegister.Late_Relaxation_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Late_Relaxation_Min % 60 AS varchar(2)), 2) AS Late_Relaxation_Min_hhmm, Set_DepartmentMaster.Dep_Name, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_DesignationMaster.Designation, company.* FROM Att_AttendanceRegister LEFT OUTER JOIN Set_EmployeeMaster ON Att_AttendanceRegister.Emp_Id = Set_EmployeeMaster.Emp_Id left join Set_LocationMaster on Set_LocationMaster.Location_Id=Set_EmployeeMaster.Location_Id LEFT JOIN Set_DesignationMaster ON Set_EmployeeMaster.designation_id = Set_DesignationMaster.Designation_Id LEFT JOIN Set_DepartmentMaster ON Set_EmployeeMaster.department_id = Set_DepartmentMaster.dep_id LEFT OUTER JOIN Att_ShiftManagement ON Att_AttendanceRegister.Shift_Id = Att_ShiftManagement.Shift_Id LEFT OUTER JOIN Att_TimeTable ON Att_AttendanceRegister.TimeTable_Id = Att_TimeTable.TimeTable_Id INNER JOIN (SELECT Set_CompanyMaster.Company_Id, Set_CompanyMaster.Company_Name AS HeaderName, Set_CompanyMaster.Company_Name_L AS HeaderName_L, Set_AddressMaster.Address FROM Set_CompanyMaster FULL OUTER JOIN Set_AddressChild ON Set_CompanyMaster.Company_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Company' FULL OUTER JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id) company ON company.Company_Id = Set_EmployeeMaster.Company_Id WHERE (CAST(FLOOR(CAST(Att_AttendanceRegister.Att_Date AS float)) AS datetime) >= @FromDate) AND (CAST(FLOOR(CAST(Att_AttendanceRegister.Att_Date AS float)) AS datetime) <= @ToDate) AND ((Att_AttendanceRegister.LateMin <> 0) OR (Att_AttendanceRegister.Late_Relaxation_Min <> 0)) AND CASE WHEN @Location_Id = '' THEN '1' ELSE Set_EmployeeMaster.Location_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Location_Id, ',')) AND CASE WHEN @Emp_Id = '' THEN '1' ELSE Att_AttendanceRegister.Emp_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Emp_Id, ',')) END";
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            { }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Att_Leave_balance_Report] @Location_Id varchar(max), @Emp_Id varchar(max), @year int AS BEGIN SELECT Att_Employee_Leave_Trans.Trans_Id, Att_Employee_Leave_Trans.Company_Id, Att_Employee_Leave_Trans.Emp_Id, Att_Employee_Leave_Trans.Leave_Type_Id, Att_Employee_Leave_Trans.Year, Att_Employee_Leave_Trans.Month, Att_Employee_Leave_Trans.Previous_Days, Att_Employee_Leave_Trans.Assign_Days, Att_Employee_Leave_Trans.Total_Days, Att_Employee_Leave_Trans.Used_Days, ROUND(ISNULL(Att_Employee_Leave_Trans.Remaining_Days, 0), 0) AS Remaining_Days, Att_Employee_Leave_Trans.Pending_Days, Att_Employee_Leave_Trans.Encash_Days, ROUND(ISNULL(Att_Employee_Leave_Trans.Field2, 0), 0) AS Field2, Att_Employee_Leave_Trans.Field3, Att_Employee_Leave_Trans.Field4, Att_Employee_Leave_Trans.Field5, Att_Employee_Leave_Trans.Field6, Att_Employee_Leave_Trans.Field7, Att_Employee_Leave_Trans.IsActive, Att_Employee_Leave_Trans.CreatedBy, Att_Employee_Leave_Trans.CreatedDate, Att_Employee_Leave_Trans.ModifiedBy, Att_Employee_Leave_Trans.ModifiedDate, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Att_LeaveMaster.Leave_Name, Set_Att_Employee_Leave.Shedule_Type, Set_EmployeeMaster.DOJ AS Field3, Att_Employee_Leave_Trans.Field1, company.*, Set_LocationMaster.Location_Name FROM Att_Employee_Leave_Trans LEFT OUTER JOIN Set_Att_Employee_Leave ON Att_Employee_Leave_Trans.Leave_Type_Id = Set_Att_Employee_Leave.LeaveType_Id AND Att_Employee_Leave_Trans.Emp_Id = Set_Att_Employee_Leave.Emp_Id AND Set_Att_Employee_Leave.IsActive = 'True' LEFT OUTER JOIN Att_LeaveMaster ON Att_Employee_Leave_Trans.Leave_Type_Id = Att_LeaveMaster.Leave_Id LEFT OUTER JOIN Set_EmployeeMaster ON Att_Employee_Leave_Trans.Emp_Id = Set_EmployeeMaster.Emp_Id left join Set_LocationMaster on Set_LocationMaster.Location_Id=Set_EmployeeMaster.Location_Id INNER JOIN (SELECT Set_CompanyMaster.Company_Id, Set_CompanyMaster.Company_Name AS HeaderName, Set_CompanyMaster.Company_Name_L AS HeaderName_L, Set_AddressMaster.Address FROM Set_CompanyMaster FULL OUTER JOIN Set_AddressChild ON Set_CompanyMaster.Company_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Company' FULL OUTER JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id) company ON company.Company_Id = Att_Employee_Leave_Trans.Company_Id WHERE (Att_Employee_Leave_Trans.IsActive = 'True') AND CASE WHEN @Location_Id = '' THEN '0' ELSE Set_EmployeeMaster.location_id END IN (SELECT CAST(Value AS int) FROM F_Split(@Location_Id, ',')) AND CASE WHEN @Emp_Id = '' THEN '0' ELSE Att_Employee_Leave_Trans.Emp_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Emp_Id, ',')) AND Att_Employee_Leave_Trans.Year = @year END";
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            { }



            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Att_Log_Report] @From_Date datetime, @To_Date datetime, @Location_Id varchar(max), @Emp_Id varchar(max), @vType nvarchar(50) AS BEGIN DECLARE @data TABLE ( company_id int, Trans_Id int, Device_Id int, Emp_Id int, Event_Date datetime, Event_Time datetime, Func_Code varchar(50), Type varchar(100), Verified_Type varchar(100), IsActive bit, CreatedBy varchar(50), CreatedDate datetime, ModifiedBy varchar(50), ModifiedDate datetime, Emp_Name varchar(250), Emp_Code varchar(50), Device_Name varchar(250), Location_Name varchar(250), CompId varchar(250), HeaderName varchar(250), HeaderName_L varchar(250), Address varchar(250) ) IF (@vType = '--By All--') BEGIN INSERT INTO @data SELECT Att_AttendanceLog.Company_Id, Att_AttendanceLog.Trans_Id, Att_AttendanceLog.Device_Id, Att_AttendanceLog.Emp_Id, CONVERT(date, Att_AttendanceLog.Event_Date, 105) AS Event_Date, Att_AttendanceLog.Event_Time, Att_AttendanceLog.Func_Code, Att_AttendanceLog.Type, Att_AttendanceLog.Verified_Type, Att_AttendanceLog.IsActive, Att_AttendanceLog.CreatedBy, Att_AttendanceLog.CreatedDate, Att_AttendanceLog.ModifiedBy, Att_AttendanceLog.ModifiedDate, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Att_deviceMaster.Device_Name, Set_LocationMaster.Location_Name, company.* FROM Att_AttendanceLog LEFT OUTER JOIN Set_EmployeeMaster ON Att_AttendanceLog.Emp_Id = Set_EmployeeMaster.Emp_Id LEFT JOIN Set_LocationMaster on Set_LocationMaster.Location_Id=Set_EmployeeMaster.Location_Id LEFT JOIN Att_deviceMaster ON Att_deviceMaster.Device_Id = Att_AttendanceLog.Device_Id INNER JOIN (SELECT Set_CompanyMaster.Company_Id AS CompId, Set_CompanyMaster.Company_Name AS HeaderName, Set_CompanyMaster.Company_Name_L AS HeaderName_L, Set_AddressMaster.Address FROM Set_CompanyMaster FULL OUTER JOIN Set_AddressChild ON Set_CompanyMaster.Company_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Company' FULL OUTER JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id) company ON company.CompId = Att_AttendanceLog.Company_Id WHERE (CAST(FLOOR(CAST(Att_AttendanceLog.Event_Date AS float)) AS datetime) >= @From_Date) AND (CAST(FLOOR(CAST(Att_AttendanceLog.Event_Date AS float)) AS datetime) <= @To_Date) AND Att_AttendanceLog.IsActive = 'true' AND CASE WHEN @Emp_Id = '' THEN 1 ELSE Att_AttendanceLog.Emp_Id END IN (SELECT CAST(Value AS int) AS location FROM F_Split(@Emp_Id, ',')) AND CASE WHEN @Location_Id = '' THEN 1 ELSE Set_EmployeeMaster.Location_Id END IN (SELECT CAST(Value AS int) AS location FROM F_Split(@location_id, ',')) ORDER BY Att_AttendanceLog.Event_Date, Att_AttendanceLog.Event_Time END ELSE BEGIN INSERT INTO @data SELECT Att_AttendanceLog.Company_Id, Att_AttendanceLog.Trans_Id, Att_AttendanceLog.Device_Id, Att_AttendanceLog.Emp_Id, CONVERT(date, Att_AttendanceLog.Event_Date, 105) AS Event_Date, Att_AttendanceLog.Event_Time, Att_AttendanceLog.Func_Code, Att_AttendanceLog.Type, Att_AttendanceLog.Verified_Type, Att_AttendanceLog.IsActive, Att_AttendanceLog.CreatedBy, Att_AttendanceLog.CreatedDate, Att_AttendanceLog.ModifiedBy, Att_AttendanceLog.ModifiedDate, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Att_deviceMaster.Device_Name, Set_LocationMaster.Location_Name, company.* FROM Att_AttendanceLog LEFT OUTER JOIN Set_EmployeeMaster ON Att_AttendanceLog.Emp_Id = Set_EmployeeMaster.Emp_Id left join Set_LocationMaster on Set_LocationMaster.Location_Id=Set_EmployeeMaster.Location_Id LEFT JOIN Att_deviceMaster ON Att_deviceMaster.Device_Id = Att_AttendanceLog.Device_Id INNER JOIN (SELECT Set_CompanyMaster.Company_Id AS CompId, Set_CompanyMaster.Company_Name AS HeaderName, Set_CompanyMaster.Company_Name_L AS HeaderName_L, Set_AddressMaster.Address FROM Set_CompanyMaster FULL OUTER JOIN Set_AddressChild ON Set_CompanyMaster.Company_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Company' FULL OUTER JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id) company ON company.CompId = Att_AttendanceLog.Company_Id WHERE (CAST(FLOOR(CAST(Att_AttendanceLog.Event_Date AS float)) AS datetime) >= @From_Date) AND (CAST(FLOOR(CAST(Att_AttendanceLog.Event_Date AS float)) AS datetime) <= @To_Date) AND Att_AttendanceLog.IsActive = 'true' AND Att_AttendanceLog.Verified_Type = @vType AND CASE WHEN @Emp_Id = '' THEN 1 ELSE Att_AttendanceLog.Emp_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Emp_Id, ',')) AND CASE WHEN @Location_Id = '' THEN 1 ELSE Set_EmployeeMaster.Location_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Location_Id, ',')) ORDER BY Att_AttendanceLog.Event_Date, Att_AttendanceLog.Event_Time END SELECT * FROM @data END";
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            { }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Att_EarlyOutDetail_Report] @Location_Id varchar(max), @Emp_Id varchar(max), @FromDate datetime, @ToDate datetime AS BEGIN SELECT Att_AttendanceRegister.Trans_Id, Att_AttendanceRegister.Company_Id, Att_AttendanceRegister.Emp_Id, REPLACE(CONVERT(char(11), Att_AttendanceRegister.Att_Date, 106), ' ', '-') AS Att_Date, LEFT(CONVERT(varchar, Att_AttendanceRegister.OnDuty_Time, 108), 5) AS OnDuty_Time, LEFT(CONVERT(varchar, Att_AttendanceRegister.OffDuty_Time, 108), 5) AS OffDuty_Time, LEFT(CONVERT(varchar, Att_AttendanceRegister.In_Time, 108), 5) AS In_Time, LEFT(CONVERT(varchar, Att_AttendanceRegister.Out_Time, 108), 5) AS Out_Time, Att_AttendanceRegister.IsEarlyOut, Att_AttendanceRegister.Early_Relaxation_Min, Att_AttendanceRegister.Early_Penalty_Min, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Emp_Name, CASE WHEN Att_AttendanceRegister.Is_TempShift = '1' THEN 'Temp Shift' ELSE Att_ShiftManagement.Shift_Name END AS Shift_Name, Att_AttendanceRegister.EarlyMin, Att_TimeTable.TimeTable_Name AS TimeTable_Name, CAST(Att_AttendanceRegister.EarlyMin / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.EarlyMin % 60 AS varchar(2)), 2) AS EarlyMin_hhmm, Set_DepartmentMaster.Dep_Name, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_DesignationMaster.Designation, CAST(Att_AttendanceRegister.TotalAssign_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.TotalAssign_Min % 60 AS varchar(2)), 2) AS TotalAssign_Min_hhmm, CAST(Att_AttendanceRegister.Early_Relaxation_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Early_Relaxation_Min % 60 AS varchar(2)), 2) AS Early_Relaxation_Min_hhmm, company.*, Set_LocationMaster.Location_Name FROM Att_AttendanceRegister LEFT OUTER JOIN Set_EmployeeMaster ON Att_AttendanceRegister.Emp_Id = Set_EmployeeMaster.Emp_Id LEFT JOIN Set_LocationMaster ON Set_LocationMaster.Location_Id=Set_EmployeeMaster.Location_Id LEFT JOIN Set_DesignationMaster ON Set_EmployeeMaster.designation_id = Set_DesignationMaster.Designation_Id LEFT JOIN Set_DepartmentMaster ON Set_EmployeeMaster.department_id = Set_DepartmentMaster.dep_id LEFT OUTER JOIN Att_ShiftManagement ON Att_AttendanceRegister.Shift_Id = Att_ShiftManagement.Shift_Id LEFT OUTER JOIN Att_TimeTable ON Att_AttendanceRegister.TimeTable_Id = Att_TimeTable.TimeTable_Id INNER JOIN (SELECT Set_CompanyMaster.Company_Id, Set_CompanyMaster.Company_Name AS HeaderName, Set_CompanyMaster.Company_Name_L AS HeaderName_L, Set_AddressMaster.Address FROM Set_CompanyMaster FULL OUTER JOIN Set_AddressChild ON Set_CompanyMaster.Company_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Company' FULL OUTER JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id) company ON company.Company_Id = Set_EmployeeMaster.Company_Id WHERE (CAST(FLOOR(CAST(Att_AttendanceRegister.Att_Date AS float)) AS datetime) >= @FromDate) AND (CAST(FLOOR(CAST(Att_AttendanceRegister.Att_Date AS float)) AS datetime) <= @ToDate) AND (((Att_AttendanceRegister.EarlyMin) <> 0) OR (Att_AttendanceRegister.Early_Relaxation_Min <> 0)) AND CASE WHEN @Location_Id = '' THEN '1' ELSE set_employeemaster.Location_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Location_Id, ',')) AND CASE WHEN @Emp_Id = '' THEN '1' ELSE Att_AttendanceRegister.Emp_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Emp_Id, ',')) END";
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            { }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Att_Leave_Status_Report] @Emp_id varchar(max), @FromDate datetime, @ToDate datetime AS BEGIN SELECT Att_Leave_Request.Trans_Id, Att_Leave_Request.Company_Id, Att_Leave_Request.Emp_Id, Att_Leave_Request.Application_Date, REPLACE(CONVERT(char(11), Att_Leave_Request.From_Date, 106), ' ', '-') AS From_Date, REPLACE(CONVERT(char(11), Att_Leave_Request.To_Date, 106), ' ', '-') AS To_Date, Att_Leave_Request.Is_Pending, Att_Leave_Request.Is_Approved, Att_Leave_Request.Is_Canceled, Att_Leave_Request.Emp_Description, Att_Leave_Request.Mgmt_Description, Att_Leave_Request.Leave_Type_Id, Att_Leave_Request.Field1, Att_Leave_Request.Field2, Att_Leave_Request.Field3, Att_Leave_Request.Field4, Att_Leave_Request.Field5, Att_Leave_Request.Field6, Att_Leave_Request.Field7, Att_Leave_Request.IsActive, Att_Leave_Request.CreatedBy, Att_Leave_Request.CreatedDate, tbl_user.emp_name AS ModifiedBy, Att_Leave_Request.ModifiedDate, Att_LeaveMaster.Leave_Name, leave_request_child.DaysCount, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Emp_Name, 'Yearly' AS Shedule_Type, company.*, Set_LocationMaster.Location_Name FROM Att_Leave_Request LEFT OUTER JOIN (SELECT Ref_Id, COUNT(*) AS DaysCount FROM Att_Leave_Request_Child GROUP BY ref_id) leave_request_child ON leave_request_child.Ref_Id = Att_Leave_Request.Trans_Id LEFT OUTER JOIN Set_EmployeeMaster ON Att_Leave_Request.Emp_Id = Set_EmployeeMaster.Emp_Id LEFT OUTER JOIN Att_LeaveMaster ON Att_Leave_Request.Leave_Type_Id = Att_LeaveMaster.Leave_Id INNER JOIN (SELECT Set_CompanyMaster.Company_Id, Set_CompanyMaster.Company_Name AS HeaderName, Set_CompanyMaster.Company_Name_L AS HeaderName_L, Set_AddressMaster.Address FROM Set_CompanyMaster FULL OUTER JOIN Set_AddressChild ON Set_CompanyMaster.Company_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Company' FULL OUTER JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id) company ON company.Company_Id = Att_Leave_Request.Company_Id LEFT JOIN set_employeemaster tbl_user ON tbl_user.emp_code = Att_Leave_Request.ModifiedBy left join Set_LocationMaster on Set_LocationMaster.Location_Id=Set_EmployeeMaster.Location_Id WHERE (Att_Leave_Request.IsActive = 'True') AND (CAST(FLOOR(CAST(Att_Leave_Request.From_Date AS float)) AS datetime) >= @FromDate) AND (CAST(FLOOR(CAST(Att_Leave_Request.From_Date AS float)) AS datetime) <= @ToDate) AND CASE WHEN @Emp_id = '' THEN '1' ELSE Att_Leave_Request.Emp_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Emp_Id, ',')) END";
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            { }

            try
            {
                cmd.CommandText = "ALTER PROC [dbo].[sp_Att_HalfDay_Status_Report] @FromDate datetime, @ToDate datetime, @Location_Id varchar(max), @Emp_Id varchar(max) AS BEGIN SELECT Att_HalfDay_Request.Trans_Id AS HalfdayTrans_Id, Att_HalfDay_Request.Company_Id, Att_HalfDay_Request.Emp_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Att_HalfDay_Request.Request_Date_Time, Att_HalfDay_Request.HalfDay_Date, Att_HalfDay_Request.Description, Att_HalfDay_Request.Approved_Date_Time, Att_HalfDay_Request.Is_Confirmed, Att_HalfDay_Request.HalfDay_Type, modify.emp_name AS modifyByName, company.*, Set_LocationMaster.Location_Name FROM Att_HalfDay_Request LEFT OUTER JOIN Set_EmployeeMaster ON Att_HalfDay_Request.Emp_Id = Set_EmployeeMaster.Emp_Id left join Set_LocationMaster on Set_LocationMaster.Location_Id=Set_EmployeeMaster.Location_Id LEFT JOIN set_usermaster ON set_usermaster.user_id = Att_HalfDay_Request.modifiedby LEFT JOIN Set_EmployeeMaster modify ON modify.Emp_Id = set_usermaster.Emp_Id INNER JOIN (SELECT Set_CompanyMaster.Company_Id, Set_CompanyMaster.Company_Name AS HeaderName, Set_CompanyMaster.Company_Name_L AS HeaderName_L, Set_AddressMaster.Address FROM Set_CompanyMaster FULL OUTER JOIN Set_AddressChild ON Set_CompanyMaster.Company_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Company' FULL OUTER JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id) company ON company.Company_Id = Att_HalfDay_Request.Company_Id WHERE (Att_HalfDay_Request.IsActive = 'True') AND (CAST(FLOOR(CAST(Att_HalfDay_Request.HalfDay_Date AS float)) AS datetime) >= @FromDate) AND (CAST(FLOOR(CAST(Att_HalfDay_Request.HalfDay_Date AS float)) AS datetime) <= @ToDate) AND CASE WHEN @Location_Id = '' THEN '1' ELSE Set_EmployeeMaster.location_id END IN (SELECT CAST(Value AS int) FROM F_Split(@Location_Id, ',')) AND CASE WHEN @Emp_Id = '' THEN '1' ELSE Att_HalfDay_Request.Emp_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Emp_Id, ',')) END";
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            { }



            //added by 16-11-2019
            try
            {
                cmd.CommandText = "alter table Att_AttendanceRegister add RequestStatus nchar(10) null, RequestDate datetime null,TeamLeader_Id int null,TeamLeader_Status bit null,TeamLeader_Action_Date datetime null,DepManager_Id int null,DepManager_Status bit null,DepManager_Action_Date datetime null,ParentDepManager_Id int null,ParentDepManager_Status bit null,ParentDepManager_Action_Date datetime null,HR_Id int null,HR_Status bit null,HR_Action_Date datetime null";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Att_AttendanceRegister_Insert] @Company_Id int, @Emp_Id int, @Att_Date datetime, @Shift_Id int, @Is_TempShift bit, @TimeTable_Id varchar(5), @OnDuty_Time datetime, @OffDuty_Time datetime, @In_Time datetime, @Out_Time datetime, @IsLate bit, @LateMin int, @Late_Relaxation_Min int, @Late_Penalty_Min int, @IsEarlyOut bit, @EarlyMin int, @Early_Relaxation_Min int, @Early_Penalty_Min int, @Is_Week_Off bit, @Is_Holiday bit, @Is_Leave bit, @Is_Absent bit, @Week_Off_Min int, @Holiday_Min int, @OverTime_Min int, @Partial_Min int, @Partial_Violation_Min int, @EffectiveWork_Min int, @TotalAssign_Min int, @Field1 nvarchar(max), @Field2 nvarchar(max), @Field3 nvarchar(max), @Field4 nvarchar(max), @Field5 nvarchar(max), @Field6 bit, @Field7 datetime, @IsActive bit, @CreatedBy varchar(11), @CreatedDate datetime, @ModifiedBy varchar(11), @ModifiedDate datetime, @CheckIn_by_deviceId int, @CheckOut_by_deviceId int, @Break_in datetime, @Break_out datetime, @Leave_Type_Id int, @Holiday_Id int, @HalfDay_Count int, @Log_Detail nvarchar(255), @ReferenceID int OUTPUT AS BEGIN IF (@Is_Week_Off = 1 AND @week_off_min > 0) BEGIN SET @EffectiveWork_Min = @week_off_min END if not exists(select emp_id from Att_AttendanceRegister where Att_Date=@Att_Date and Emp_Id=@emp_id and shift_id=@Shift_Id and TimeTable_Id=@TimeTable_Id) begin INSERT INTO Att_AttendanceRegister (Company_Id, Emp_Id, Att_Date, Shift_Id, Is_TempShift, TimeTable_Id, OnDuty_Time, OffDuty_Time, In_Time, Out_Time, IsLate, LateMin, Late_Relaxation_Min, Late_Penalty_Min, IsEarlyOut, EarlyMin, Early_Relaxation_Min, Early_Penalty_Min, Is_Week_Off, Is_Holiday, Is_Leave, Is_Absent, Week_Off_Min, Holiday_Min, OverTime_Min, Partial_Min, Partial_Violation_Min, EffectiveWork_Min, TotalAssign_Min, Field1, Field2, Field3, Field4, Field5, Field6, Field7, [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], [CheckIn_by_deviceId], [CheckOut_by_deviceId], [Break_in], [Break_out], [Leave_Type_Id], [Holiday_Id], HalfDay_Count, Log_Detail) VALUES (@Company_Id, @Emp_Id, @Att_Date, @Shift_Id, @Is_TempShift, @TimeTable_Id, @OnDuty_Time, @OffDuty_Time, @In_Time, @Out_Time, @IsLate, @LateMin, @Late_Relaxation_Min, @Late_Penalty_Min, @IsEarlyOut, @EarlyMin, @Early_Relaxation_Min, @Early_Penalty_Min, @Is_Week_Off, @Is_Holiday, @Is_Leave, @Is_Absent, @Week_Off_Min, @Holiday_Min, @OverTime_Min, @Partial_Min, @Partial_Violation_Min, @EffectiveWork_Min, @TotalAssign_Min, @Field1, @Field2, @Field3, @Field4, @Field5, @Field6, @Field7, @IsActive, @CreatedBy, @CreatedDate, @ModifiedBy, @ModifiedDate, @CheckIn_by_deviceId, @CheckOut_by_deviceId, @break_in, @break_out, @Leave_Type_Id, @Holiday_Id, @HalfDay_Count, @Log_Detail) end SELECT @ReferenceID = @@ROWCOUNT RETURN @ReferenceID END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER Procedure [dbo].[sp_Att_AttendanceRegister_Delete] @Emp_Id int, @From_Date datetime, @To_Date datetime, @ReferenceID int output As Begin delete from Att_AttendanceRegister where Emp_Id=@Emp_Id and ( Att_Date between @From_Date and @To_Date) and (RequestStatus='' or RequestStatus is null) select @ReferenceID=@@ROWCOUNT return @ReferenceID End";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }


            //added by jitendra on 29-11-2019
            try
            {
                cmd.CommandText = "alter table Att_PartialLeave_Request add  RequestDate datetime null,TeamLeader_Id int null,TeamLeader_Status bit null,TeamLeader_Action_Date datetime null,DepManager_Id int null,DepManager_Status bit null,DepManager_Action_Date datetime null,ParentDepManager_Id int null,ParentDepManager_Status bit null,ParentDepManager_Action_Date datetime null,HR_Id int null,HR_Status bit null,HR_Action_Date datetime null";
                cmd.ExecuteNonQuery();
            }
            catch
            {
            }



            try
            {
                cmd.CommandText = "create PROCEDURE [dbo].[sp_Att_OverTimeApproval_Report] @FromDate date, @ToDate date, @Emp_Id nvarchar(max),@DepName nvarchar(250)=null AS BEGIN DECLARE @tbl_emp TABLE ( [emp_id] int ) INSERT INTO @tbl_emp (emp_id) SELECT emp_id FROM (SELECT CAST(Value AS int) AS emp_id FROM F_Split(@Emp_Id, ',')) ab SELECT (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(atr.Remarks) FROM Att_AttendanceRegister atr WHERE atr.Emp_Id =Att_AttendanceRegister.emp_id and (cast(atr.att_date as date)>=@fromdate and cast(atr.att_date as date)<=@ToDate) FOR xml PATH ('')), 1, 1, '')) AS Remarks, Set_LocationMaster.Location_name, Att_AttendanceRegister.Trans_Id, Att_AttendanceRegister.Company_Id, Att_AttendanceRegister.Emp_Id, REPLACE(CONVERT(char(11), Att_AttendanceRegister.Att_Date, 106), ' ', '-') AS Att_Date, Att_AttendanceRegister.Shift_Id, Att_AttendanceRegister.Is_TempShift, Att_AttendanceRegister.TimeTable_Id, LEFT(CONVERT(varchar, Att_AttendanceRegister.OnDuty_Time, 108), 5) AS OnDuty_Time, LEFT(CONVERT(varchar, Att_AttendanceRegister.OffDuty_Time, 108), 5) AS OffDuty_Time, LEFT(CONVERT(varchar, Att_AttendanceRegister.In_Time, 108), 5) AS In_Time, LEFT(CONVERT(varchar, Att_AttendanceRegister.Out_Time, 108), 5) AS Out_Time, Att_AttendanceRegister.IsLate, Att_AttendanceRegister.EffectiveWork_Min, CASE WHEN Att_AttendanceRegister.Is_Week_Off = '1' THEN Att_AttendanceRegister.Week_Off_Min WHEN Att_AttendanceRegister.Is_Holiday = '1' THEN Att_AttendanceRegister.Holiday_Min ELSE Att_AttendanceRegister.OverTime_Min END AS OverTime_Min, Att_AttendanceRegister.Late_Relaxation_Min, Att_AttendanceRegister.Late_Penalty_Min, Att_AttendanceRegister.IsEarlyOut, Att_AttendanceRegister.Early_Relaxation_Min, Att_AttendanceRegister.Early_Penalty_Min, Att_AttendanceRegister.Is_Week_Off, Att_AttendanceRegister.Is_Holiday, Att_AttendanceRegister.Is_Leave, Att_AttendanceRegister.Is_Absent, Att_AttendanceRegister.Week_Off_Min, Att_AttendanceRegister.Holiday_Min, Att_AttendanceRegister.Partial_Min, Att_AttendanceRegister.Partial_Violation_Min, Att_AttendanceRegister.TotalAssign_Min, CASE WHEN Att_AttendanceRegister.Is_Week_Off = '1' THEN 'Off' WHEN Att_AttendanceRegister.Is_Holiday = '1' THEN 'Holiday' WHEN Att_AttendanceRegister.Is_Leave = '1' THEN (SELECT TOP 1 Att_LeaveMaster.Leave_Name FROM Att_Leave_Request INNER JOIN Att_LeaveMaster ON Att_Leave_Request.Leave_Type_Id = Att_LeaveMaster.Leave_Id WHERE (Att_Leave_Request.emp_id = Att_AttendanceRegister.emp_id) AND Att_AttendanceRegister.Att_Date BETWEEN Att_Leave_Request.From_Date AND Att_Leave_Request.To_Date AND (Att_Leave_Request.Is_Approved = 'True')) WHEN Att_AttendanceRegister.Is_Absent = '1' THEN 'Absent' ELSE 'Present' END AS Field1, Att_AttendanceRegister.Field1 AS Colour_Code, CASE WHEN Att_AttendanceRegister.Is_TempShift = '1' THEN (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'TempShift_Color_Code') WHEN Att_AttendanceRegister.Is_Week_Off = '1' THEN (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'WeekOff_Color_Code') WHEN Att_AttendanceRegister.Is_Holiday = '1' THEN (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'Holiday_Color_Code') WHEN Att_AttendanceRegister.Is_Leave = '1' THEN (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'Leave_Color_Code') WHEN Att_AttendanceRegister.Is_Absent = '1' THEN (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'Absnet_Color_Code') ELSE (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'Present_Color_Code') END Field2, Att_AttendanceRegister.Field3, Att_AttendanceRegister.Field4, Att_AttendanceRegister.Field6, Att_AttendanceRegister.Field7, Att_AttendanceRegister.IsActive, Att_AttendanceRegister.CreatedBy, Att_AttendanceRegister.CreatedDate, Att_AttendanceRegister.ModifiedBy, Att_AttendanceRegister.ModifiedDate, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Emp_Name, CASE WHEN Att_AttendanceRegister.Is_TempShift = '1' THEN 'Temp Shift' ELSE (CASE WHEN LEN(Att_ShiftManagement.Shift_Name) > 16 THEN SUBSTRING(Att_ShiftManagement.Shift_Name, 1, 14) + '..' ELSE Att_ShiftManagement.Shift_Name END) END AS Shift_Name, Att_AttendanceRegister.LateMin AS LateInMinute, Att_AttendanceRegister.EarlyMin + Att_AttendanceRegister.Early_Relaxation_Min AS EarlyOutMinute, Att_TimeTable.TimeTable_Name AS TimeTable_Name, CAST(Att_AttendanceRegister.LateMin / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.LateMin % 60 AS varchar(2)), 2) AS LateMin_hhmm, CAST(Att_AttendanceRegister.EarlyMin / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.EarlyMin % 60 AS varchar(2)), 2) AS EarlyMin_hhmm, CAST(Att_AttendanceRegister.EffectiveWork_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.EffectiveWork_Min % 60 AS varchar(2)), 2) AS EffectiveWork_Min_hhmm, case when cast( CASE WHEN Att_AttendanceRegister.Is_Week_Off = 'True' THEN CAST(Att_AttendanceRegister.Week_Off_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Week_Off_Min % 60 AS varchar(2)), 2) WHEN Att_AttendanceRegister.Is_Holiday = 'True' THEN CAST(Att_AttendanceRegister.Holiday_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Holiday_Min % 60 AS varchar(2)), 2) ELSE CAST(Att_AttendanceRegister.OverTime_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.OverTime_Min % 60 AS varchar(2)), 2) END as time)='00:00:00.0000000' then null else cast( CASE WHEN Att_AttendanceRegister.Is_Week_Off = 'True' THEN CAST(Att_AttendanceRegister.Week_Off_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Week_Off_Min % 60 AS varchar(2)), 2) WHEN Att_AttendanceRegister.Is_Holiday = 'True' THEN CAST(Att_AttendanceRegister.Holiday_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Holiday_Min % 60 AS varchar(2)), 2) ELSE CAST(Att_AttendanceRegister.OverTime_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.OverTime_Min % 60 AS varchar(2)), 2) END as time) end AS OverTime_Min_hhmm, CAST(Ar.LateMin / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.LateMin) % 60 AS varchar(2)), 2) AS SumLateMin_hhmm, CAST(Ar.EarlyMin / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.EarlyMin) % 60 AS varchar(2)), 2) AS SumEarlyMin_hhmm, CAST(Ar.EffectiveWork_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.EffectiveWork_Min) % 60 AS varchar(2)), 2) AS SumEffectiveWork_Min_hhmm, CAST(Ar.SumOverTime_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumOverTime_Min_hhmm) % 60 AS varchar(2)), 2) AS SumOverTime_Min_hhmm, CAST(Ar.GroupSumOverTime_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.GroupSumOverTime_Min_hhmm) % 60 AS varchar(2)), 2) AS GroupSumOverTime_Min_hhmm, CAST(Ar.SumLateEarlyMin_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumLateEarlyMin_hhmm) % 60 AS varchar(2)), 2) AS SumLateEarlyMin_hhmm, CAST(Att_AttendanceRegister.Late_Relaxation_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Late_Relaxation_Min % 60 AS varchar(2)), 2) AS Late_Relaxation_Min_hhmm, Ar.Latecount, CAST(Ar.SumLate_Relaxation_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumLate_Relaxation_Min_hhmm) % 60 AS varchar(2)), 2) AS SumLate_Relaxation_Min_hhmm, Set_DepartmentMaster.Dep_Name, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_DesignationMaster.Designation, Ar.Total_Days, Ar.Total_Present_days, Ar.Total_Absent_days, Ar.WeekOffcount, Ar.Leavecount, Ar.Holidaycount, CAST(Att_AttendanceRegister.TotalAssign_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.TotalAssign_Min % 60 AS varchar(2)), 2) AS TotalAssign_Min_hhmm, CAST(Att_AttendanceRegister.Early_Relaxation_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Early_Relaxation_Min % 60 AS varchar(2)), 2) AS Early_Relaxation_Min_hhmm, CAST(Ar.SumEarly_Relaxation_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumEarly_Relaxation_Min_hhmm) % 60 AS varchar(2)), 2) AS SumEarly_Relaxation_Min_hhmm, Ar.EarlyOutcount, CAST(Ar.SumWeek_Off_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumWeek_Off_Min_hhmm) % 60 AS varchar(2)), 2) AS SumWeek_Off_Min_hhmm, CAST(Ar.SumHoliday_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumHoliday_Min_hhmm) % 60 AS varchar(2)), 2) AS SumHoliday_Min_hhmm, CASE WHEN Att_AttendanceRegister.Is_Absent = 'True' OR Att_AttendanceRegister.Is_Week_Off = 'True' OR Att_AttendanceRegister.Is_Holiday = 'True' OR Att_AttendanceRegister.Is_Leave = 'True' OR Att_AttendanceRegister.OverTime_Min > 0 OR (Att_AttendanceRegister.TotalAssign_Min - Att_AttendanceRegister.EffectiveWork_Min) < 0 THEN '00:00' ELSE CAST((Att_AttendanceRegister.TotalAssign_Min - Att_AttendanceRegister.EffectiveWork_Min) / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Att_AttendanceRegister.TotalAssign_Min - Att_AttendanceRegister.EffectiveWork_Min) % 60 AS varchar(2)), 2) END AS Field5, CAST(Ar.ShortMin_HHMM / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.ShortMin_HHMM) % 60 AS varchar(2)), 2) AS ShortMin_HHMM, CASE WHEN (Att_AttendanceRegister.Is_Absent = 'True') THEN 'Absent' WHEN (Att_AttendanceRegister.Is_Week_Off = 'True') THEN 'Week Off' WHEN (Att_AttendanceRegister.Is_Holiday = 'True') THEN 'Holiday' WHEN (Att_AttendanceRegister.Is_Leave = 'True') THEN 'Leave' ELSE 'Present' END AS Status, CONVERT(varchar(5), Att_AttendanceRegister.Break_In, 108) AS Break_In, CONVERT(varchar(5), Att_AttendanceRegister.Break_Out, 108) AS Break_Out, CASE WHEN (SELECT COUNT(*) FROM Set_EmployeeInformation WHERE Set_EmployeeInformation.emp_id = Att_AttendanceRegister.Emp_Id AND (Set_EmployeeInformation.Template3 <> '' OR Set_EmployeeInformation.Template4 <> '')) = 0 THEN 0 ELSE 1 END AS UserStatus, att_Devicemaster.Device_Name AS CheckIn_device_Name, att_Devicemaster1.Device_Name AS Checkout_device_Name FROM Att_AttendanceRegister LEFT OUTER JOIN Set_EmployeeMaster ON Att_AttendanceRegister.Emp_Id = Set_EmployeeMaster.Emp_Id left join Set_LocationMaster on Set_EmployeeMaster.location_id = Set_LocationMaster.location_id LEFT JOIN Set_DesignationMaster ON Set_EmployeeMaster.designation_id = Set_DesignationMaster.Designation_Id LEFT JOIN Set_DepartmentMaster ON Set_EmployeeMaster.department_id = Set_DepartmentMaster.dep_id LEFT OUTER JOIN Att_ShiftManagement ON Att_AttendanceRegister.Shift_Id = Att_ShiftManagement.Shift_Id LEFT OUTER JOIN Att_TimeTable ON Att_AttendanceRegister.TimeTable_Id = Att_TimeTable.TimeTable_Id LEFT JOIN att_Devicemaster ON Att_AttendanceRegister.CheckIn_by_deviceId = att_Devicemaster.Device_Id LEFT JOIN att_Devicemaster AS att_Devicemaster1 ON Att_AttendanceRegister.Checkout_by_deviceId = att_Devicemaster1.Device_Id LEFT JOIN (SELECT Ar.emp_id, SUM(AR.LateMin) AS LateMin, SUM(AR.EarlyMin) AS EarlyMin, SUM(AR.EffectiveWork_Min) AS EffectiveWork_Min, SUM(CAST(AR.OverTime_Min AS int) + CAST(AR.Week_Off_Min AS int) + CAST(AR.Holiday_Min AS int)) AS SumOverTime_Min_hhmm, SUM(CAST(AR.OverTime_Min AS int) + CAST(AR.Week_Off_Min AS int) + CAST(AR.Holiday_Min AS int)) AS GroupSumOverTime_Min_hhmm, SUM(CAST(AR.EarlyMin AS int) + CAST(AR.LateMin AS int)) AS SumLateEarlyMin_hhmm, SUM(AR.Late_Relaxation_Min) AS SumLate_Relaxation_Min_hhmm, SUM(CASE WHEN Ar.Is_Week_Off = 'True' THEN 1 ELSE 0 END) AS WeekOffcount, SUM(CASE WHEN Ar.Is_Leave = 'True' THEN 1 ELSE 0 END) AS Leavecount, SUM(CASE WHEN AR.LateMin <> 0 AND Ar.IsLate = 'True' THEN 1 ELSE 0 END) AS Latecount, SUM(CASE WHEN Ar.Is_Holiday = 'True' THEN 1 ELSE 0 END) AS Holidaycount, SUM(AR.Early_Relaxation_Min) AS SumEarly_Relaxation_Min_hhmm, SUM(CASE WHEN Ar.EarlyMin <> 0 THEN 1 ELSE 0 END) AS EarlyOutcount, SUM(AR.Week_Off_Min) AS SumWeek_Off_Min_hhmm, SUM(AR.Holiday_Min) AS SumHoliday_Min_hhmm, COUNT(DISTINCT (AR.Att_Date)) AS Total_days, SUM(CASE WHEN AR.Is_Absent = 'True' OR AR.Is_Week_Off = 'True' OR AR.Is_Holiday = 'True' OR AR.Is_Leave = 'True' OR AR.OverTime_Min > 0 OR (AR.TotalAssign_Min - AR.EffectiveWork_Min) < 0 THEN 0 ELSE (AR.TotalAssign_Min - AR.EffectiveWork_Min) END) AS ShortMin_HHMM, SUM(CASE WHEN Is_Absent = 'False' AND Is_Holiday = 'False' AND is_week_off = 'False' AND Is_Leave = 'False' THEN 1 ELSE 0 END) AS Total_Present_days, SUM(CASE WHEN Is_Absent = 'True' THEN 1 ELSE 0 END) AS Total_Absent_days FROM Att_AttendanceRegister Ar WHERE (cast(Ar.att_date as date)>=@fromdate and cast(Ar.att_date as date)<=@ToDate) GROUP BY AR.emp_id) AR ON Ar.emp_id = Att_AttendanceRegister.Emp_Id WHERE (cast(Att_AttendanceRegister.att_date as date)>=@fromdate and cast(Att_AttendanceRegister.att_date as date)<=@ToDate) and (case when @depname IS null or @depname = '' then '1' else set_departmentmaster.dep_name end)=(case when @depname IS null or @depname = '' then '1' else @DepName end) AND (Att_AttendanceRegister.Emp_Id IN (SELECT Emp_Id FROM @tbl_emp) ) ORDER BY Att_AttendanceRegister.Att_Date OPTION (RECOMPILE) END";
                cmd.ExecuteNonQuery();
            }
            catch
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Att_OverTimeApproval_Report] @FromDate date, @ToDate date, @Emp_Id nvarchar(max),@DepName nvarchar(250)=null AS BEGIN DECLARE @tbl_emp TABLE ( [emp_id] int ) INSERT INTO @tbl_emp (emp_id) SELECT emp_id FROM (SELECT CAST(Value AS int) AS emp_id FROM F_Split(@Emp_Id, ',')) ab SELECT (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(atr.Remarks) FROM Att_AttendanceRegister atr WHERE atr.Emp_Id =Att_AttendanceRegister.emp_id and (cast(atr.att_date as date)>=@fromdate and cast(atr.att_date as date)<=@ToDate) FOR xml PATH ('')), 1, 1, '')) AS Remarks, Set_LocationMaster.Location_name, Att_AttendanceRegister.Trans_Id, Att_AttendanceRegister.Company_Id, Att_AttendanceRegister.Emp_Id, REPLACE(CONVERT(char(11), Att_AttendanceRegister.Att_Date, 106), ' ', '-') AS Att_Date, Att_AttendanceRegister.Shift_Id, Att_AttendanceRegister.Is_TempShift, Att_AttendanceRegister.TimeTable_Id, LEFT(CONVERT(varchar, Att_AttendanceRegister.OnDuty_Time, 108), 5) AS OnDuty_Time, LEFT(CONVERT(varchar, Att_AttendanceRegister.OffDuty_Time, 108), 5) AS OffDuty_Time, LEFT(CONVERT(varchar, Att_AttendanceRegister.In_Time, 108), 5) AS In_Time, LEFT(CONVERT(varchar, Att_AttendanceRegister.Out_Time, 108), 5) AS Out_Time, Att_AttendanceRegister.IsLate, Att_AttendanceRegister.EffectiveWork_Min, CASE WHEN Att_AttendanceRegister.Is_Week_Off = '1' THEN Att_AttendanceRegister.Week_Off_Min WHEN Att_AttendanceRegister.Is_Holiday = '1' THEN Att_AttendanceRegister.Holiday_Min ELSE Att_AttendanceRegister.OverTime_Min END AS OverTime_Min, Att_AttendanceRegister.Late_Relaxation_Min, Att_AttendanceRegister.Late_Penalty_Min, Att_AttendanceRegister.IsEarlyOut, Att_AttendanceRegister.Early_Relaxation_Min, Att_AttendanceRegister.Early_Penalty_Min, Att_AttendanceRegister.Is_Week_Off, Att_AttendanceRegister.Is_Holiday, Att_AttendanceRegister.Is_Leave, Att_AttendanceRegister.Is_Absent, Att_AttendanceRegister.Week_Off_Min, Att_AttendanceRegister.Holiday_Min, Att_AttendanceRegister.Partial_Min, Att_AttendanceRegister.Partial_Violation_Min, Att_AttendanceRegister.TotalAssign_Min, CASE WHEN Att_AttendanceRegister.Is_Week_Off = '1' THEN 'Off' WHEN Att_AttendanceRegister.Is_Holiday = '1' THEN 'Holiday' WHEN Att_AttendanceRegister.Is_Leave = '1' THEN (SELECT TOP 1 Att_LeaveMaster.Leave_Name FROM Att_Leave_Request INNER JOIN Att_LeaveMaster ON Att_Leave_Request.Leave_Type_Id = Att_LeaveMaster.Leave_Id WHERE (Att_Leave_Request.emp_id = Att_AttendanceRegister.emp_id) AND Att_AttendanceRegister.Att_Date BETWEEN Att_Leave_Request.From_Date AND Att_Leave_Request.To_Date AND (Att_Leave_Request.Is_Approved = 'True')) WHEN Att_AttendanceRegister.Is_Absent = '1' THEN 'Absent' ELSE 'Present' END AS Field1, Att_AttendanceRegister.Field1 AS Colour_Code, CASE WHEN Att_AttendanceRegister.Is_TempShift = '1' THEN (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'TempShift_Color_Code') WHEN Att_AttendanceRegister.Is_Week_Off = '1' THEN (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'WeekOff_Color_Code') WHEN Att_AttendanceRegister.Is_Holiday = '1' THEN (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'Holiday_Color_Code') WHEN Att_AttendanceRegister.Is_Leave = '1' THEN (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'Leave_Color_Code') WHEN Att_AttendanceRegister.Is_Absent = '1' THEN (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'Absnet_Color_Code') ELSE (SELECT TOP 1 CASE WHEN Set_ApplicationParameter.param_value = '' THEN 'ffffff' ELSE Set_ApplicationParameter.param_value END FROM Set_ApplicationParameter WHERE Set_ApplicationParameter.Company_Id = Set_EmployeeMaster.company_id AND Set_ApplicationParameter.Brand_Id = Set_EmployeeMaster.Brand_Id AND Set_ApplicationParameter.Location_Id = Set_EmployeeMaster.Location_Id AND Set_ApplicationParameter.Param_Name = 'Present_Color_Code') END Field2, Att_AttendanceRegister.Field3, Att_AttendanceRegister.Field4, Att_AttendanceRegister.Field6, Att_AttendanceRegister.Field7, Att_AttendanceRegister.IsActive, Att_AttendanceRegister.CreatedBy, Att_AttendanceRegister.CreatedDate, Att_AttendanceRegister.ModifiedBy, Att_AttendanceRegister.ModifiedDate, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Emp_Name, CASE WHEN Att_AttendanceRegister.Is_TempShift = '1' THEN 'Temp Shift' ELSE (CASE WHEN LEN(Att_ShiftManagement.Shift_Name) > 16 THEN SUBSTRING(Att_ShiftManagement.Shift_Name, 1, 14) + '..' ELSE Att_ShiftManagement.Shift_Name END) END AS Shift_Name, Att_AttendanceRegister.LateMin AS LateInMinute, Att_AttendanceRegister.EarlyMin + Att_AttendanceRegister.Early_Relaxation_Min AS EarlyOutMinute, Att_TimeTable.TimeTable_Name AS TimeTable_Name, CAST(Att_AttendanceRegister.LateMin / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.LateMin % 60 AS varchar(2)), 2) AS LateMin_hhmm, CAST(Att_AttendanceRegister.EarlyMin / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.EarlyMin % 60 AS varchar(2)), 2) AS EarlyMin_hhmm, CAST(Att_AttendanceRegister.EffectiveWork_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.EffectiveWork_Min % 60 AS varchar(2)), 2) AS EffectiveWork_Min_hhmm, case when cast( CASE WHEN Att_AttendanceRegister.Is_Week_Off = 'True' THEN CAST(Att_AttendanceRegister.Week_Off_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Week_Off_Min % 60 AS varchar(2)), 2) WHEN Att_AttendanceRegister.Is_Holiday = 'True' THEN CAST(Att_AttendanceRegister.Holiday_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Holiday_Min % 60 AS varchar(2)), 2) ELSE CAST(Att_AttendanceRegister.OverTime_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.OverTime_Min % 60 AS varchar(2)), 2) END as time)='00:00:00.0000000' then null else cast( CASE WHEN Att_AttendanceRegister.Is_Week_Off = 'True' THEN CAST(Att_AttendanceRegister.Week_Off_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Week_Off_Min % 60 AS varchar(2)), 2) WHEN Att_AttendanceRegister.Is_Holiday = 'True' THEN CAST(Att_AttendanceRegister.Holiday_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Holiday_Min % 60 AS varchar(2)), 2) ELSE CAST(Att_AttendanceRegister.OverTime_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.OverTime_Min % 60 AS varchar(2)), 2) END as time) end AS OverTime_Min_hhmm, CAST(Ar.LateMin / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.LateMin) % 60 AS varchar(2)), 2) AS SumLateMin_hhmm, CAST(Ar.EarlyMin / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.EarlyMin) % 60 AS varchar(2)), 2) AS SumEarlyMin_hhmm, CAST(Ar.EffectiveWork_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.EffectiveWork_Min) % 60 AS varchar(2)), 2) AS SumEffectiveWork_Min_hhmm, CAST(Ar.SumOverTime_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumOverTime_Min_hhmm) % 60 AS varchar(2)), 2) AS SumOverTime_Min_hhmm, CAST(Ar.GroupSumOverTime_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.GroupSumOverTime_Min_hhmm) % 60 AS varchar(2)), 2) AS GroupSumOverTime_Min_hhmm, CAST(Ar.SumLateEarlyMin_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumLateEarlyMin_hhmm) % 60 AS varchar(2)), 2) AS SumLateEarlyMin_hhmm, CAST(Att_AttendanceRegister.Late_Relaxation_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Late_Relaxation_Min % 60 AS varchar(2)), 2) AS Late_Relaxation_Min_hhmm, Ar.Latecount, CAST(Ar.SumLate_Relaxation_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumLate_Relaxation_Min_hhmm) % 60 AS varchar(2)), 2) AS SumLate_Relaxation_Min_hhmm, Set_DepartmentMaster.Dep_Name, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_DesignationMaster.Designation, Ar.Total_Days, Ar.Total_Present_days, Ar.Total_Absent_days, Ar.WeekOffcount, Ar.Leavecount, Ar.Holidaycount, CAST(Att_AttendanceRegister.TotalAssign_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.TotalAssign_Min % 60 AS varchar(2)), 2) AS TotalAssign_Min_hhmm, CAST(Att_AttendanceRegister.Early_Relaxation_Min / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST(Att_AttendanceRegister.Early_Relaxation_Min % 60 AS varchar(2)), 2) AS Early_Relaxation_Min_hhmm, CAST(Ar.SumEarly_Relaxation_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumEarly_Relaxation_Min_hhmm) % 60 AS varchar(2)), 2) AS SumEarly_Relaxation_Min_hhmm, Ar.EarlyOutcount, CAST(Ar.SumWeek_Off_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumWeek_Off_Min_hhmm) % 60 AS varchar(2)), 2) AS SumWeek_Off_Min_hhmm, CAST(Ar.SumHoliday_Min_hhmm / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.SumHoliday_Min_hhmm) % 60 AS varchar(2)), 2) AS SumHoliday_Min_hhmm, CASE WHEN Att_AttendanceRegister.Is_Absent = 'True' OR Att_AttendanceRegister.Is_Week_Off = 'True' OR Att_AttendanceRegister.Is_Holiday = 'True' OR Att_AttendanceRegister.Is_Leave = 'True' OR Att_AttendanceRegister.OverTime_Min > 0 OR (Att_AttendanceRegister.TotalAssign_Min - Att_AttendanceRegister.EffectiveWork_Min) < 0 THEN '00:00' ELSE CAST((Att_AttendanceRegister.TotalAssign_Min - Att_AttendanceRegister.EffectiveWork_Min) / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Att_AttendanceRegister.TotalAssign_Min - Att_AttendanceRegister.EffectiveWork_Min) % 60 AS varchar(2)), 2) END AS Field5, CAST(Ar.ShortMin_HHMM / 60 AS varchar(10)) + ':' + RIGHT('0' + CAST((Ar.ShortMin_HHMM) % 60 AS varchar(2)), 2) AS ShortMin_HHMM, CASE WHEN (Att_AttendanceRegister.Is_Absent = 'True') THEN 'Absent' WHEN (Att_AttendanceRegister.Is_Week_Off = 'True') THEN 'Week Off' WHEN (Att_AttendanceRegister.Is_Holiday = 'True') THEN 'Holiday' WHEN (Att_AttendanceRegister.Is_Leave = 'True') THEN 'Leave' ELSE 'Present' END AS Status, CONVERT(varchar(5), Att_AttendanceRegister.Break_In, 108) AS Break_In, CONVERT(varchar(5), Att_AttendanceRegister.Break_Out, 108) AS Break_Out, CASE WHEN (SELECT COUNT(*) FROM Set_EmployeeInformation WHERE Set_EmployeeInformation.emp_id = Att_AttendanceRegister.Emp_Id AND (Set_EmployeeInformation.Template3 <> '' OR Set_EmployeeInformation.Template4 <> '')) = 0 THEN 0 ELSE 1 END AS UserStatus, att_Devicemaster.Device_Name AS CheckIn_device_Name, att_Devicemaster1.Device_Name AS Checkout_device_Name FROM Att_AttendanceRegister LEFT OUTER JOIN Set_EmployeeMaster ON Att_AttendanceRegister.Emp_Id = Set_EmployeeMaster.Emp_Id left join Set_LocationMaster on Set_EmployeeMaster.location_id = Set_LocationMaster.location_id LEFT JOIN Set_DesignationMaster ON Set_EmployeeMaster.designation_id = Set_DesignationMaster.Designation_Id LEFT JOIN Set_DepartmentMaster ON Set_EmployeeMaster.department_id = Set_DepartmentMaster.dep_id LEFT OUTER JOIN Att_ShiftManagement ON Att_AttendanceRegister.Shift_Id = Att_ShiftManagement.Shift_Id LEFT OUTER JOIN Att_TimeTable ON Att_AttendanceRegister.TimeTable_Id = Att_TimeTable.TimeTable_Id LEFT JOIN att_Devicemaster ON Att_AttendanceRegister.CheckIn_by_deviceId = att_Devicemaster.Device_Id LEFT JOIN att_Devicemaster AS att_Devicemaster1 ON Att_AttendanceRegister.Checkout_by_deviceId = att_Devicemaster1.Device_Id LEFT JOIN (SELECT Ar.emp_id, SUM(AR.LateMin) AS LateMin, SUM(AR.EarlyMin) AS EarlyMin, SUM(AR.EffectiveWork_Min) AS EffectiveWork_Min, SUM(CAST(AR.OverTime_Min AS int) + CAST(AR.Week_Off_Min AS int) + CAST(AR.Holiday_Min AS int)) AS SumOverTime_Min_hhmm, SUM(CAST(AR.OverTime_Min AS int) + CAST(AR.Week_Off_Min AS int) + CAST(AR.Holiday_Min AS int)) AS GroupSumOverTime_Min_hhmm, SUM(CAST(AR.EarlyMin AS int) + CAST(AR.LateMin AS int)) AS SumLateEarlyMin_hhmm, SUM(AR.Late_Relaxation_Min) AS SumLate_Relaxation_Min_hhmm, SUM(CASE WHEN Ar.Is_Week_Off = 'True' THEN 1 ELSE 0 END) AS WeekOffcount, SUM(CASE WHEN Ar.Is_Leave = 'True' THEN 1 ELSE 0 END) AS Leavecount, SUM(CASE WHEN AR.LateMin <> 0 AND Ar.IsLate = 'True' THEN 1 ELSE 0 END) AS Latecount, SUM(CASE WHEN Ar.Is_Holiday = 'True' THEN 1 ELSE 0 END) AS Holidaycount, SUM(AR.Early_Relaxation_Min) AS SumEarly_Relaxation_Min_hhmm, SUM(CASE WHEN Ar.EarlyMin <> 0 THEN 1 ELSE 0 END) AS EarlyOutcount, SUM(AR.Week_Off_Min) AS SumWeek_Off_Min_hhmm, SUM(AR.Holiday_Min) AS SumHoliday_Min_hhmm, COUNT(DISTINCT (AR.Att_Date)) AS Total_days, SUM(CASE WHEN AR.Is_Absent = 'True' OR AR.Is_Week_Off = 'True' OR AR.Is_Holiday = 'True' OR AR.Is_Leave = 'True' OR AR.OverTime_Min > 0 OR (AR.TotalAssign_Min - AR.EffectiveWork_Min) < 0 THEN 0 ELSE (AR.TotalAssign_Min - AR.EffectiveWork_Min) END) AS ShortMin_HHMM, SUM(CASE WHEN Is_Absent = 'False' AND Is_Holiday = 'False' AND is_week_off = 'False' AND Is_Leave = 'False' THEN 1 ELSE 0 END) AS Total_Present_days, SUM(CASE WHEN Is_Absent = 'True' THEN 1 ELSE 0 END) AS Total_Absent_days FROM Att_AttendanceRegister Ar WHERE (cast(Ar.att_date as date)>=@fromdate and cast(Ar.att_date as date)<=@ToDate) GROUP BY AR.emp_id) AR ON Ar.emp_id = Att_AttendanceRegister.Emp_Id WHERE (cast(Att_AttendanceRegister.att_date as date)>=@fromdate and cast(Att_AttendanceRegister.att_date as date)<=@ToDate) and (case when @depname IS null or @depname = '' then '1' else set_departmentmaster.dep_name end)=(case when @depname IS null or @depname = '' then '1' else @DepName end) AND (Att_AttendanceRegister.Emp_Id IN (SELECT Emp_Id FROM @tbl_emp) ) ORDER BY Att_AttendanceRegister.Att_Date OPTION (RECOMPILE) END";
                cmd.ExecuteNonQuery();
            }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Att_PartialLeave_Request_SelectRow] @Company_Id int, @Emp_Id int, @Optype int AS BEGIN IF (@Optype = 1) BEGIN SELECT YEAR(Att_PartialLeave_Request.Partial_Leave_Date) AS Year, CASE WHEN (Att_PartialLeave_Request.partial_leave_type = 0 OR (Att_PartialLeave_Request.partial_leave_type = 1 AND Att_PartialLeave_Request.Field1 = 'Auto')) THEN 'Personal' ELSE 'Official' END AS PL_Leave_Type, Att_PartialLeave_Request.Trans_Id, Att_PartialLeave_Request.Company_Id, Att_PartialLeave_Request.Emp_Id, Att_PartialLeave_Request.Partial_Leave_Type, Att_PartialLeave_Request.Request_Date_Time, Att_PartialLeave_Request.Partial_Leave_Date, Att_PartialLeave_Request.From_Time, Att_PartialLeave_Request.To_Time, Att_PartialLeave_Request.Description, Att_PartialLeave_Request.Approved_Date_Time, Att_PartialLeave_Request.Is_Confirmed, Att_PartialLeave_Request.Field1, Att_PartialLeave_Request.Field2, Att_PartialLeave_Request.Field3, Att_PartialLeave_Request.Field4, Att_PartialLeave_Request.Field5, Att_PartialLeave_Request.Field6, Att_PartialLeave_Request.Field7, Att_PartialLeave_Request.IsActive, Att_PartialLeave_Request.CreatedBy, Att_PartialLeave_Request.CreatedDate, Att_PartialLeave_Request.ModifiedBy, Att_PartialLeave_Request.ModifiedDate, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id FROM Att_PartialLeave_Request LEFT OUTER JOIN Set_EmployeeMaster ON Att_PartialLeave_Request.Emp_Id = Set_EmployeeMaster.Emp_Id WHERE (Att_PartialLeave_Request.Company_Id = @Company_Id) AND (Att_PartialLeave_Request.IsActive = 'True') ORDER BY Trans_Id DESC END ELSE IF (@Optype = 2) BEGIN SELECT YEAR(Att_PartialLeave_Request.Partial_Leave_Date) AS Year, CASE WHEN (Att_PartialLeave_Request.partial_leave_type = 0 OR (Att_PartialLeave_Request.partial_leave_type = 1 AND Att_PartialLeave_Request.Field1 = 'Auto')) THEN 'Personal' ELSE 'Official' END AS PL_Leave_Type, Att_PartialLeave_Request.Trans_Id, Att_PartialLeave_Request.Company_Id, Att_PartialLeave_Request.Emp_Id, Att_PartialLeave_Request.Partial_Leave_Type, Att_PartialLeave_Request.Request_Date_Time, Att_PartialLeave_Request.Partial_Leave_Date, Att_PartialLeave_Request.From_Time, Att_PartialLeave_Request.To_Time, Att_PartialLeave_Request.Description, Att_PartialLeave_Request.Approved_Date_Time, Att_PartialLeave_Request.Is_Confirmed, Att_PartialLeave_Request.Field1, Att_PartialLeave_Request.Field2, Att_PartialLeave_Request.Field3, Att_PartialLeave_Request.Field4, Att_PartialLeave_Request.Field5, Att_PartialLeave_Request.Field6, Att_PartialLeave_Request.Field7, Att_PartialLeave_Request.IsActive, Att_PartialLeave_Request.CreatedBy, Att_PartialLeave_Request.CreatedDate, Att_PartialLeave_Request.ModifiedBy, Att_PartialLeave_Request.ModifiedDate, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id FROM Att_PartialLeave_Request LEFT OUTER JOIN Set_EmployeeMaster ON Att_PartialLeave_Request.Emp_Id = Set_EmployeeMaster.Emp_Id WHERE (Att_PartialLeave_Request.Emp_Id = @Emp_Id) AND (Att_PartialLeave_Request.IsActive = 'True') ORDER BY Trans_Id DESC END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER Procedure [dbo].[sp_Att_PartialLeave_Request_Insert] @Company_Id	int, @Emp_Id	int	, @Partial_Leave_Type	int	, @Request_Date_Time	datetime	, @Partial_Leave_Date	datetime	, @From_Time	nvarchar(MAX)	, @To_Time	nvarchar(MAX)	, @Description	nvarchar(MAX), @Approved_Date_Time	datetime	, @Is_Confirmed	nvarchar(MAX)	, @Field1 nvarchar(MAX), @Field2 nvarchar(MAX), @Field3 nvarchar(MAX), @Field4 nvarchar(MAX), @Field5 nvarchar(MAX), @Field6 bit, @Field7 datetime, @IsActive bit, @CreatedBy varchar(11), @CreatedDate datetime, @ModifiedBy varchar(11), @ModifiedDate datetime, @ReferenceID int output As Begin if not exists(select Emp_Id from Att_PartialLeave_Request where Emp_Id=@Emp_Id and Partial_Leave_Date=@Partial_Leave_Date and From_Time=@From_Time and To_Time=@To_Time) begin Insert Into Att_PartialLeave_Request ( Company_Id, Emp_Id	, Partial_Leave_Type	, Request_Date_Time	, Partial_Leave_Date	, From_Time, To_Time, Description, Approved_Date_Time	, Is_Confirmed	, [Field1],[Field2],[Field3],[Field4],[Field5],[Field6],[Field7],[IsActive],[CreatedBy],[CreatedDate],[ModifiedBy],[ModifiedDate]) Values ( @Company_Id, @Emp_Id	, @Partial_Leave_Type	, @Request_Date_Time	, @Partial_Leave_Date	, @From_Time, @To_Time, @Description,	@Approved_Date_Time	, @Is_Confirmed	, @Field1,@Field2,@Field3,@Field4,@Field5,@Field6,@Field7,@IsActive,@CreatedBy,@CreatedDate,@ModifiedBy,@ModifiedDate) end Select @ReferenceID =(select max(Trans_Id) from Att_PartialLeave_Request) Return @ReferenceID End";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }




            //added by jitendra on 15-02-2019
            //start

            try
            {
                cmd.CommandText = "alter table  Set_EmployeeMaster add Grade varchar(50) null";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "CREATE TABLE [dbo].[Set_GradeMaster]( [Grade_Id] [int] IDENTITY(1,1) NOT NULL, [Grade_Name] [nchar](10) NULL, CONSTRAINT [PK_Set_GradeMaster] PRIMARY KEY CLUSTERED ( [Grade_Id] ASC )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] ) ON [PRIMARY]";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Set_EmployeeMaster_Insert] @Company_Id int, @Brand_Id int, @Location_Id int, @Emp_Code varchar(11), @Civil_Id nvarchar(max), @Emp_Name nvarchar(max), @Emp_Name_L nvarchar(max), @Emp_Image nvarchar(max), @Department_Id int, @Designation_Id int, @Religion_Id int, @Nationality_Id int, @Qualification_Id int, @DOB datetime, @DOJ datetime, @Emp_Type nvarchar(max), @Termination_Date datetime, @Gender char(1), @Email_Id nvarchar(max), @Phone_No nvarchar(max), @Field1 nvarchar(max), @Field2 nvarchar(max), @Field3 nvarchar(max), @Field4 nvarchar(max), @Field5 nvarchar(max), @Field6 bit, @Field7 datetime, @IsActive bit, @CreatedBy varchar(11), @CreatedDate datetime, @ModifiedBy varchar(11), @ModifiedDate datetime, @ReferenceID int OUTPUT, @Company_Phone_No nvarchar(max), @Pan nvarchar(20), @FatherName nvarchar(50), @IsMarried bit, @DLNo nvarchar(20),@Grade varchar(10) AS BEGIN INSERT INTO Set_EmployeeMaster (Company_Id, Brand_Id, Location_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], Company_Phone_No, Pan, FatherName, IsMarried, DLNo,Grade) VALUES (@Company_Id, @Brand_Id, @Location_Id, @Emp_Code, @Civil_Id, @Emp_Name, @Emp_Name_L, @Emp_Image, @Department_Id, @Designation_Id, @Religion_Id, @Nationality_Id, @Qualification_Id, @DOB, @DOJ, @Emp_Type, @Termination_Date, @Gender, @Email_Id, @Phone_No, @Field1, @Field2, @Field3, @Field4, @Field5, @Field6, @Field7, @IsActive, @CreatedBy, @CreatedDate, @ModifiedBy, @ModifiedDate, @Company_Phone_No, @Pan, @FatherName, @IsMarried, @DLNo,@Grade) INSERT INTO Set_EmployeeInformation (Emp_Id, CardNo, Template1, Template2, Template3, Template4, Template5, Template6, Template7, Template8, Template9, Template10, Status, idwFingerIndex, iflag, sEnabled) VALUES ((SELECT MAX(Emp_Id) FROM Set_EmployeeMaster), '0', '0', '', '', '', '', 'True', 'True', '0', GETDATE(), GETDATE(), '', '0', '1', 'true') SELECT @ReferenceID = (SELECT MAX(Emp_Id) FROM Set_EmployeeMaster) RETURN @ReferenceID END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Set_EmployeeMaster_SelectRow] @Company_Id int, @Emp_Id nvarchar(max), @Emp_Name nvarchar(max), @Optype int AS BEGIN IF (@Optype = 1) BEGIN SELECT Set_EmployeeMaster.*, (SELECT Account_No FROM Set_Bank_Info WHERE Ref_Id = Set_EmployeeMaster.Emp_Id AND Ref_Type = 'Employee') AS Account_No, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id END ELSE IF (@Optype = 2) BEGIN SELECT Set_EmployeeMaster.Company_Id, (Set_EmployeeMaster.Emp_Name + '/' + Set_EmployeeMaster.Emp_Code) AS TlName, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Set_EmployeeMaster.Designation_Id, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, CONVERT(date, Set_EmployeeMaster.DOJ) AS DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, Set_EmployeeMaster.IsActive, MONTH(Set_EmployeeMaster.DOJ) AS JoiningMonth, YEAR(Set_EmployeeMaster.DOJ) AS JoiningYear, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_LocationMaster.location_Name AS Location, Set_ReligionMaster.Religion, Att_DeviceGroupMaster.Group_Name AS DeviceGroup, set_qualificationmaster.Qualification, set_nationalitymaster.Nationality, 'New Hire/Update' AS Action_Type, REPLACE(CONVERT(varchar(11), GETDATE(), 106), ' ', '-') AS Effectivedate, '' AS UserRole FROM Set_EmployeeMaster LEFT JOIN Set_LocationMaster ON Set_EmployeeMaster.Location_Id = Set_LocationMaster.Location_id LEFT JOIN Set_ReligionMaster ON Set_EmployeeMaster.Religion_Id = Set_ReligionMaster.Religion_Id LEFT JOIN Att_DeviceGroupMaster ON Set_EmployeeMaster.Device_Group_Id = Att_DeviceGroupMaster.Group_Id LEFT JOIN set_qualificationmaster ON Set_EmployeeMaster.Qualification_Id = set_qualificationmaster.Qualification_Id LEFT JOIN set_nationalitymaster ON Set_EmployeeMaster.nationality_Id = set_nationalitymaster.nationality_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' ORDER BY CAST(Set_EmployeeMaster.Emp_Code AS int) END ELSE IF (@Optype = 3) BEGIN SELECT Set_EmployeeMaster.*, Set_DepartmentMaster.dep_name AS DepartmentName, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, Set_LocationMaster.location_Name AS Location, Set_ReligionMaster.Religion, Att_DeviceGroupMaster.Group_Name AS DeviceGroup, set_qualificationmaster.Qualification, set_nationalitymaster.Nationality, 'Reverse Termination' AS Action_Type, REPLACE(CONVERT(varchar(11), GETDATE(), 106), ' ', '-') AS Effectivedate, '' AS UserRole FROM Set_EmployeeMaster LEFT JOIN Set_DepartmentMaster ON Set_EmployeeMaster.Department_Id = Set_DepartmentMaster.Dep_Id LEFT JOIN Set_LocationMaster ON Set_EmployeeMaster.Location_Id = Set_LocationMaster.Location_id LEFT JOIN Set_ReligionMaster ON Set_EmployeeMaster.Religion_Id = Set_ReligionMaster.Religion_Id LEFT JOIN Att_DeviceGroupMaster ON Set_EmployeeMaster.Device_Group_Id = Att_DeviceGroupMaster.Group_Id LEFT JOIN set_qualificationmaster ON Set_EmployeeMaster.Qualification_Id = set_qualificationmaster.Qualification_Id LEFT JOIN set_nationalitymaster ON Set_EmployeeMaster.nationality_Id = set_nationalitymaster.nationality_Id WHERE Set_EmployeeMaster.[Company_Id] = @Company_Id AND Set_EmployeeMaster.IsActive = 'False' END ELSE IF (@Optype = 4) BEGIN SELECT Set_EmployeeMaster.Grade, Set_EmployeeMaster.Company_Id, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id, CAST(Set_EmployeeMaster.Emp_Code AS int) AS Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, Set_EmployeeMaster.Designation_Id, Set_DesignationMaster.Designation, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, Set_EmployeeMaster.DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_EmployeeMaster.Company_phone_no, Set_EmployeeMaster.Pan, Set_EmployeeMaster.FatherName, Set_EmployeeMaster.IsMarried, ISNULL(Att_DeviceGroupMaster.Group_Id, 0) AS Device_Group_Id, DLNo, (SELECT Set_DepartmentMaster.Dep_Name FROM Set_DepartmentMaster WHERE Set_DepartmentMaster.Dep_Id = Set_EmployeeMaster.Department_Id) AS Department_Name, (SELECT Account_No FROM Set_Bank_Info WHERE Set_Bank_Info.Ref_Id = Set_EmployeeMaster.Emp_Id) AS Account_No FROM Set_EmployeeMaster LEFT JOIN Set_DesignationMaster ON Set_DesignationMaster.Designation_Id = Set_EmployeeMaster.Designation_Id LEFT JOIN Att_DeviceGroupMaster ON Set_EmployeeMaster.Device_Group_Id = Att_DeviceGroupMaster.Group_Id AND Att_DeviceGroupMaster.IsActive = 'True' WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.Emp_Id = @Emp_Id) END ELSE IF (@Optype = 5) BEGIN SELECT * FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id AND IsActive = 'True' AND Emp_Name = @Emp_Name AND Field2 = 'False' END ELSE IF (@Optype = 6) BEGIN SELECT Set_EmployeeMaster.*, (SELECT Account_No FROM Set_Bank_Info WHERE Ref_Id = Emp_Id AND Ref_Type = 'Employee') AS Account_No FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id AND CAST(Emp_Code AS int) = CAST(@Emp_Id AS int) END ELSE IF (@Optype = 7) BEGIN SELECT Set_EmployeeMaster.Company_Id, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id AS Expr1, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, Set_EmployeeMaster.Designation_Id, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, Set_EmployeeMaster.DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_EmployeeInformation.* FROM Set_EmployeeMaster LEFT OUTER JOIN Set_EmployeeInformation ON Set_EmployeeMaster.Emp_Id = Set_EmployeeInformation.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND Field2 = 'False' AND IsActive = 'True' END ELSE IF (@Optype = 8) BEGIN SELECT Set_EmployeeMaster.Company_Id AS Expr1, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id AS Expr2, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, Set_EmployeeMaster.Emp_Id, (SELECT Designation FROM Set_DesignationMaster WHERE (Designation_Id = Set_EmployeeMaster.Designation_Id)) AS Designation, Set_EmployeeMaster.Designation_Id, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, Set_EmployeeMaster.DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1 AS Expr3, Set_EmployeeMaster.Field2 AS Expr4, Set_EmployeeMaster.Field3 AS Expr5, Set_EmployeeMaster.Field4 AS Expr6, Set_EmployeeMaster.Field5 AS Expr7, Set_EmployeeMaster.Field6 AS Expr8, Set_EmployeeMaster.Field7 AS Expr9, Set_EmployeeMaster.IsActive AS Expr10, Set_EmployeeMaster.CreatedBy AS Expr11, Set_EmployeeMaster.CreatedDate AS Expr12, Set_EmployeeMaster.ModifiedBy AS Expr13, Set_EmployeeMaster.ModifiedDate AS Expr14, Ser_ReportMaster.Trans_Id, Ser_ReportMaster.Emp_Id AS Expr15, Ser_ReportMaster.Schedule_Days, Ser_ReportMaster.Last_Schedule_Date, Ser_ReportMaster.Field1, Ser_ReportMaster.Field2, Ser_ReportMaster.Field3, Ser_ReportMaster.Field4, Ser_ReportMaster.Field5, Ser_ReportMaster.Field6, Ser_ReportMaster.Field7, Ser_ReportMaster.IsActive, Ser_ReportMaster.CreatedBy, Ser_ReportMaster.CreatedDate, Ser_ReportMaster.ModifiedBy, Ser_ReportMaster.ModifiedDate FROM Set_EmployeeMaster LEFT OUTER JOIN Ser_ReportMaster ON Set_EmployeeMaster.Emp_Id = Ser_ReportMaster.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 9) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE (Designation_Id = Set_EmployeeMaster.Designation_Id)) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE (Dep_Id = Set_EmployeeMaster.Department_Id)) AS Department, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate FROM Set_EmployeeMaster WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 10) BEGIN SELECT DISTINCT Emp_Name, Brand_Id, Location_Id, Emp_Id FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id AND IsActive = 'True' AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 11) BEGIN SELECT Emp_Name, Brand_Id, Location_Id FROM Set_EmployeeMaster WHERE Brand_Id = @Company_Id AND IsActive = 'True' AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 12) BEGIN SELECT Emp_Name, Brand_Id, Location_Id FROM Set_EmployeeMaster WHERE Location_Id = @Company_Id AND IsActive = 'True' AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 13) BEGIN SELECT Set_EmployeeMaster.[Company_Id], Set_EmployeeMaster.[Brand_Id], Set_EmployeeMaster.[Location_Id], Set_EmployeeMaster.[Emp_Id], CAST(Set_EmployeeMaster.[Emp_Code] AS int) AS Emp_Code, Set_EmployeeMaster.[Civil_Id], Set_EmployeeMaster.[Emp_Name], Set_EmployeeMaster.[Emp_Name_L], Set_EmployeeMaster.[Emp_Image], Set_EmployeeMaster.[Department_Id], Set_EmployeeMaster.[Designation_Id], Set_EmployeeMaster.[Religion_Id], Set_EmployeeMaster.[Nationality_Id], Set_EmployeeMaster.[Qualification_Id], Set_EmployeeMaster.[DOB], Set_EmployeeMaster.[DOJ], Set_EmployeeMaster.[Emp_Type], Set_EmployeeMaster.[Termination_Date], Set_EmployeeMaster.[Gender], [Email_Id], Set_EmployeeMaster.[Phone_No], Set_EmployeeMaster.[Field1], Set_EmployeeMaster.[Field2], Set_EmployeeMaster.[Field3], Set_EmployeeMaster.[Field4], Set_EmployeeMaster.[Field5], Set_EmployeeMaster.[Field6], Set_EmployeeMaster.[Field7], Set_EmployeeMaster.[IsActive], Set_EmployeeMaster.[CreatedBy], Set_EmployeeMaster.[CreatedDate], Set_EmployeeMaster.[ModifiedBy], Set_EmployeeMaster.[ModifiedDate], Set_EmployeeMaster.[company_phone_no], Set_EmployeeMaster.[Pan], Set_EmployeeMaster.[FatherName], Set_EmployeeMaster.[IsMarried], Set_EmployeeMaster.[DLNo], Temp.Emp_Id AS Payroll_Emp_Id, Temp.Worked_Min_Salary, Temp.Normal_OT_Min_Salary, Temp.Week_Off_OT_Min_Salary, Temp.Holiday_OT_Min_Salary, Temp.Leave_Days_Salary, Temp.Week_Off_Salary, Temp.Holidays_Salary, Temp.Absent_Salary, Temp.Late_Min_Penalty, Temp.Early_Min_Penalty, Temp.Patial_Violation_Penalty, Temp.Employee_PF, Temp.Employee_ESIC, Temp.Year, Temp.Employee_Penalty, Temp.Employee_Claim, Temp.Emlployee_Loan, Temp.Total_Allowance, Temp.Total_Deduction, Temp.Previous_Month_Balance, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT DATENAME(MONTH, DATEADD(MONTH, Temp.Month, 0) - 1)) AS MonthName FROM Set_EmployeeMaster LEFT OUTER JOIN Set_Employee_Parameter ON Set_EmployeeMaster.Emp_Id = Set_Employee_Parameter.Emp_Id LEFT OUTER JOIN Pay_Employe_Month_Temp AS Temp ON Set_EmployeeMaster.Emp_Id = Temp.Emp_Id WHERE Set_EmployeeMaster.Company_Id = @Company_Id AND Set_Employee_Parameter.Company_Id = @Company_Id AND Set_EmployeeMaster.IsActive = 'True' AND Set_Employee_Parameter.Field6 = 'True' AND set_employeemaster.Emp_Type = 'On Role' AND Set_EmployeeMaster.Field2 = 'False' ORDER BY CAST(set_employeemaster.emp_code AS int) END ELSE IF (@Optype = 14) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, (SELECT Account_No FROM Set_Bank_Info WHERE Set_Bank_Info.Ref_Id = Set_EmployeeMaster.Emp_Id) AS Account_No FROM Set_EmployeeMaster WHERE (Emp_Id = @Emp_Id) AND (IsActive = 'True') AND Field2 = 'False' END ELSE IF (@Optype = 15) BEGIN SELECT Set_EmployeeMaster.Company_Id, Brand_Id, Location_Id, Set_EmployeeMaster.Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, Set_DesignationMaster.Designation AS Designation, Set_DepartmentMaster.Dep_Name AS Department, Set_Employee_Parameter.Basic_Salary AS BasicSalary, Set_EmployeeMaster.Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_UserMaster.User_Id, (ISNULL(Emp_Name, '') + '/(' + ISNULL((SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id), '') + ')/' + ISNULL(Emp_Code, '')) AS EmpDetailInfo FROM Set_EmployeeMaster LEFT JOIN Set_DesignationMaster ON Set_DesignationMaster.Designation_Id = Set_EmployeeMaster.Designation_Id LEFT JOIN Set_DepartmentMaster ON Set_DepartmentMaster.Dep_Id = Set_EmployeeMaster.Department_Id LEFT JOIN (SELECT TOP 1 Set_Employee_Parameter.Basic_Salary, Set_Employee_Parameter.emp_id FROM Set_Employee_Parameter) Set_Employee_Parameter ON Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id LEFT JOIN Set_UserMaster ON Set_UserMaster.Emp_Id = Set_EmployeeMaster.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' AND Set_EmployeeMaster.Emp_Type = 'On Role' ORDER BY CAST(emp_code AS int) END ELSE IF (@Optype = 16) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate FROM Set_EmployeeMaster WHERE (Company_Id = @Company_Id) ORDER BY CAST(Emp_Code AS int) END ELSE IF (@Optype = 17) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate FROM Set_EmployeeMaster WHERE (Company_Id = @Company_Id) AND Field2 = 'True' ORDER BY CAST(Emp_Code AS int) END ELSE IF (@Optype = 18) BEGIN SELECT Set_EmployeeMaster.*, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, Set_DepartmentMaster.Dep_Name AS Department FROM Set_EmployeeMaster LEFT JOIN Set_DepartmentMaster ON Set_EmployeeMaster.Department_Id = Set_DepartmentMaster.Dep_Id WHERE Set_EmployeeMaster.[Company_Id] = @Company_Id AND Set_EmployeeMaster.Field2 = 'True' END ELSE IF (@Optype = 19) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, CAST(Emp_Code AS int) AS Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, (Emp_Name + '/(' + (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) + ')/' + Emp_Code) AS EmpDetailInfo FROM Set_EmployeeMaster WHERE (Company_Id = @Company_Id) AND (IsActive = 'True') AND Emp_Type = 'On Role' ORDER BY CAST(emp_code AS int) END ELSE IF (@Optype = 20) BEGIN SELECT Set_EmployeeMaster.*, Temp.Emp_Id AS Payroll_Emp_Id, Temp.Worked_Min_Salary, Temp.Normal_OT_Min_Salary, Temp.Week_Off_OT_Min_Salary, Temp.Holiday_OT_Min_Salary, Temp.Leave_Days_Salary, Temp.Week_Off_Salary, Temp.Holidays_Salary, Temp.Absent_Salary, Temp.Late_Min_Penalty, Temp.Early_Min_Penalty, Temp.Patial_Violation_Penalty, Temp.Employee_PF, Temp.Employee_ESIC, Temp.Year, Temp.Employee_Penalty, Temp.Employee_Claim, Temp.Emlployee_Loan, Temp.Total_Allowance, Temp.Total_Deduction, Temp.Previous_Month_Balance, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT DATENAME(MONTH, DATEADD(MONTH, Temp.Month, 0) - 1)) AS MonthName FROM Set_EmployeeMaster LEFT OUTER JOIN Set_Employee_Parameter ON Set_EmployeeMaster.Emp_Id = Set_Employee_Parameter.Emp_Id LEFT OUTER JOIN Pay_Employe_Month_Temp AS Temp ON Set_EmployeeMaster.Emp_Id = Temp.Emp_Id WHERE Set_EmployeeMaster.Company_Id = @Company_Id AND Set_Employee_Parameter.Company_Id = @Company_Id AND Set_EmployeeMaster.IsActive = 'True' AND Set_Employee_Parameter.Field6 = 'True' AND set_employeemaster.Emp_Type = 'On Role' END IF (@Optype = 21) BEGIN SELECT Set_EmployeeMaster.emp_name, set_employeeMaster.emp_id FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = @Company_Id AND Set_EmployeeMaster.IsActive = 'True' AND set_employeemaster.Emp_Type = 'On Role' END IF (@Optype = 22) BEGIN SELECT Emp_Id, CAST(Emp_Code AS int) AS Emp_Code, Emp_Name, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation FROM Set_EmployeeMaster LEFT JOIN Set_DesignationMaster ON Set_DesignationMaster.Designation_Id = Set_EmployeeMaster.Designation_Id WHERE Company_Id = @Company_Id ORDER BY CAST(emp_code AS int) END IF (@Optype = 23) BEGIN SELECT Location_Id, Set_EmployeeMaster.Emp_Id, Emp_Code, Emp_Name, Set_UserMaster.User_Id FROM Set_EmployeeMaster LEFT JOIN Set_UserMaster ON Set_UserMaster.Emp_Id = Set_EmployeeMaster.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' AND Set_EmployeeMaster.Emp_Type = 'On Role' AND Set_EmployeeMaster.Emp_Id IN (SELECT CAST(Value AS int) AS empid FROM F_Split(@Emp_Id, ',')) ORDER BY Emp_Name ASC END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }


            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Set_EmployeeMaster_Update] @Company_Id int, @Brand_Id int, @Location_Id int, @Emp_Id int, @Emp_Code varchar(11), @Civil_Id nvarchar(max), @Emp_Name nvarchar(max), @Emp_Name_L nvarchar(max), @Emp_Image nvarchar(max), @Department_Id int, @Designation_Id int, @Religion_Id int, @Nationality_Id int, @Qualification_Id int, @DOB datetime, @DOJ datetime, @Emp_Type nvarchar(max), @Termination_Date datetime, @Gender char(1), @Email_Id nvarchar(max), @Phone_No nvarchar(max), @Field1 nvarchar(max), @Field2 nvarchar(max), @Field3 nvarchar(max), @Field4 nvarchar(max), @Field5 nvarchar(max), @Field6 bit, @Field7 datetime, @IsActive bit, @ModifiedBy varchar(11), @ModifiedDate datetime, @ReferenceID int OUTPUT, @Company_Phone_No nvarchar(max), @Pan nvarchar(20), @FatherName nvarchar(50), @IsMarried bit, @DLNo nvarchar(20),@Grade varchar(10) AS BEGIN UPDATE Set_EmployeeMaster SET Company_Id = @Company_Id, Brand_Id = @Brand_Id, Location_Id = @Location_Id, Emp_Code = @Emp_Code, Civil_Id = @Civil_Id, Emp_Name = @Emp_Name, Emp_Name_L = @Emp_Name_L, Emp_Image = @Emp_Image, Department_Id = @Department_Id, Designation_Id = @Designation_Id, Religion_Id = @Religion_Id, Nationality_Id = @Nationality_Id, Qualification_Id = @Qualification_Id, DOB = @DOB, DOJ = @DOJ, Emp_Type = @Emp_Type, Termination_Date = @Termination_Date, Gender = @Gender, Email_Id = @Email_Id, Phone_No = @Phone_No, [Field1] = @Field1, [Field2] = @Field2, [Field3] = @Field3, [Field4] = @Field4, [Field5] = @Field5, [Field6] = @Field6, [Field7] = @Field7, [IsActive] = @IsActive, [ModifiedBy] = @ModifiedBy, [ModifiedDate] = @ModifiedDate, Company_Phone_No = @Company_Phone_No, Pan = @Pan, FatherName = @FatherName, IsMarried = @IsMarried, DLNo = @DLNo, Grade=@Grade WHERE Emp_Id = @Emp_Id SELECT @ReferenceID = @@ROWCOUNT RETURN @ReferenceID END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Att_AttendanceLog_Insert] @Company_Id int, @Device_Id int, @Emp_Id int, @Event_Date datetime, @Event_Time datetime, @Func_Code nvarchar(max), @Type nvarchar(max), @Verified_Type nvarchar(max), @IsActive bit, @CreatedBy varchar(11), @CreatedDate datetime, @ModifiedBy varchar(11), @ModifiedDate datetime, @ReferenceID int OUTPUT AS BEGIN IF NOT EXISTS (SELECT Company_Id FROM Att_AttendanceLog WHERE Company_Id = @Company_Id AND Device_Id = @Device_Id AND Emp_Id = @Emp_Id AND cast(Event_Date as DATE) = cast(@Event_Date as date) AND Event_Time = @Event_Time AND IsActive = 'True') BEGIN INSERT INTO Att_AttendanceLog (Company_Id, Device_Id, Emp_Id, Event_Date, Event_Time, Func_Code, Type, Verified_Type, [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (@Company_Id, @Device_Id, @Emp_Id, cast(@Event_Date as date), @Event_Time, @Func_Code, @Type, @Verified_Type, @IsActive, @CreatedBy, @CreatedDate, @ModifiedBy, @ModifiedDate) END SELECT @ReferenceID = @@ROWCOUNT RETURN @ReferenceID END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //end

            //Added on 11-12-2019
            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Set_EmployeeMaster_SelectRow] @Company_Id int, @Emp_Id nvarchar(max), @Emp_Name nvarchar(max), @Optype int AS BEGIN IF (@Optype = 1) BEGIN SELECT Set_EmployeeMaster.*, (SELECT Account_No FROM Set_Bank_Info WHERE Ref_Id = Set_EmployeeMaster.Emp_Id AND Ref_Type = 'Employee') AS Account_No, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id END ELSE IF (@Optype = 2) BEGIN SELECT Set_EmployeeMaster.Company_Id, (Set_EmployeeMaster.Emp_Name + '/' + Set_EmployeeMaster.Emp_Code) AS TlName, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Set_EmployeeMaster.Designation_Id, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, CONVERT(date, Set_EmployeeMaster.DOJ) AS DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, Set_EmployeeMaster.IsActive, MONTH(Set_EmployeeMaster.DOJ) AS JoiningMonth, YEAR(Set_EmployeeMaster.DOJ) AS JoiningYear, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_LocationMaster.location_Name AS Location, Set_ReligionMaster.Religion, Att_DeviceGroupMaster.Group_Name AS DeviceGroup, set_qualificationmaster.Qualification, set_nationalitymaster.Nationality, 'New Hire/Update' AS Action_Type, REPLACE(CONVERT(varchar(11), GETDATE(), 106), ' ', '-') AS Effectivedate, '' AS UserRole, Set_UserMaster.User_Id FROM Set_EmployeeMaster LEFT JOIN Set_LocationMaster ON Set_EmployeeMaster.Location_Id = Set_LocationMaster.Location_id LEFT JOIN Set_ReligionMaster ON Set_EmployeeMaster.Religion_Id = Set_ReligionMaster.Religion_Id LEFT JOIN Att_DeviceGroupMaster ON Set_EmployeeMaster.Device_Group_Id = Att_DeviceGroupMaster.Group_Id LEFT JOIN set_qualificationmaster ON Set_EmployeeMaster.Qualification_Id = set_qualificationmaster.Qualification_Id LEFT JOIN set_nationalitymaster ON Set_EmployeeMaster.nationality_Id = set_nationalitymaster.nationality_Id left join Set_UserMaster on Set_UserMaster.Emp_Id=Set_EmployeeMaster.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' ORDER BY CAST(Set_EmployeeMaster.Emp_Code AS int) END ELSE IF (@Optype = 3) BEGIN SELECT Set_EmployeeMaster.*, Set_DepartmentMaster.dep_name AS DepartmentName, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, Set_LocationMaster.location_Name AS Location, Set_ReligionMaster.Religion, Att_DeviceGroupMaster.Group_Name AS DeviceGroup, set_qualificationmaster.Qualification, set_nationalitymaster.Nationality, 'Reverse Termination' AS Action_Type, REPLACE(CONVERT(varchar(11), GETDATE(), 106), ' ', '-') AS Effectivedate, '' AS UserRole FROM Set_EmployeeMaster LEFT JOIN Set_DepartmentMaster ON Set_EmployeeMaster.Department_Id = Set_DepartmentMaster.Dep_Id LEFT JOIN Set_LocationMaster ON Set_EmployeeMaster.Location_Id = Set_LocationMaster.Location_id LEFT JOIN Set_ReligionMaster ON Set_EmployeeMaster.Religion_Id = Set_ReligionMaster.Religion_Id LEFT JOIN Att_DeviceGroupMaster ON Set_EmployeeMaster.Device_Group_Id = Att_DeviceGroupMaster.Group_Id LEFT JOIN set_qualificationmaster ON Set_EmployeeMaster.Qualification_Id = set_qualificationmaster.Qualification_Id LEFT JOIN set_nationalitymaster ON Set_EmployeeMaster.nationality_Id = set_nationalitymaster.nationality_Id WHERE Set_EmployeeMaster.[Company_Id] = @Company_Id AND Set_EmployeeMaster.IsActive = 'False' END ELSE IF (@Optype = 4) BEGIN SELECT Set_EmployeeMaster.Grade, Set_EmployeeMaster.Company_Id, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id, CAST(Set_EmployeeMaster.Emp_Code AS int) AS Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, Set_EmployeeMaster.Designation_Id, Set_DesignationMaster.Designation, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, Set_EmployeeMaster.DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_EmployeeMaster.Company_phone_no, Set_EmployeeMaster.Pan, Set_EmployeeMaster.FatherName, Set_EmployeeMaster.IsMarried, ISNULL(Att_DeviceGroupMaster.Group_Id, 0) AS Device_Group_Id, DLNo, (SELECT Set_DepartmentMaster.Dep_Name FROM Set_DepartmentMaster WHERE Set_DepartmentMaster.Dep_Id = Set_EmployeeMaster.Department_Id) AS Department_Name, (SELECT Account_No FROM Set_Bank_Info WHERE Set_Bank_Info.Ref_Id = Set_EmployeeMaster.Emp_Id) AS Account_No FROM Set_EmployeeMaster LEFT JOIN Set_DesignationMaster ON Set_DesignationMaster.Designation_Id = Set_EmployeeMaster.Designation_Id LEFT JOIN Att_DeviceGroupMaster ON Set_EmployeeMaster.Device_Group_Id = Att_DeviceGroupMaster.Group_Id AND Att_DeviceGroupMaster.IsActive = 'True' WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.Emp_Id = @Emp_Id) END ELSE IF (@Optype = 5) BEGIN SELECT * FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id AND IsActive = 'True' AND Emp_Name = @Emp_Name AND Field2 = 'False' END ELSE IF (@Optype = 6) BEGIN SELECT Set_EmployeeMaster.*, (SELECT Account_No FROM Set_Bank_Info WHERE Ref_Id = Emp_Id AND Ref_Type = 'Employee') AS Account_No FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id AND CAST(Emp_Code AS int) = CAST(@Emp_Id AS int) END ELSE IF (@Optype = 7) BEGIN SELECT Set_EmployeeMaster.Company_Id, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id AS Expr1, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, Set_EmployeeMaster.Designation_Id, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, Set_EmployeeMaster.DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_EmployeeInformation.* FROM Set_EmployeeMaster LEFT OUTER JOIN Set_EmployeeInformation ON Set_EmployeeMaster.Emp_Id = Set_EmployeeInformation.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND Field2 = 'False' AND IsActive = 'True' END ELSE IF (@Optype = 8) BEGIN SELECT Set_EmployeeMaster.Company_Id AS Expr1, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id AS Expr2, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, Set_EmployeeMaster.Emp_Id, (SELECT Designation FROM Set_DesignationMaster WHERE (Designation_Id = Set_EmployeeMaster.Designation_Id)) AS Designation, Set_EmployeeMaster.Designation_Id, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, Set_EmployeeMaster.DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1 AS Expr3, Set_EmployeeMaster.Field2 AS Expr4, Set_EmployeeMaster.Field3 AS Expr5, Set_EmployeeMaster.Field4 AS Expr6, Set_EmployeeMaster.Field5 AS Expr7, Set_EmployeeMaster.Field6 AS Expr8, Set_EmployeeMaster.Field7 AS Expr9, Set_EmployeeMaster.IsActive AS Expr10, Set_EmployeeMaster.CreatedBy AS Expr11, Set_EmployeeMaster.CreatedDate AS Expr12, Set_EmployeeMaster.ModifiedBy AS Expr13, Set_EmployeeMaster.ModifiedDate AS Expr14, Ser_ReportMaster.Trans_Id, Ser_ReportMaster.Emp_Id AS Expr15, Ser_ReportMaster.Schedule_Days, Ser_ReportMaster.Last_Schedule_Date, Ser_ReportMaster.Field1, Ser_ReportMaster.Field2, Ser_ReportMaster.Field3, Ser_ReportMaster.Field4, Ser_ReportMaster.Field5, Ser_ReportMaster.Field6, Ser_ReportMaster.Field7, Ser_ReportMaster.IsActive, Ser_ReportMaster.CreatedBy, Ser_ReportMaster.CreatedDate, Ser_ReportMaster.ModifiedBy, Ser_ReportMaster.ModifiedDate FROM Set_EmployeeMaster LEFT OUTER JOIN Ser_ReportMaster ON Set_EmployeeMaster.Emp_Id = Ser_ReportMaster.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 9) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE (Designation_Id = Set_EmployeeMaster.Designation_Id)) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE (Dep_Id = Set_EmployeeMaster.Department_Id)) AS Department, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate FROM Set_EmployeeMaster WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 10) BEGIN SELECT DISTINCT Emp_Name, Brand_Id, Location_Id, Emp_Id FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id AND IsActive = 'True' AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 11) BEGIN SELECT Emp_Name, Brand_Id, Location_Id FROM Set_EmployeeMaster WHERE Brand_Id = @Company_Id AND IsActive = 'True' AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 12) BEGIN SELECT Emp_Name, Brand_Id, Location_Id FROM Set_EmployeeMaster WHERE Location_Id = @Company_Id AND IsActive = 'True' AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 13) BEGIN SELECT Set_EmployeeMaster.[Company_Id], Set_EmployeeMaster.[Brand_Id], Set_EmployeeMaster.[Location_Id], Set_EmployeeMaster.[Emp_Id], CAST(Set_EmployeeMaster.[Emp_Code] AS int) AS Emp_Code, Set_EmployeeMaster.[Civil_Id], Set_EmployeeMaster.[Emp_Name], Set_EmployeeMaster.[Emp_Name_L], Set_EmployeeMaster.[Emp_Image], Set_EmployeeMaster.[Department_Id], Set_EmployeeMaster.[Designation_Id], Set_EmployeeMaster.[Religion_Id], Set_EmployeeMaster.[Nationality_Id], Set_EmployeeMaster.[Qualification_Id], Set_EmployeeMaster.[DOB], Set_EmployeeMaster.[DOJ], Set_EmployeeMaster.[Emp_Type], Set_EmployeeMaster.[Termination_Date], Set_EmployeeMaster.[Gender], [Email_Id], Set_EmployeeMaster.[Phone_No], Set_EmployeeMaster.[Field1], Set_EmployeeMaster.[Field2], Set_EmployeeMaster.[Field3], Set_EmployeeMaster.[Field4], Set_EmployeeMaster.[Field5], Set_EmployeeMaster.[Field6], Set_EmployeeMaster.[Field7], Set_EmployeeMaster.[IsActive], Set_EmployeeMaster.[CreatedBy], Set_EmployeeMaster.[CreatedDate], Set_EmployeeMaster.[ModifiedBy], Set_EmployeeMaster.[ModifiedDate], Set_EmployeeMaster.[company_phone_no], Set_EmployeeMaster.[Pan], Set_EmployeeMaster.[FatherName], Set_EmployeeMaster.[IsMarried], Set_EmployeeMaster.[DLNo], Temp.Emp_Id AS Payroll_Emp_Id, Temp.Worked_Min_Salary, Temp.Normal_OT_Min_Salary, Temp.Week_Off_OT_Min_Salary, Temp.Holiday_OT_Min_Salary, Temp.Leave_Days_Salary, Temp.Week_Off_Salary, Temp.Holidays_Salary, Temp.Absent_Salary, Temp.Late_Min_Penalty, Temp.Early_Min_Penalty, Temp.Patial_Violation_Penalty, Temp.Employee_PF, Temp.Employee_ESIC, Temp.Year, Temp.Employee_Penalty, Temp.Employee_Claim, Temp.Emlployee_Loan, Temp.Total_Allowance, Temp.Total_Deduction, Temp.Previous_Month_Balance, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT DATENAME(MONTH, DATEADD(MONTH, Temp.Month, 0) - 1)) AS MonthName FROM Set_EmployeeMaster LEFT OUTER JOIN Set_Employee_Parameter ON Set_EmployeeMaster.Emp_Id = Set_Employee_Parameter.Emp_Id LEFT OUTER JOIN Pay_Employe_Month_Temp AS Temp ON Set_EmployeeMaster.Emp_Id = Temp.Emp_Id WHERE Set_EmployeeMaster.Company_Id = @Company_Id AND Set_Employee_Parameter.Company_Id = @Company_Id AND Set_EmployeeMaster.IsActive = 'True' AND Set_Employee_Parameter.Field6 = 'True' AND set_employeemaster.Emp_Type = 'On Role' AND Set_EmployeeMaster.Field2 = 'False' ORDER BY CAST(set_employeemaster.emp_code AS int) END ELSE IF (@Optype = 14) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, (SELECT Account_No FROM Set_Bank_Info WHERE Set_Bank_Info.Ref_Id = Set_EmployeeMaster.Emp_Id) AS Account_No FROM Set_EmployeeMaster WHERE (Emp_Id = @Emp_Id) AND (IsActive = 'True') AND Field2 = 'False' END ELSE IF (@Optype = 15) BEGIN SELECT Set_EmployeeMaster.Company_Id, Brand_Id, Location_Id, Set_EmployeeMaster.Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, Set_DesignationMaster.Designation AS Designation, Set_DepartmentMaster.Dep_Name AS Department, Set_Employee_Parameter.Basic_Salary AS BasicSalary, Set_EmployeeMaster.Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_UserMaster.User_Id, (ISNULL(Emp_Name, '') + '/(' + ISNULL((SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id), '') + ')/' + ISNULL(Emp_Code, '')) AS EmpDetailInfo FROM Set_EmployeeMaster LEFT JOIN Set_DesignationMaster ON Set_DesignationMaster.Designation_Id = Set_EmployeeMaster.Designation_Id LEFT JOIN Set_DepartmentMaster ON Set_DepartmentMaster.Dep_Id = Set_EmployeeMaster.Department_Id LEFT JOIN (SELECT TOP 1 Set_Employee_Parameter.Basic_Salary, Set_Employee_Parameter.emp_id FROM Set_Employee_Parameter) Set_Employee_Parameter ON Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id LEFT JOIN Set_UserMaster ON Set_UserMaster.Emp_Id = Set_EmployeeMaster.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' AND Set_EmployeeMaster.Emp_Type = 'On Role' ORDER BY CAST(emp_code AS int) END ELSE IF (@Optype = 16) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate FROM Set_EmployeeMaster WHERE (Company_Id = @Company_Id) ORDER BY CAST(Emp_Code AS int) END ELSE IF (@Optype = 17) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate FROM Set_EmployeeMaster WHERE (Company_Id = @Company_Id) AND Field2 = 'True' ORDER BY CAST(Emp_Code AS int) END ELSE IF (@Optype = 18) BEGIN SELECT Set_EmployeeMaster.*, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, Set_DepartmentMaster.Dep_Name AS Department FROM Set_EmployeeMaster LEFT JOIN Set_DepartmentMaster ON Set_EmployeeMaster.Department_Id = Set_DepartmentMaster.Dep_Id WHERE Set_EmployeeMaster.[Company_Id] = @Company_Id AND Set_EmployeeMaster.Field2 = 'True' END ELSE IF (@Optype = 19) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, CAST(Emp_Code AS int) AS Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, (Emp_Name + '/(' + (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) + ')/' + Emp_Code) AS EmpDetailInfo FROM Set_EmployeeMaster WHERE (Company_Id = @Company_Id) AND (IsActive = 'True') AND Emp_Type = 'On Role' ORDER BY CAST(emp_code AS int) END ELSE IF (@Optype = 20) BEGIN SELECT Set_EmployeeMaster.*, Temp.Emp_Id AS Payroll_Emp_Id, Temp.Worked_Min_Salary, Temp.Normal_OT_Min_Salary, Temp.Week_Off_OT_Min_Salary, Temp.Holiday_OT_Min_Salary, Temp.Leave_Days_Salary, Temp.Week_Off_Salary, Temp.Holidays_Salary, Temp.Absent_Salary, Temp.Late_Min_Penalty, Temp.Early_Min_Penalty, Temp.Patial_Violation_Penalty, Temp.Employee_PF, Temp.Employee_ESIC, Temp.Year, Temp.Employee_Penalty, Temp.Employee_Claim, Temp.Emlployee_Loan, Temp.Total_Allowance, Temp.Total_Deduction, Temp.Previous_Month_Balance, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT DATENAME(MONTH, DATEADD(MONTH, Temp.Month, 0) - 1)) AS MonthName FROM Set_EmployeeMaster LEFT OUTER JOIN Set_Employee_Parameter ON Set_EmployeeMaster.Emp_Id = Set_Employee_Parameter.Emp_Id LEFT OUTER JOIN Pay_Employe_Month_Temp AS Temp ON Set_EmployeeMaster.Emp_Id = Temp.Emp_Id WHERE Set_EmployeeMaster.Company_Id = @Company_Id AND Set_Employee_Parameter.Company_Id = @Company_Id AND Set_EmployeeMaster.IsActive = 'True' AND Set_Employee_Parameter.Field6 = 'True' AND set_employeemaster.Emp_Type = 'On Role' END IF (@Optype = 21) BEGIN SELECT Set_EmployeeMaster.emp_name, set_employeeMaster.emp_id FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = @Company_Id AND Set_EmployeeMaster.IsActive = 'True' AND set_employeemaster.Emp_Type = 'On Role' END IF (@Optype = 22) BEGIN SELECT Emp_Id, CAST(Emp_Code AS int) AS Emp_Code, Emp_Name, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation FROM Set_EmployeeMaster LEFT JOIN Set_DesignationMaster ON Set_DesignationMaster.Designation_Id = Set_EmployeeMaster.Designation_Id WHERE Company_Id = @Company_Id ORDER BY CAST(emp_code AS int) END IF (@Optype = 23) BEGIN SELECT Location_Id, Set_EmployeeMaster.Emp_Id, Emp_Code, Emp_Name, Set_UserMaster.User_Id FROM Set_EmployeeMaster LEFT JOIN Set_UserMaster ON Set_UserMaster.Emp_Id = Set_EmployeeMaster.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' AND Set_EmployeeMaster.Emp_Type = 'On Role' AND Set_EmployeeMaster.Emp_Id IN (SELECT CAST(Value AS int) AS empid FROM F_Split(@Emp_Id, ',')) ORDER BY Emp_Name ASC END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //added on 14-12-2019

            try
            {
                strsql = "ALTER proc [dbo].[Sp_Set_UserDetail_Select] @Trans_Id int , @Company_Id int, @User_Id nvarchar(11) , @Optype int as begin if(@Optype=1) begin Select * From Set_UserDetail where USER_ID=@User_Id and IsActive='True' and Company_Id=@Company_Id and [user_id]<>'3000' Order By IsDefault Desc end if(@Optype=2) begin Select * From Set_UserDetail where Trans_Id=@Trans_Id end if(@Optype=3) begin Select set_employeemaster.Emp_Name,Set_UserDetail.*,Ems.LastSynchdate From Set_UserDetail left join (select Field1 as Email,max(createddate) as LastSynchdate from ES_MailInboxHeader group by Field1)Ems on Set_UserDetail.Email=ems.Email inner join set_usermaster on Set_UserDetail.user_id =set_usermaster.user_id inner join set_employeemaster on set_usermaster.emp_id =set_employeemaster.emp_id where (case when @User_Id='0' then '0' else Set_UserDetail.User_Id end)=@User_Id and Set_UserDetail.IsActive='True' and Set_UserDetail.Company_Id=@Company_Id Order By set_employeemaster.Emp_Name end end";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }


            try
            {
                strsql = "ALTER proc [dbo].[Sp_Set_UserDetail_Update] @Trans_Id int	, @User_Id Nvarchar(11), @Password nvarchar(max)	, @Email nvarchar(100), @Signature text, @IsDefault bit, @Field1 nvarchar(255), @Field2 nvarchar(255), @Field3 nvarchar(255), @Field4 nvarchar(255), @Field5 nvarchar(255), @Field6 nvarchar(255), @Field7 datetime, @IsActive bit, @CreatedBy	nvarchar(11), @CreatedDate datetime, @ModifiedBy varchar(11), @ModifiedDate datetime, @ReferenceId int output, @Company_Id INT as begin if(@IsDefault='True') begin update Set_UserDetail set IsDefault='False' where User_Id=@User_Id end Update Set_UserDetail set Email =@Email, Password=@Password , Signature=@Signature, IsDefault =@IsDefault, Field1=@Field1, Field2=@Field2	, Field3=@Field3, Field4=@Field4, Field5=@Field5	, Field7=@Field7	, IsActive=@IsActive	, ModifiedBy=@ModifiedBy	, ModifiedDate=@ModifiedDate	, CreatedBy = @CreatedBy, CreatedDate =@CreatedDate where Trans_Id=@Trans_Id set @ReferenceId=@@ROWCOUNT return @ReferenceId end";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }


            //-----Added on 16-12-2019
            try
            {
                cmd.CommandText = "alter table dbo.inv_modelmaster add SnoPrefix varchar(20)";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "alter table dbo.inv_modelmaster add SnoSuffix varchar(20)";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "alter table dbo.inv_modelmaster add SnoStartFrom varchar(20)";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "alter table dbo.inv_productmaster add SnoPrefix varchar(20)";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "alter table dbo.inv_productmaster add SnoSuffix varchar(20)";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "alter table dbo.inv_Productmaster add SnoStartFrom varchar(20)";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER Proc [dbo].[sp_Inv_ModelMaster_SelectRow] @Company_Id int, @Brand_Id int, @Trans_Id int, @IsActive bit, @Optype int, @model_No varchar(50)='' as begin if(@Optype=1) begin select Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate From Inv_ModelMaster end if(@Optype=2) begin select Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate From Inv_ModelMaster where Company_Id=@Company_Id and IsActive=@IsActive end if(@Optype=3) begin select Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.CreatedBy)) as Created_User , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.ModifiedBy)) as Modified_User From Inv_ModelMaster where Company_Id=@Company_Id and Brand_Id=@Brand_Id and IsActive=@IsActive Order by Trans_Id desc end if(@Optype=4) begin select Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate, SnoPrefix, SnoSuffix, SnoStartFrom From Inv_ModelMaster where Company_Id=@Company_Id and Brand_Id=@Brand_Id and Trans_Id=@Trans_Id and IsActive=@IsActive end if(@Optype=5) begin select Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.CreatedBy)) as Created_User , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.ModifiedBy)) as Modified_User From Inv_ModelMaster where Company_Id=@Company_Id and Brand_Id=@Brand_Id and IsActive='True' end if(@Optype=6) begin select Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.CreatedBy)) as Created_User , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.ModifiedBy)) as Modified_User From Inv_ModelMaster where Company_Id=@Company_Id and Brand_Id=@Brand_Id and IsActive=@IsActive and Model_No=@model_No Order by Trans_Id desc end end";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER Proc [dbo].[sp_Inv_ModelMaster_Update] @Company_Id	int, @Brand_Id	int, @Trans_Id int, @Model_No	nvarchar(MAX), @Model_Name	nvarchar(MAX), @Model_Name_L nvarchar(MAX), @Description Nvarchar(max), @Local_Price nvarchar(100), @Islabel bit, @Sales_Price_1 nchar(10), @Sales_Price_2 nchar(10), @Sales_Price_3 nchar(10), @Field1 nvarchar(MAX), @Field2	nvarchar(MAX), @Field3	nvarchar(MAX), @Field4	nvarchar(MAX), @Field5	text, @Field6	text, @Field7	datetime, @IsActive	bit, @ModifiedBy	nvarchar(255), @ModifiedDate datetime, @ReferenceId int Output, @SnoPrefix varchar(20) =null,@SnoSuffix varchar(20) =null,@SnoStartFrom varchar(20) =null as begin Update Inv_ModelMaster Set Model_No=@Model_No	, Model_Name=@Model_Name, Model_Name_L=@Model_Name_L, Description=@Description, Local_Price=@Local_Price, islabel=@Islabel, Sales_price_1=@Sales_Price_1, Sales_price_2=@Sales_Price_2, sales_price_3=@Sales_Price_3, Field1=@Field1, Field2=@Field2, Field3=@Field3, Field4=@Field4, Field5=@Field5, Field6=@Field6, Field7=@Field7, IsActive=@IsActive, ModifiedBy=@ModifiedBy	, ModifiedDate=@ModifiedDate, SnoPrefix=@SnoPrefix, SnoSuffix=@SnoSuffix, SnoStartFrom=@SnoStartFrom where Company_Id=@Company_Id AND Brand_Id=@Brand_Id and Trans_Id=@Trans_Id set @ReferenceId=@@Rowcount return @ReferenceId end";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER Proc [dbo].[sp_Inv_ModelMaster_Insert] @Company_Id	int, @Brand_Id	int, @Model_No nvarchar(50), @Model_Name	nvarchar(MAX), @Model_Name_L	nvarchar(MAX), @Description nvarchar(MAX), @Local_Price nvarchar(100), @IsLabel bit, @Sales_Price_1 nchar(10), @Sales_Price_2 nchar(10), @Sales_Price_3 nchar(10), @Field1	nvarchar(MAX), @Field2 nvarchar(MAX), @Field3	nvarchar(MAX), @Field4	nvarchar(MAX), @Field5	text, @Field6	text, @Field7	datetime, @IsActive	bit, @CreatedBy	nvarchar(255), @CreatedDate	datetime, @ModifiedBy	nvarchar(255), @ModifiedDate datetime, @ReferenceId int Output, @SnoPrefix varchar(20) =null,@SnoSuffix varchar(20) =null,@SnoStartFrom varchar(20) =null as begin Insert into Inv_ModelMaster ( Company_Id, Brand_Id, Model_No	, Model_Name, Model_Name_L, Description, Local_Price, Islabel, sales_Price_1, Sales_price_2, Sales_price_3, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, SnoPrefix,SnoSuffix,SnoStartFrom )values ( @Company_Id, @Brand_Id, @Model_No	, @Model_Name, @Model_Name_L, @Description, @Local_Price, @IsLabel, @Sales_Price_1, @Sales_Price_2, @Sales_Price_3, @Field1, @Field2, @Field3, @Field4, @Field5, @Field6, @Field7, @IsActive, @CreatedBy, @CreatedDate, @ModifiedBy	, @ModifiedDate,@SnoPrefix,@SnoSuffix,@SnoStartFrom ) set @ReferenceId=SCOPE_IDENTITY() return @ReferenceId end";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Inv_ProductMaster_SelectRow] @Company_Id int, @Brand_Id int, @ProductId int, @ProductCode nvarchar(250), @Optype int, @Finance_Year_Id int, @Location_Id int AS BEGIN SET NOCOUNT ON; IF (@Optype = 1) BEGIN SELECT Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, SUBSTRING(PM.EProductName, 0, 10) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.DimDepth, pm.HScode, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.DimLenth, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, pm.IsActive, (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) AS StockQty FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id END IF (@Optype = 2) BEGIN SELECT ROW_NUMBER() OVER (ORDER BY pm.ProductId DESC) AS RowNumber, Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, SUBSTRING(PM.EProductName, 0, 120) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.HScode, pm.DimDepth, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, (SELECT inv_product_Image.Field1 FROM inv_product_Image WHERE inv_product_Image.ProductId = Pm.ProductId) AS PImage, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.DimLenth, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, CASE WHEN (SELECT ParameterValue FROM Inv_ParameterMaster WHERE ParameterName = 'Sales Price' AND Company_Id = @Company_Id AND BrandId = @Brand_Id AND Location_Id = @Location_Id) = 1 THEN Pm.SalesPrice1 WHEN (SELECT ParameterValue FROM Inv_ParameterMaster WHERE ParameterName = 'Sales Price' AND Company_Id = @Company_Id AND BrandId = @Brand_Id AND Location_Id = @Location_Id) = 2 THEN Pm.SalesPrice2 WHEN (SELECT ParameterValue FROM Inv_ParameterMaster WHERE ParameterName = 'Sales Price' AND Company_Id = @Company_Id AND BrandId = @Brand_Id AND Location_Id = @Location_Id) = 3 THEN Pm.SalesPrice3 ELSE '0' END AS ProductSalesPrice, CASE WHEN PM.ItemType = 'S' THEN 'Stockable' WHEN PM.ItemType = 'NS' THEN 'Non Stockable' WHEN PM.ItemType = 'A' THEN 'Assemble' WHEN PM.ItemType = 'K' THEN 'Kit' END AS ItemTypeValue, CASE WHEN (SELECT Set_UserMaster.Emp_Id FROM Set_UserMaster WHERE Set_UserMaster.User_Id = Pm.CreatedBy) = 0 THEN 'Superadmin' ELSE SUBSTRING((SELECT set_employeemaster.Emp_Name FROM set_employeemaster WHERE set_employeemaster.emp_id = (SELECT Set_UserMaster.Emp_Id FROM Set_UserMaster WHERE Set_UserMaster.User_Id = Pm.CreatedBy)), 0, 17) END AS CreatedEmpName, CASE WHEN (SELECT Set_UserMaster.Emp_Id FROM Set_UserMaster WHERE Set_UserMaster.User_Id = Pm.modifiedBy) = 0 THEN 'Superadmin' ELSE SUBSTRING((SELECT set_employeemaster.Emp_Name FROM set_employeemaster WHERE set_employeemaster.emp_id = (SELECT Set_UserMaster.Emp_Id FROM Set_UserMaster WHERE Set_UserMaster.User_Id = pm.modifiedBy)), 0, 17) END AS ModifiedEmpName, CASE WHEN (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND Inv_StockDetail.Finance_Year_Id = @Finance_Year_Id) IS NULL THEN 0 ELSE CAST((SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND Inv_StockDetail.Finance_Year_Id = @Finance_Year_Id) AS numeric(18, 3)) END AS StockQty, (SELECT Inv_UnitMaster.Unit_Name FROM Inv_UnitMaster WHERE Inv_UnitMaster.Unit_Id = Pm.UnitId) AS UnitName, (SELECT Inv_ModelMaster.Model_No FROM Inv_ModelMaster WHERE Inv_ModelMaster.Trans_Id = Pm.ModelNo) AS ModelNo FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id AND Inv_Product_CompanyBrand.BrandId = @Brand_Id AND pm.IsActive = 'True' ORDER BY pm.ProductId DESC END IF (@Optype = 3) BEGIN SELECT Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, SUBSTRING(PM.EProductName, 0, 10) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.HScode, pm.DimDepth, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.WeighUnitID, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.DimLenth, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, pm.developercommission, pm.projectid, Prj_Project_Master.Project_Name, CASE WHEN (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) IS NULL THEN 0 ELSE (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) END AS StockQty, SnoPrefix,SnoSuffix,SnoStartFrom FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId LEFT JOIN Prj_Project_Master ON Prj_Project_Master.Project_Id = pm.projectId WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id AND Inv_Product_CompanyBrand.BrandId = @Brand_Id AND pm.ProductId = @ProductId ORDER BY ProductId DESC END IF (@Optype = 4) BEGIN SELECT Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, (SUBSTRING(PM.EProductName, 0, 10)) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.HScode, pm.DimDepth, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.DimLenth, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, Pm.IsActive, CASE WHEN (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) IS NULL THEN 0 ELSE (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) END AS StockQty FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id AND Inv_Product_CompanyBrand.BrandId = @Brand_Id AND ProductCode = @ProductCode ORDER BY ProductId DESC END IF (@Optype = 5) BEGIN SELECT ROW_NUMBER() OVER (ORDER BY pm.ProductId DESC) AS RowNumber, Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, (SUBSTRING(PM.EProductName, 0, 10)) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.HScode, pm.DimDepth, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.DimLenth, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, CASE WHEN PM.ItemType = 'S' THEN 'Stockable' WHEN PM.ItemType = 'NS' THEN 'Non Stockable' WHEN PM.ItemType = 'A' THEN 'Assemble' WHEN PM.ItemType = 'K' THEN 'Kit' END AS ItemTypeValue, (SELECT Inv_UnitMaster.Unit_Name FROM Inv_UnitMaster WHERE Inv_UnitMaster.Unit_Id = Pm.UnitId) AS UnitName, CASE WHEN (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) IS NULL THEN 0 ELSE (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) END AS StockQty, (SELECT Set_EmployeeMaster.Emp_Name FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = pm.Company_Id AND Set_EmployeeMaster.Emp_Code = pm.CreatedBy) AS CreatedEmpName, (SELECT Set_EmployeeMaster.Emp_Name FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = pm.Company_Id AND Set_EmployeeMaster.Emp_Code = pm.ModifiedBy) AS ModifiedEmpName FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id AND Inv_Product_CompanyBrand.BrandId = @Brand_Id AND pm.IsActive = 'False' ORDER BY ProductId DESC END IF (@Optype = 6) BEGIN SELECT ProductId, ProductCode, EProductName, (SUBSTRING(EProductName, 0, 10)) AS ShortProductName, (SELECT Inv_UnitMaster.Unit_Name FROM Inv_UnitMaster WHERE Inv_UnitMaster.Unit_Id = inv_productmaster.UnitId) AS UnitName, IsActive, CASE WHEN (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = inv_productmaster.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) IS NULL THEN 0 ELSE (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = inv_productmaster.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) END AS StockQty FROM inv_productmaster ORDER BY EProductName ASC END IF (@Optype = 7) BEGIN SELECT Inv_StockDetail.ProductId, inv_productmaster.ProductCode, (SUBSTRING(inv_productmaster.EProductName, 0, 10)) AS ShortProductName, inv_productmaster.EProductName, Inv_UnitMaster.Unit_Name, Inv_StockDetail.Field1 AS UnitCost, Inv_StockDetail.Field2 AS AverageCost, Inv_StockDetail.Quantity AS SystemQuantity, 0 AS PhysicalQuantity FROM Inv_StockDetail INNER JOIN inv_productmaster ON Inv_StockDetail.ProductId = inv_productmaster.ProductId INNER JOIN Inv_UnitMaster ON inv_productmaster.UnitId = Inv_UnitMaster.Unit_Id WHERE Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.Brand_Id = @Brand_Id AND Inv_StockDetail.Location_Id = @Location_Id AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id ORDER BY inv_productmaster.ProductId ASC END IF (@Optype = 8) BEGIN SELECT Inv_StockDetail.ProductId, Inv_Product_CategoryMaster.Category_Name, inv_productmaster.ProductCode, inv_productmaster.EProductName, Inv_UnitMaster.Unit_Name, Inv_StockDetail.Field1 AS UnitCost, Inv_StockDetail.Field2 AS AverageCost, Inv_StockDetail.Quantity AS SystemQuantity, 0 AS PhysicalQuantity FROM Inv_StockDetail INNER JOIN inv_productmaster ON Inv_StockDetail.ProductId = inv_productmaster.ProductId INNER JOIN Inv_UnitMaster ON inv_productmaster.UnitId = Inv_UnitMaster.Unit_Id INNER JOIN Inv_Product_Category ON inv_productmaster.ProductId = Inv_Product_Category.ProductId INNER JOIN Inv_Product_CategoryMaster ON Inv_Product_CategoryMaster.Category_Id = Inv_Product_Category.CategoryId WHERE Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.Brand_Id = @Brand_Id AND Inv_StockDetail.Location_Id = @Location_Id AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id ORDER BY inv_productmaster.ProductId ASC END IF (@Optype = 9) BEGIN SELECT Inv_StockDetail.ProductId, Inv_ProductBrandMaster.Brand_Name, inv_productmaster.ProductCode, inv_productmaster.EProductName, Inv_UnitMaster.Unit_Name, Inv_StockDetail.Field1 AS UnitCost, Inv_StockDetail.Field2 AS AverageCost, Inv_StockDetail.Quantity AS SystemQuantity, 0 AS PhysicalQuantity FROM Inv_StockDetail INNER JOIN inv_productmaster ON Inv_StockDetail.ProductId = inv_productmaster.ProductId INNER JOIN Inv_UnitMaster ON inv_productmaster.UnitId = Inv_UnitMaster.Unit_Id INNER JOIN Inv_Product_Brand ON inv_productmaster.ProductId = Inv_Product_Brand.ProductId INNER JOIN Inv_ProductBrandMaster ON Inv_ProductBrandMaster.Brand_Id = Inv_Product_Brand.PBrandId WHERE Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.Brand_Id = @Brand_Id AND Inv_StockDetail.Location_Id = @Location_Id AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id ORDER BY inv_productmaster.ProductId ASC END IF (@Optype = 10) BEGIN SELECT Inv_StockDetail.ProductId, Inv_RackMaster.Rack_Name, inv_productmaster.ProductCode, inv_productmaster.EProductName, Inv_UnitMaster.Unit_Name, Inv_StockDetail.Field1 AS UnitCost, Inv_StockDetail.Field2 AS AverageCost, Inv_StockDetail.Quantity AS SystemQuantity, 0 AS PhysicalQuantity FROM Inv_StockDetail INNER JOIN inv_productmaster ON Inv_StockDetail.ProductId = inv_productmaster.ProductId INNER JOIN Inv_UnitMaster ON inv_productmaster.UnitId = Inv_UnitMaster.Unit_Id INNER JOIN Inv_RackDetail ON inv_productmaster.ProductId = Inv_RackDetail.Product_Id INNER JOIN Inv_RackMaster ON Inv_RackMaster.Rack_ID = Inv_RackDetail.Rack_Id WHERE Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.Brand_Id = @Brand_Id AND Inv_StockDetail.Location_Id = @Location_Id AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id ORDER BY inv_productmaster.ProductId ASC END IF (@Optype = 11) BEGIN SELECT Company_Id, Brand_Id, ProductCode FROM Inv_ProductMaster WHERE ProductId = @ProductId END IF (@optype = 12) BEGIN SELECT ROW_NUMBER() OVER (ORDER BY pm.ProductId DESC) AS RowNumber, Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, (SUBSTRING(Pm.EProductName, 0, 10)) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.HScode, pm.DimDepth, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.DimLenth, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, CASE WHEN (SELECT ParameterValue FROM Inv_ParameterMaster WHERE ParameterName = 'Sales Price' AND Company_Id = @Company_Id AND BrandId = @Brand_Id AND Location_Id = @Location_Id) = 1 THEN Pm.SalesPrice1 WHEN (SELECT ParameterValue FROM Inv_ParameterMaster WHERE ParameterName = 'Sales Price' AND Company_Id = @Company_Id AND BrandId = @Brand_Id AND Location_Id = @Location_Id) = 2 THEN Pm.SalesPrice2 WHEN (SELECT ParameterValue FROM Inv_ParameterMaster WHERE ParameterName = 'Sales Price' AND Company_Id = @Company_Id AND BrandId = @Brand_Id AND Location_Id = @Location_Id) = 3 THEN Pm.SalesPrice3 ELSE '0' END AS ProductSalesPrice, CASE WHEN PM.ItemType = 'S' THEN 'Stockable' WHEN PM.ItemType = 'NS' THEN 'Non Stockable' WHEN PM.ItemType = 'A' THEN 'Assemble' WHEN PM.ItemType = 'K' THEN 'Kit' END AS ItemTypeValue, (SELECT Inv_UnitMaster.Unit_Name FROM Inv_UnitMaster WHERE Inv_UnitMaster.Unit_Id = Pm.UnitId) AS UnitName, CASE WHEN (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = Pm.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) IS NULL THEN 0 ELSE (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = Pm.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) END AS StockQty FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id AND Inv_Product_CompanyBrand.BrandId = @Brand_Id AND pm.IsActive = 'True' AND pm.Field1 = ' ' AND Pm.Field3 = 'True' END IF (@optype = 13) BEGIN SELECT Inv_ProductMaster.EProductName, Inv_ProductMaster.ProductId FROM Inv_ProductMaster WHERE ProductId IN (SELECT ProductId FROM Inv_Product_Category WHERE CategoryId = @ProductId) AND Inv_ProductMaster.Company_Id = @Company_Id AND Inv_ProductMaster.Brand_Id = @Brand_Id AND Inv_ProductMaster.IsActive = 'True' AND Inv_ProductMaster.Field1 = '' END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Inv_ProductMaster_Update] @Company_Id int, @Brand_Id int, @ProductId int, @ProductCode nvarchar(250), @PartNo nvarchar(50), @ModelNo nvarchar(80), @ModelName nvarchar(max), @EProductName nvarchar(max), @LProductName nvarchar(max), @CountryID int, @UnitId int, @ItemType nvarchar(2), @HScode nvarchar(50), @HasBatchNo bit, @TypeOfBatchNo nvarchar(max), @HasSerialNo bit, @ReorderQty nvarchar(50), @CostPrice nvarchar(50), @Description text, @SalesPrice1 nvarchar(max), @SalesPrice2 nvarchar(max), @SalesPrice3 nvarchar(max), @ProductColor nvarchar(50), @WSalePrice nvarchar(max), @ReservedQty nvarchar(50), @DamageQty nvarchar(50), @ExpiredQty nvarchar(50), @MaximumQty nvarchar(50), @MinimumQty nvarchar(50), @Profit numeric(18, 3), @Discount nvarchar(50), @MaintainStock nvarchar(max), @URL nvarchar(max), @VMWeight nvarchar(11), @WeighUnitID nvarchar(3), @DimLenth numeric(18, 3), @DimHieght numeric(18, 3), @DimDepth numeric(18, 3), @AlternateId1 nvarchar(25), @AlternateId2 nvarchar(25), @AlternateId3 nvarchar(25), @Field1 nvarchar(max), @Field2 nvarchar(max), @Field3 nvarchar(max), @Field4 nvarchar(max), @Field5 nvarchar(max), @Field6 bit, @Field7 datetime, @IsActive bit, @ModifiedBy nvarchar(11), @ModfiedDate datetime, @developerCommission decimal(18, 3), @projectId int, @ReferenceID int OUTPUT, @currency_id int, @SnoPrefix varchar(20) =null,@SnoSuffix varchar(20) =null,@SnoStartFrom varchar(20) =null AS BEGIN UPDATE Inv_ProductMaster SET [ProductCode] = @ProductCode, [PartNo] = @PartNo, [ModelNo] = @ModelNo, [ModelName] = @ModelName, [EProductName] = dbo.CleanAndTrimString(@EProductName), [LProductName] = @LProductName, [CountryID] = @CountryID, [UnitId] = @UnitId, [ItemType] = @ItemType, [HScode] = @HScode, [HasBatchNo] = @HasBatchNo, [TypeOfBatchNo] = @TypeOfBatchNo, [HasSerialNo] = @HasSerialNo, [ReorderQty] = @ReorderQty, [CostPrice] = @CostPrice, [Description] = @Description, [SalesPrice1] = @SalesPrice1, [SalesPrice2] = @SalesPrice2, [SalesPrice3] = @SalesPrice3, [ProductColor] = @ProductColor, [WSalePrice] = @WSalePrice, [ReservedQty] = @ReservedQty, [DamageQty] = @DamageQty, [ExpiredQty] = @ExpiredQty, [MaximumQty] = @MaximumQty, [MinimumQty] = @MinimumQty, [Profit] = @Profit, [Discount] = @Discount, [MaintainStock] = @MaintainStock, [URL] = @URL, [ActualWeight] = @VMWeight, [WeighUnitID] = @WeighUnitID, [DimLenth] = @DimLenth, [DimHieght] = @DimHieght, [DimDepth] = @DimDepth, AlternateId1 = @AlternateId1, AlternateId2 = @AlternateId2, AlternateId3 = @AlternateId3, [Field1] = @Field1, [Field2] = @Field2, [Field4] = @Field4, [Field5] = @Field5, [Field6] = @Field6, [Field7] = @Field7, [IsActive] = @IsActive, [ModifiedBy] = @ModifiedBy, [ModfiedDate] = @ModfiedDate, [developerCommission] = @developerCommission, [projectId] = @projectId, currency_id = @currency_id, SnoPrefix=@SnoPrefix, SnoSuffix=@SnoSuffix, SnoStartFrom=@SnoStartFrom WHERE [Company_Id] = @Company_Id AND [ProductId] = @ProductId SELECT @ReferenceID = @@ROWCOUNT RETURN @ReferenceID END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Inv_ProductMaster_Insert] @Company_Id int, @Brand_Id int, @ProductCode nvarchar(250) = NULL, @PartNo nvarchar(50) = NULL, @ModelNo nvarchar(80) = NULL, @ModelName nvarchar(max), @EProductName nvarchar(max) = NULL, @LProductName nvarchar(max) = NULL, @CountryID int = NULL, @UnitId int = NULL, @ItemType nvarchar(2) = NULL, @HScode nvarchar(50) = NULL, @HasBatchNo bit = NULL, @TypeOfBatchNo nvarchar(max) = NULL, @HasSerialNo bit = NULL, @ReorderQty nvarchar(50) = NULL, @CostPrice nvarchar(50) = NULL, @Description text = NULL, @SalesPrice1 nvarchar(max) = NULL, @SalesPrice2 nvarchar(max) = NULL, @SalesPrice3 nvarchar(max) = NULL, @ProductColor nvarchar(50) = NULL, @WSalePrice nvarchar(max) = NULL, @ReservedQty nvarchar(50) = NULL, @DamageQty nvarchar(50) = NULL, @ExpiredQty nvarchar(50) = NULL, @MaximumQty nvarchar(50) = NULL, @MinimumQty nvarchar(50) = NULL, @Profit numeric(18, 3) = NULL, @Discount nvarchar(50) = NULL, @MaintainStock nvarchar(max) = NULL, @URL nvarchar(max) = NULL, @VMWeight nvarchar(11) = NULL, @WeighUnitID nvarchar(3) = NULL, @DimLenth numeric(18, 3) = NULL, @DimHieght numeric(18, 3) = NULL, @DimDepth numeric(18, 3) = NULL, @AlternateId1 nvarchar(25), @AlternateId2 nvarchar(25), @AlternateId3 nvarchar(25), @Field1 nvarchar(max) = NULL, @Field2 nvarchar(max) = NULL, @Field3 nvarchar(max) = NULL, @Field4 nvarchar(max) = NULL, @Field5 nvarchar(max) = NULL, @Field6 bit = NULL, @Field7 datetime = NULL, @IsActive bit = NULL, @CreatedBy nvarchar(11) = NULL, @CreatedDate datetime = NULL, @ModifiedBy nvarchar(11) = NULL, @ModfiedDate datetime = NULL, @developerCommission decimal(18, 3), @projectId int, @ReferenceID int OUTPUT, @currency_id int = 0, @SnoPrefix varchar(20) =null,@SnoSuffix varchar(20) =null,@SnoStartFrom varchar(20) =null AS BEGIN INSERT INTO Inv_ProductMaster ([Company_Id], [Brand_Id], [ProductCode], [PartNo], [ModelNo], [ModelName], [EProductName], [LProductName], [CountryID], [UnitId], [ItemType], [HScode], [HasBatchNo], [TypeOfBatchNo], [HasSerialNo], [ReorderQty], [CostPrice], [Description], [SalesPrice1], [SalesPrice2], [SalesPrice3], [ProductColor], [WSalePrice], [ReservedQty], [DamageQty], [ExpiredQty], [MaximumQty], [MinimumQty], [Profit], [Discount], [MaintainStock], [URL], [ActualWeight], [WeighUnitID], [DimLenth], [DimHieght], [DimDepth], [AlternateId1], [AlternateId2], [AlternateId3], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModfiedDate], developerCommission, projectId, currency_id, SnoPrefix,SnoSuffix,SnoStartFrom) VALUES (@Company_Id, @Brand_Id, @ProductCode, @PartNo, @ModelNo, @ModelName, dbo.CleanAndTrimString(@EProductName), @LProductName, @CountryID, @UnitId, @ItemType, @HScode, @HasBatchNo, @TypeOfBatchNo, @HasSerialNo, @ReorderQty, @CostPrice, @Description, @SalesPrice1, @SalesPrice2, @SalesPrice3, @ProductColor, @WSalePrice, @ReservedQty, @DamageQty, @ExpiredQty, @MaximumQty, @MinimumQty, @Profit, @Discount, @MaintainStock, @URL, @VMWeight, @WeighUnitID, @DimLenth, @DimHieght, @DimDepth, @AlternateId1, @AlternateId2, @AlternateId3, @Field1, @Field2, @Field3, @Field4, @Field5, @Field6, @Field7, @IsActive, @CreatedBy, @CreatedDate, @ModifiedBy, @ModfiedDate, @developerCommission, @projectId, @currency_id,@SnoPrefix,@SnoSuffix,@SnoStartFrom ) SELECT @ReferenceID = SCOPE_IDENTITY() RETURN @ReferenceID END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //-----

            //added 07-Jan-2020
            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Set_EmployeeMaster_SelectRow] @Company_Id int, @Emp_Id nvarchar(max), @Emp_Name nvarchar(max), @Optype int AS BEGIN IF (@Optype = 1) BEGIN SELECT Set_EmployeeMaster.*, (SELECT Account_No FROM Set_Bank_Info WHERE Ref_Id = Set_EmployeeMaster.Emp_Id AND Ref_Type = 'Employee') AS Account_No, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id END ELSE IF (@Optype = 2) BEGIN SELECT Set_EmployeeMaster.Company_Id, (Set_EmployeeMaster.Emp_Name + '/' + Set_EmployeeMaster.Emp_Code) AS TlName, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Set_EmployeeMaster.Designation_Id, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, CONVERT(date, Set_EmployeeMaster.DOJ) AS DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, Set_EmployeeMaster.IsActive, MONTH(Set_EmployeeMaster.DOJ) AS JoiningMonth, YEAR(Set_EmployeeMaster.DOJ) AS JoiningYear, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_LocationMaster.location_Name AS Location, Set_ReligionMaster.Religion, Att_DeviceGroupMaster.Group_Name AS DeviceGroup, set_qualificationmaster.Qualification, set_nationalitymaster.Nationality, 'New Hire/Update' AS Action_Type, REPLACE(CONVERT(varchar(11), GETDATE(), 106), ' ', '-') AS Effectivedate, '' AS UserRole, Set_UserMaster.User_Id FROM Set_EmployeeMaster LEFT JOIN Set_LocationMaster ON Set_EmployeeMaster.Location_Id = Set_LocationMaster.Location_id LEFT JOIN Set_ReligionMaster ON Set_EmployeeMaster.Religion_Id = Set_ReligionMaster.Religion_Id LEFT JOIN Att_DeviceGroupMaster ON Set_EmployeeMaster.Device_Group_Id = Att_DeviceGroupMaster.Group_Id LEFT JOIN set_qualificationmaster ON Set_EmployeeMaster.Qualification_Id = set_qualificationmaster.Qualification_Id LEFT JOIN set_nationalitymaster ON Set_EmployeeMaster.nationality_Id = set_nationalitymaster.nationality_Id LEFT JOIN Set_UserMaster ON Set_UserMaster.Emp_Id = Set_EmployeeMaster.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' ORDER BY CAST(Set_EmployeeMaster.Emp_Code AS int) END ELSE IF (@Optype = 3) BEGIN SELECT Set_EmployeeMaster.*, Set_DepartmentMaster.dep_name AS DepartmentName, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, Set_LocationMaster.location_Name AS Location, Set_ReligionMaster.Religion, Att_DeviceGroupMaster.Group_Name AS DeviceGroup, set_qualificationmaster.Qualification, set_nationalitymaster.Nationality, 'Reverse Termination' AS Action_Type, REPLACE(CONVERT(varchar(11), GETDATE(), 106), ' ', '-') AS Effectivedate, '' AS UserRole FROM Set_EmployeeMaster LEFT JOIN Set_DepartmentMaster ON Set_EmployeeMaster.Department_Id = Set_DepartmentMaster.Dep_Id LEFT JOIN Set_LocationMaster ON Set_EmployeeMaster.Location_Id = Set_LocationMaster.Location_id LEFT JOIN Set_ReligionMaster ON Set_EmployeeMaster.Religion_Id = Set_ReligionMaster.Religion_Id LEFT JOIN Att_DeviceGroupMaster ON Set_EmployeeMaster.Device_Group_Id = Att_DeviceGroupMaster.Group_Id LEFT JOIN set_qualificationmaster ON Set_EmployeeMaster.Qualification_Id = set_qualificationmaster.Qualification_Id LEFT JOIN set_nationalitymaster ON Set_EmployeeMaster.nationality_Id = set_nationalitymaster.nationality_Id WHERE Set_EmployeeMaster.[Company_Id] = @Company_Id AND Set_EmployeeMaster.IsActive = 'False' END ELSE IF (@Optype = 4) BEGIN SELECT Set_EmployeeMaster.Grade, Set_EmployeeMaster.Company_Id, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id, CAST(Set_EmployeeMaster.Emp_Code AS int) AS Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, Set_EmployeeMaster.Designation_Id, Set_DesignationMaster.Designation, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, Set_EmployeeMaster.DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_EmployeeMaster.Company_phone_no, Set_EmployeeMaster.Pan, Set_EmployeeMaster.FatherName, Set_EmployeeMaster.IsMarried, ISNULL(Att_DeviceGroupMaster.Group_Id, 0) AS Device_Group_Id, DLNo, (SELECT Set_DepartmentMaster.Dep_Name FROM Set_DepartmentMaster WHERE Set_DepartmentMaster.Dep_Id = Set_EmployeeMaster.Department_Id) AS Department_Name, (SELECT Account_No FROM Set_Bank_Info WHERE Set_Bank_Info.Ref_Id = Set_EmployeeMaster.Emp_Id) AS Account_No FROM Set_EmployeeMaster LEFT JOIN Set_DesignationMaster ON Set_DesignationMaster.Designation_Id = Set_EmployeeMaster.Designation_Id LEFT JOIN Att_DeviceGroupMaster ON Set_EmployeeMaster.Device_Group_Id = Att_DeviceGroupMaster.Group_Id AND Att_DeviceGroupMaster.IsActive = 'True' WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.Emp_Id = @Emp_Id) END ELSE IF (@Optype = 5) BEGIN SELECT * FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id AND IsActive = 'True' AND Emp_Name = @Emp_Name AND Field2 = 'False' END ELSE IF (@Optype = 6) BEGIN SELECT Set_EmployeeMaster.*, (SELECT Account_No FROM Set_Bank_Info WHERE Ref_Id = Emp_Id AND Ref_Type = 'Employee') AS Account_No FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id AND CAST(Emp_Code AS int) = CAST(@Emp_Id AS int) END ELSE IF (@Optype = 7) BEGIN SELECT Set_EmployeeMaster.Company_Id, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id AS Expr1, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, Set_EmployeeMaster.Designation_Id, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, Set_EmployeeMaster.DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_EmployeeInformation.* FROM Set_EmployeeMaster LEFT OUTER JOIN Set_EmployeeInformation ON Set_EmployeeMaster.Emp_Id = Set_EmployeeInformation.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND Field2 = 'False' AND IsActive = 'True' END ELSE IF (@Optype = 8) BEGIN SELECT Set_EmployeeMaster.Company_Id AS Expr1, Set_EmployeeMaster.Brand_Id, Set_EmployeeMaster.Location_Id, Set_EmployeeMaster.Emp_Id AS Expr2, Set_EmployeeMaster.Emp_Code, Set_EmployeeMaster.Civil_Id, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Name_L, Set_EmployeeMaster.Emp_Image, Set_EmployeeMaster.Department_Id, Set_EmployeeMaster.Emp_Id, (SELECT Designation FROM Set_DesignationMaster WHERE (Designation_Id = Set_EmployeeMaster.Designation_Id)) AS Designation, Set_EmployeeMaster.Designation_Id, Set_EmployeeMaster.Religion_Id, Set_EmployeeMaster.Nationality_Id, Set_EmployeeMaster.Qualification_Id, Set_EmployeeMaster.DOB, Set_EmployeeMaster.DOJ, Set_EmployeeMaster.Emp_Type, Set_EmployeeMaster.Termination_Date, Set_EmployeeMaster.Gender, Set_EmployeeMaster.Email_Id, Set_EmployeeMaster.Phone_No, Set_EmployeeMaster.Field1 AS Expr3, Set_EmployeeMaster.Field2 AS Expr4, Set_EmployeeMaster.Field3 AS Expr5, Set_EmployeeMaster.Field4 AS Expr6, Set_EmployeeMaster.Field5 AS Expr7, Set_EmployeeMaster.Field6 AS Expr8, Set_EmployeeMaster.Field7 AS Expr9, Set_EmployeeMaster.IsActive AS Expr10, Set_EmployeeMaster.CreatedBy AS Expr11, Set_EmployeeMaster.CreatedDate AS Expr12, Set_EmployeeMaster.ModifiedBy AS Expr13, Set_EmployeeMaster.ModifiedDate AS Expr14, Ser_ReportMaster.Trans_Id, Ser_ReportMaster.Emp_Id AS Expr15, Ser_ReportMaster.Schedule_Days, Ser_ReportMaster.Last_Schedule_Date, Ser_ReportMaster.Field1, Ser_ReportMaster.Field2, Ser_ReportMaster.Field3, Ser_ReportMaster.Field4, Ser_ReportMaster.Field5, Ser_ReportMaster.Field6, Ser_ReportMaster.Field7, Ser_ReportMaster.IsActive, Ser_ReportMaster.CreatedBy, Ser_ReportMaster.CreatedDate, Ser_ReportMaster.ModifiedBy, Ser_ReportMaster.ModifiedDate FROM Set_EmployeeMaster LEFT OUTER JOIN Ser_ReportMaster ON Set_EmployeeMaster.Emp_Id = Ser_ReportMaster.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 9) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE (Designation_Id = Set_EmployeeMaster.Designation_Id)) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE (Dep_Id = Set_EmployeeMaster.Department_Id)) AS Department, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate FROM Set_EmployeeMaster WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 10) BEGIN SELECT DISTINCT Emp_Name, Brand_Id, Location_Id, Emp_Id FROM Set_EmployeeMaster WHERE [Company_Id] = @Company_Id AND IsActive = 'True' AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 11) BEGIN SELECT Emp_Name, Brand_Id, Location_Id FROM Set_EmployeeMaster WHERE Brand_Id = @Company_Id AND IsActive = 'True' AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 12) BEGIN SELECT Emp_Name, Brand_Id, Location_Id FROM Set_EmployeeMaster WHERE Location_Id = @Company_Id AND IsActive = 'True' AND Set_EmployeeMaster.Field2 = 'False' END ELSE IF (@Optype = 13) BEGIN SELECT Set_EmployeeMaster.[Company_Id], Set_EmployeeMaster.[Brand_Id], Set_EmployeeMaster.[Location_Id], Set_EmployeeMaster.[Emp_Id], CAST(Set_EmployeeMaster.[Emp_Code] AS int) AS Emp_Code, Set_EmployeeMaster.[Civil_Id], Set_EmployeeMaster.[Emp_Name], Set_EmployeeMaster.[Emp_Name_L], Set_EmployeeMaster.[Emp_Image], Set_EmployeeMaster.[Department_Id], Set_EmployeeMaster.[Designation_Id], Set_EmployeeMaster.[Religion_Id], Set_EmployeeMaster.[Nationality_Id], Set_EmployeeMaster.[Qualification_Id], Set_EmployeeMaster.[DOB], Set_EmployeeMaster.[DOJ], Set_EmployeeMaster.[Emp_Type], Set_EmployeeMaster.[Termination_Date], Set_EmployeeMaster.[Gender], [Email_Id], Set_EmployeeMaster.[Phone_No], Set_EmployeeMaster.[Field1], Set_EmployeeMaster.[Field2], Set_EmployeeMaster.[Field3], Set_EmployeeMaster.[Field4], Set_EmployeeMaster.[Field5], Set_EmployeeMaster.[Field6], Set_EmployeeMaster.[Field7], Set_EmployeeMaster.[IsActive], Set_EmployeeMaster.[CreatedBy], Set_EmployeeMaster.[CreatedDate], Set_EmployeeMaster.[ModifiedBy], Set_EmployeeMaster.[ModifiedDate], Set_EmployeeMaster.[company_phone_no], Set_EmployeeMaster.[Pan], Set_EmployeeMaster.[FatherName], Set_EmployeeMaster.[IsMarried], Set_EmployeeMaster.[DLNo], Temp.Emp_Id AS Payroll_Emp_Id, Temp.Worked_Min_Salary, Temp.Normal_OT_Min_Salary, Temp.Week_Off_OT_Min_Salary, Temp.Holiday_OT_Min_Salary, Temp.Leave_Days_Salary, Temp.Week_Off_Salary, Temp.Holidays_Salary, Temp.Absent_Salary, Temp.Late_Min_Penalty, Temp.Early_Min_Penalty, Temp.Patial_Violation_Penalty, Temp.Employee_PF, Temp.Employee_ESIC, Temp.Year, Temp.Employee_Penalty, Temp.Employee_Claim, Temp.Emlployee_Loan, Temp.Total_Allowance, Temp.Total_Deduction, Temp.Previous_Month_Balance, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT DATENAME(MONTH, DATEADD(MONTH, Temp.Month, 0) - 1)) AS MonthName FROM Set_EmployeeMaster LEFT OUTER JOIN Set_Employee_Parameter ON Set_EmployeeMaster.Emp_Id = Set_Employee_Parameter.Emp_Id LEFT OUTER JOIN Pay_Employe_Month_Temp AS Temp ON Set_EmployeeMaster.Emp_Id = Temp.Emp_Id WHERE Set_EmployeeMaster.Company_Id = @Company_Id AND Set_Employee_Parameter.Company_Id = @Company_Id AND Set_EmployeeMaster.IsActive = 'True' AND Set_Employee_Parameter.Field6 = 'True' AND set_employeemaster.Emp_Type = 'On Role' AND Set_EmployeeMaster.Field2 = 'False' ORDER BY CAST(set_employeemaster.emp_code AS int) END ELSE IF (@Optype = 14) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, (SELECT Account_No FROM Set_Bank_Info WHERE Set_Bank_Info.Ref_Id = Set_EmployeeMaster.Emp_Id) AS Account_No FROM Set_EmployeeMaster WHERE (Emp_Id = @Emp_Id) AND (IsActive = 'True') AND Field2 = 'False' END ELSE IF (@Optype = 15) BEGIN SELECT Set_EmployeeMaster.Company_Id, Brand_Id, Location_Id, Set_EmployeeMaster.Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, Set_DesignationMaster.Designation AS Designation, Set_DepartmentMaster.Dep_Name AS Department, Set_Employee_Parameter.Basic_Salary AS BasicSalary, Set_EmployeeMaster.Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Set_EmployeeMaster.Field1, Set_EmployeeMaster.Field2, Set_EmployeeMaster.Field3, Set_EmployeeMaster.Field4, Set_EmployeeMaster.Field5, Set_EmployeeMaster.Field6, Set_EmployeeMaster.Field7, Set_EmployeeMaster.IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, Set_EmployeeMaster.CreatedBy, Set_EmployeeMaster.CreatedDate, Set_EmployeeMaster.ModifiedBy, Set_EmployeeMaster.ModifiedDate, Set_UserMaster.User_Id, (ISNULL(Emp_Name, '') + '/(' + ISNULL((SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id), '') + ')/' + ISNULL(Emp_Code, '')) AS EmpDetailInfo FROM Set_EmployeeMaster LEFT JOIN Set_DesignationMaster ON Set_DesignationMaster.Designation_Id = Set_EmployeeMaster.Designation_Id LEFT JOIN Set_DepartmentMaster ON Set_DepartmentMaster.Dep_Id = Set_EmployeeMaster.Department_Id LEFT JOIN (SELECT TOP 1 Set_Employee_Parameter.Basic_Salary, Set_Employee_Parameter.emp_id FROM Set_Employee_Parameter) Set_Employee_Parameter ON Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id LEFT JOIN Set_UserMaster ON Set_UserMaster.Emp_Id = Set_EmployeeMaster.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' AND Set_EmployeeMaster.Emp_Type = 'On Role' ORDER BY CAST(emp_code AS int) END ELSE IF (@Optype = 16) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate FROM Set_EmployeeMaster WHERE (Company_Id = @Company_Id) ORDER BY CAST(Emp_Code AS int) END ELSE IF (@Optype = 17) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate FROM Set_EmployeeMaster WHERE (Company_Id = @Company_Id) AND Field2 = 'True' ORDER BY CAST(Emp_Code AS int) END ELSE IF (@Optype = 18) BEGIN SELECT Set_EmployeeMaster.*, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, Set_DepartmentMaster.Dep_Name AS Department FROM Set_EmployeeMaster LEFT JOIN Set_DepartmentMaster ON Set_EmployeeMaster.Department_Id = Set_DepartmentMaster.Dep_Id WHERE Set_EmployeeMaster.[Company_Id] = @Company_Id AND Set_EmployeeMaster.Field2 = 'True' END ELSE IF (@Optype = 19) BEGIN SELECT Company_Id, Brand_Id, Location_Id, Emp_Id, CAST(Emp_Code AS int) AS Emp_Code, Civil_Id, Emp_Name, Emp_Name_L, Emp_Image, Department_Id, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT TOP 1 Basic_Salary FROM Set_Employee_Parameter WHERE Set_Employee_Parameter.emp_id = Set_EmployeeMaster.Emp_Id) AS BasicSalary, Designation_Id, Religion_Id, Nationality_Id, Qualification_Id, DOB, CONVERT(date, DOJ) AS DOJ, Emp_Type, Termination_Date, Gender, Email_Id, Phone_No, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, IsActive, MONTH(DOJ) AS JoiningMonth, YEAR(DOJ) AS JoiningYear, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, (Emp_Name + '/(' + (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) + ')/' + Emp_Code) AS EmpDetailInfo FROM Set_EmployeeMaster WHERE (Company_Id = @Company_Id) AND (IsActive = 'True') AND Emp_Type = 'On Role' ORDER BY CAST(emp_code AS int) END ELSE IF (@Optype = 20) BEGIN SELECT Set_EmployeeMaster.*, Temp.Emp_Id AS Payroll_Emp_Id, Temp.Worked_Min_Salary, Temp.Normal_OT_Min_Salary, Temp.Week_Off_OT_Min_Salary, Temp.Holiday_OT_Min_Salary, Temp.Leave_Days_Salary, Temp.Week_Off_Salary, Temp.Holidays_Salary, Temp.Absent_Salary, Temp.Late_Min_Penalty, Temp.Early_Min_Penalty, Temp.Patial_Violation_Penalty, Temp.Employee_PF, Temp.Employee_ESIC, Temp.Year, Temp.Employee_Penalty, Temp.Employee_Claim, Temp.Emlployee_Loan, Temp.Total_Allowance, Temp.Total_Deduction, Temp.Previous_Month_Balance, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation, (SELECT Dep_Name FROM Set_DepartmentMaster WHERE Dep_Id = Set_EmployeeMaster.Department_Id) AS Department, (SELECT DATENAME(MONTH, DATEADD(MONTH, Temp.Month, 0) - 1)) AS MonthName FROM Set_EmployeeMaster LEFT OUTER JOIN Set_Employee_Parameter ON Set_EmployeeMaster.Emp_Id = Set_Employee_Parameter.Emp_Id LEFT OUTER JOIN Pay_Employe_Month_Temp AS Temp ON Set_EmployeeMaster.Emp_Id = Temp.Emp_Id WHERE Set_EmployeeMaster.Company_Id = @Company_Id AND Set_Employee_Parameter.Company_Id = @Company_Id AND Set_EmployeeMaster.IsActive = 'True' AND Set_Employee_Parameter.Field6 = 'True' AND set_employeemaster.Emp_Type = 'On Role' END IF (@Optype = 21) BEGIN SELECT Set_EmployeeMaster.emp_name, set_employeeMaster.emp_id FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = @Company_Id AND Set_EmployeeMaster.IsActive = 'True' AND set_employeemaster.Emp_Type = 'On Role' END IF (@Optype = 22) BEGIN SELECT Emp_Id, CAST(Emp_Code AS int) AS Emp_Code, Emp_Name, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = Set_EmployeeMaster.Designation_Id) AS Designation FROM Set_EmployeeMaster LEFT JOIN Set_DesignationMaster ON Set_DesignationMaster.Designation_Id = Set_EmployeeMaster.Designation_Id WHERE Company_Id = @Company_Id ORDER BY CAST(emp_code AS int) END IF (@Optype = 23) BEGIN SELECT Location_Id, Set_EmployeeMaster.Emp_Id, Emp_Code, Emp_Name, Set_UserMaster.User_Id FROM Set_EmployeeMaster inner JOIN Set_UserMaster ON Set_UserMaster.Emp_Id = Set_EmployeeMaster.Emp_Id WHERE (Set_EmployeeMaster.Company_Id = @Company_Id) AND (Set_EmployeeMaster.IsActive = 'True') AND Set_EmployeeMaster.Field2 = 'False' AND Set_EmployeeMaster.Emp_Type = 'On Role' AND Set_EmployeeMaster.Emp_Id IN (SELECT CAST(Value AS int) AS empid FROM F_Split(@Emp_Id, ',')) ORDER BY Emp_Name ASC END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //added 04-Feb-2020
            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Get_Address_Customer_By_CustomerId] @Add_Type nvarchar(50), @Add_Ref_Id int, @optype nvarchar AS BEGIN IF (@optype = 1) BEGIN SELECT dbo.Set_AddressMaster.Address_Name, Set_AddressMaster.Trans_Id, Set_AddressChild.Is_Default, Set_AddressMaster.StateId, Set_AddressMaster.CityId, Set_AddressMaster.address FROM dbo.Set_AddressMaster INNER JOIN dbo.Set_AddressChild ON dbo.Set_AddressMaster.Trans_Id = dbo.Set_AddressChild.Ref_Id WHERE Set_AddressChild.Add_Ref_Id = @Add_Ref_Id AND Set_AddressChild.Add_Type = @Add_Type END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Set_AddressChild_SelectRow] @Ref_Id int, @Add_Type nvarchar(50), @Add_Ref_Id int, @optype int AS BEGIN IF (@optype = 1) BEGIN SELECT dbo.Set_AddressChild.Trans_Id, dbo.Set_AddressChild.Add_Ref_Id, dbo.Set_AddressChild.Add_Type, dbo.Set_AddressMaster.* FROM dbo.Set_AddressMaster INNER JOIN dbo.Set_AddressChild ON dbo.Set_AddressMaster.Trans_Id = dbo.Set_AddressChild.Ref_Id END IF (@optype = 2) BEGIN SELECT [Trans_Id], [Ref_Id], [Add_Type], [Add_Ref_Id], [Is_Default], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Set_AddressChild WHERE Ref_Id = @Ref_Id END IF (@optype = 3) BEGIN SELECT dbo.Set_AddressChild.Trans_Id, dbo.Set_AddressChild.Is_Default, dbo.Set_AddressMaster.*, (CASE WHEN ISNUMERIC(Set_AddressMaster.StateId) = 1 THEN sys_statemaster.State_Name ELSE Set_AddressMaster.StateId END) AS StateId, (CASE WHEN ISNUMERIC(Set_AddressMaster.CityId) = 1 THEN sys_citymaster.City_Name ELSE Set_AddressMaster.CityId END) AS CityId, (SELECT (CASE WHEN COUNT(*) > 1 THEN 'More' ELSE '' END) FROM Set_ContactNo_Master WHERE Set_ContactNo_Master.Ref_table_pk = Set_AddressMaster.Trans_Id AND Set_ContactNo_Master.Ref_table_name = 'Set_AddressMaster') AS More, STUFF((SELECT ', ' + Phone_No FROM Set_ContactNo_Master WHERE Ref_table_pk = Set_AddressMaster.Trans_Id AND Ref_table_name = 'Set_AddressMaster' AND (Type = 'Work Fax' OR Type = 'Home Fax') FOR xml PATH ('')), 1, 1, '') AS FaxNos, STUFF((SELECT ', ' + Phone_No FROM Set_ContactNo_Master WHERE Ref_table_pk = Set_AddressMaster.Trans_Id AND Ref_table_name = 'Set_AddressMaster' AND (Type = 'Home' OR Type = 'Work' OR Type = 'LandLine') FOR xml PATH ('')), 1, 1, '') AS PhoneNos, STUFF((SELECT ', ' + Phone_No FROM Set_ContactNo_Master WHERE Ref_table_pk = Set_AddressMaster.Trans_Id AND Ref_table_name = 'Set_AddressMaster' AND Type = 'Mobile' FOR xml PATH ('')), 1, 1, '') AS MobileNos, STUFF((SELECT ', ' + Phone_No FROM Set_ContactNo_Master WHERE Ref_table_pk = Set_AddressMaster.Trans_Id AND Ref_table_name = 'Set_AddressMaster' FOR xml PATH ('')), 1, 1, '') AS AllNos, Set_AddressMaster.Address_Name + (CASE WHEN Set_AddressMaster.Street <> '' THEN ',' + Set_AddressMaster.Street ELSE '' END) + (CASE WHEN Set_AddressMaster.Block <> '' THEN ',' + Set_AddressMaster.Block ELSE '' END) + (CASE WHEN Set_AddressMaster.Avenue <> '' THEN ',' + Set_AddressMaster.Avenue ELSE '' END) + (CASE WHEN ISNUMERIC(Set_AddressMaster.CityId) = 1 THEN ',' + Sys_CityMaster.City_Name ELSE (CASE WHEN Set_AddressMaster.CityId <> '' THEN ',' + Set_AddressMaster.CityId ELSE '' END) END) + (CASE WHEN ISNUMERIC(Set_AddressMaster.StateId) = 1 THEN ',' + Sys_StateMaster.State_Name ELSE (CASE WHEN Set_AddressMaster.StateId <> '' THEN ',' + Set_AddressMaster.StateId ELSE '' END) END) + ',' + Sys_CountryMaster.Country_Name + CASE WHEN Set_AddressMaster.PinCode <> '' THEN ',' + Set_AddressMaster.PinCode ELSE '' END AS FullAddress FROM dbo.Set_AddressMaster INNER JOIN dbo.Set_AddressChild ON dbo.Set_AddressMaster.Trans_Id = dbo.Set_AddressChild.Ref_Id LEFT JOIN Sys_CountryMaster ON Sys_CountryMaster.Country_Id = Set_AddressMaster.CountryId LEFT JOIN sys_statemaster ON sys_statemaster.Trans_Id = (CASE WHEN ISNUMERIC(Set_AddressMaster.StateId) = 1 THEN Set_AddressMaster.StateId ELSE 0 END) AND sys_statemaster.IsActive = 'true' LEFT JOIN sys_citymaster ON sys_citymaster.Trans_Id = (CASE WHEN ISNUMERIC(Set_AddressMaster.cityid) = 1 THEN Set_AddressMaster.cityid ELSE 0 END) AND Sys_CityMaster.IsActive = 'true' WHERE Add_Type = @Add_Type AND Add_Ref_Id = @Add_Ref_Id END IF (@optype = 4) BEGIN SELECT [Trans_Id], [Ref_Id], [Add_Type], [Add_Ref_Id], [Is_Default], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Set_AddressChild WHERE Ref_Id = @Ref_Id AND Add_Type = @Add_Type AND Add_Ref_Id = @Add_Ref_Id END IF (@optype = 5) BEGIN SELECT dbo.Set_AddressMaster.Trans_Id, Set_AddressMaster.Address_Name, Set_AddressMaster.Address, set_addressMaster.StateId, Set_AddressMaster.CityId, Set_AddressChild.Is_Default FROM dbo.Set_AddressMaster INNER JOIN dbo.Set_AddressChild ON dbo.Set_AddressMaster.Trans_Id = dbo.Set_AddressChild.Ref_Id WHERE Add_Type = @Add_Type AND Add_Ref_Id = @Add_Ref_Id END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //added 05-Feb-2020
            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Inv_SalesReturnHeader_SelectRow] @Company_Id int, @Brand_Id int, @Location_Id int, @Trans_Id int, @Optype int AS BEGIN IF (@Optype = 1) BEGIN SELECT SH.[Company_Id], SH.[Brand_Id], SH.[Location_Id], SH.[Trans_Id], SH.[Invoice_Id], SH.[Return_No], SH.[Return_Date], SH.[Invoice_No], SH.[Invoice_Date], SH.[PaymentModeId], SH.[Currency_Id], SH.[SIFromTransType], SH.[SIFromTransNo], SH.[SalesPerson_Id], SH.[PosNo], SH.[Remark], SH.[Post], SH.[TotalQuantity], SH.[TotalAmount], SH.[NetTaxP], SH.[NetTaxV], SH.[NetDiscountP], SH.[NetDiscountV], SH.[GrandTotal], SH.[Customer_Id], SH.[Field1], SH.[Field2], SH.[Field3], SH.[Field4], SH.[Field5], SH.[Field6], SH.[Field7], SH.[IsActive], SH.[CreatedBy], SH.[CreatedDate], SH.[ModifiedBy], SH.[ModifiedDate] FROM [dbo].[Inv_SalesReturnHeader] AS SH WHERE SH.Company_Id = @Company_Id AND SH.Brand_Id = @Brand_Id AND SH.Location_Id = @Location_Id END IF (@Optype = 2) BEGIN SELECT SH.[Company_Id], SH.[Brand_Id], SH.[Location_Id], SH.[Trans_Id], SH.[Invoice_Id], SH.[Return_No], SH.[Return_Date], SH.[Invoice_No], SH.[Invoice_Date], SH.[PaymentModeId], SH.[Currency_Id], SH.[SIFromTransType], SH.[SIFromTransNo], SH.[SalesPerson_Id], SH.[PosNo], SH.[Remark], SH.[Post], SH.[TotalQuantity], SH.[TotalAmount], SH.[NetTaxP], SH.[NetTaxV], SH.[NetDiscountP], SH.[NetDiscountV], SH.[GrandTotal], SH.[Customer_Id], SH.[Field1], SH.[Field2], SH.[Field3], SH.[Field4], SH.[Field5], SH.[Field6], SH.[Field7], SH.[IsActive], SH.[CreatedBy], SH.[CreatedDate], SH.[ModifiedBy], SH.[ModifiedDate], Ems_ContactMaster.Name AS CustomerName, Set_EmployeeMaster.Emp_Name AS SalesPerson_Name, CASE WHEN SH.SIFromTransType = 'S' THEN 'By Sales Order' END AS Transtype, (SELECT Set_EmployeeMaster.Emp_Name FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = SH.company_id AND Set_EmployeeMaster.Emp_Code = SH.CreatedBy) AS CreatedUser, (SELECT Set_EmployeeMaster.Emp_Name FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = SH.company_id AND Set_EmployeeMaster.Emp_Code = SH.ModifiedBy) AS ModifiedUser FROM [dbo].[Inv_SalesReturnHeader] AS SH INNER JOIN Ems_ContactMaster ON SH.Customer_Id = Ems_ContactMaster.Trans_Id INNER JOIN Set_EmployeeMaster ON SH.SalesPerson_Id = Set_EmployeeMaster.Emp_Id WHERE SH.Company_Id = @Company_Id AND SH.Brand_Id = @Brand_Id AND SH.Location_Id = @Location_Id AND SH.IsActive = 'True' END IF (@Optype = 3) BEGIN SELECT SH.[Company_Id], SH.[Brand_Id], SH.[Location_Id], SH.[Trans_Id], SH.[Invoice_Id], SH.[Return_No], SH.[Return_Date], SH.[Invoice_No], SH.[Invoice_Date], SH.[PaymentModeId], SH.[Currency_Id], SH.[SIFromTransType], SH.[SIFromTransNo], SH.[SalesPerson_Id], SH.[PosNo], SH.[Remark], SH.[Post], SH.[TotalQuantity], SH.[TotalAmount], SH.[NetTaxP], SH.[NetTaxV], SH.[NetDiscountP], SH.[NetDiscountV], SH.[GrandTotal], SH.[Customer_Id], SH.[Field1], SH.[Field2], SH.[Field3], SH.[Field4], SH.[Field5], SH.[Field6], SH.[Field7], SH.[IsActive], SH.[CreatedBy], SH.[CreatedDate], SH.[ModifiedBy], SH.[ModifiedDate], Ems_ContactMaster.Name AS CustomerName, Set_EmployeeMaster.Emp_Name AS SalesPerson_Name, CASE WHEN SH.SIFromTransType = 'S' THEN 'By Sales Order' END AS Transtype, (SELECT Set_EmployeeMaster.Emp_Name FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = SH.company_id AND Set_EmployeeMaster.Emp_Code = SH.CreatedBy) AS CreatedUser, (SELECT Set_EmployeeMaster.Emp_Name FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = SH.company_id AND Set_EmployeeMaster.Emp_Code = SH.ModifiedBy) AS ModifiedUser FROM [dbo].[Inv_SalesReturnHeader] AS SH INNER JOIN Ems_ContactMaster ON SH.Customer_Id = Ems_ContactMaster.Trans_Id INNER JOIN Set_EmployeeMaster ON SH.SalesPerson_Id = Set_EmployeeMaster.Emp_Id WHERE SH.Company_Id = @Company_Id AND SH.Brand_Id = @Brand_Id AND SH.Location_Id = @Location_Id AND SH.IsActive = 'False' END IF (@Optype = 4) BEGIN SELECT SH.[Company_Id], SH.[Brand_Id], SH.[Location_Id], SH.[Trans_Id], SH.[Invoice_Id], SH.[Return_No], SH.[Return_Date], SH.[Invoice_No], SH.[Invoice_Date], SH.[PaymentModeId], SH.[Currency_Id], SH.[SIFromTransType], SH.[SIFromTransNo], SH.[SalesPerson_Id], SH.[PosNo], SH.[Remark], SH.[Post], SH.[TotalQuantity], SH.[TotalAmount], SH.[NetTaxP], SH.[NetTaxV], SH.[NetDiscountP], SH.[NetDiscountV], SH.[GrandTotal], SH.[Customer_Id], SH.[Field1], SH.[Field2], SH.[Field3], SH.[Field4], SH.[Field5], SH.[Field6], SH.[Field7], SH.[IsActive], SH.[CreatedBy], SH.[CreatedDate], SH.[ModifiedBy], SH.[ModifiedDate], SIH.[Invoice_Merchant_Id] FROM [dbo].[Inv_SalesReturnHeader] AS SH inner join Inv_SalesInvoiceHeader SIH on SIH.Trans_Id=SH.Invoice_Id WHERE SH.Company_Id = @Company_Id AND SH.Brand_Id = @Brand_Id AND SH.Location_Id = @Location_Id AND SH.Trans_Id = @Trans_Id END IF (@Optype = 5) BEGIN SELECT SH.[Company_Id], SH.[Brand_Id], SH.[Location_Id], SH.[Trans_Id], SH.[Invoice_Id], SH.[Return_No], SH.[Return_Date], SH.[Invoice_No], SH.[Invoice_Date], SH.[PaymentModeId], SH.[Currency_Id], SH.[SIFromTransType], SH.[SIFromTransNo], SH.[SalesPerson_Id], SH.[PosNo], SH.[Remark], SH.[Post], SH.[TotalQuantity], SH.[TotalAmount], SH.[NetTaxP], SH.[NetTaxV], SH.[NetDiscountP], SH.[NetDiscountV], SH.[GrandTotal], SH.[Customer_Id], SH.[Field1], SH.[Field2], SH.[Field3], SH.[Field4], SH.[Field5], SH.[Field6], SH.[Field7], SH.[IsActive], SH.[CreatedBy], SH.[CreatedDate], SH.[ModifiedBy], SH.[ModifiedDate] FROM [dbo].[Inv_SalesReturnHeader] AS SH WHERE SH.Company_Id = @Company_Id AND SH.Brand_Id = @Brand_Id AND SH.Location_Id = @Location_Id AND SH.Invoice_Id = @Trans_Id AND SH.Post = 'False' AND sh.IsActive = 'True' END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }


            //added by jitendra on 05-feb-2020

            try
            {
                cmd.CommandText = "alter  table inv_modelmaster add cost_price nvarchar(100)";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER Proc [dbo].[sp_Inv_ModelMaster_Insert] @Company_Id	int, @Brand_Id	int, @Model_No nvarchar(50), @Model_Name	nvarchar(MAX), @Model_Name_L	nvarchar(MAX), @Description nvarchar(MAX), @Local_Price nvarchar(100), @IsLabel bit, @Sales_Price_1 nchar(10), @Sales_Price_2 nchar(10), @Sales_Price_3 nchar(10), @Field1	nvarchar(MAX), @Field2 nvarchar(MAX), @Field3	nvarchar(MAX), @Field4	nvarchar(MAX), @Field5	text, @Field6	text, @Field7	datetime, @IsActive	bit, @CreatedBy	nvarchar(255), @CreatedDate	datetime, @ModifiedBy	nvarchar(255), @ModifiedDate datetime, @ReferenceId int Output, @SnoPrefix varchar(20) =null,@SnoSuffix varchar(20) =null,@SnoStartFrom varchar(20) =null,@Cost_Price nvarchar(100) as begin Insert into Inv_ModelMaster ( Company_Id, Brand_Id, Model_No	, Model_Name, Model_Name_L, Description, Local_Price, Islabel, sales_Price_1, Sales_price_2, Sales_price_3, Field1, Field2, Field3, Field4, Field5, Field6, Field7, IsActive, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate, SnoPrefix,SnoSuffix,SnoStartFrom ,Cost_Price)values ( @Company_Id, @Brand_Id, @Model_No	, @Model_Name, @Model_Name_L, @Description, @Local_Price, @IsLabel, @Sales_Price_1, @Sales_Price_2, @Sales_Price_3, @Field1, @Field2, @Field3, @Field4, @Field5, @Field6, @Field7, @IsActive, @CreatedBy, @CreatedDate, @ModifiedBy	, @ModifiedDate,@SnoPrefix,@SnoSuffix,@SnoStartFrom ,@Cost_Price) set @ReferenceId=SCOPE_IDENTITY() return @ReferenceId end";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER Proc [dbo].[sp_Inv_ModelMaster_Update] @Company_Id	int, @Brand_Id	int, @Trans_Id int, @Model_No	nvarchar(MAX), @Model_Name	nvarchar(MAX), @Model_Name_L nvarchar(MAX), @Description Nvarchar(max), @Local_Price nvarchar(100), @Islabel bit, @Sales_Price_1 nchar(10), @Sales_Price_2 nchar(10), @Sales_Price_3 nchar(10), @Field1 nvarchar(MAX), @Field2	nvarchar(MAX), @Field3	nvarchar(MAX), @Field4	nvarchar(MAX), @Field5	text, @Field6	text, @Field7	datetime, @IsActive	bit, @ModifiedBy	nvarchar(255), @ModifiedDate datetime, @ReferenceId int Output, @SnoPrefix varchar(20) =null,@SnoSuffix varchar(20) =null,@SnoStartFrom varchar(20) =null ,@Cost_Price nvarchar(100) as begin Update Inv_ModelMaster Set Model_No=@Model_No	, Model_Name=@Model_Name, Model_Name_L=@Model_Name_L, Description=@Description, Local_Price=@Local_Price,cost_price=@cost_price, islabel=@Islabel, Sales_price_1=@Sales_Price_1, Sales_price_2=@Sales_Price_2, sales_price_3=@Sales_Price_3, Field1=@Field1, Field2=@Field2, Field3=@Field3, Field4=@Field4, Field5=@Field5, Field6=@Field6, Field7=@Field7, IsActive=@IsActive, ModifiedBy=@ModifiedBy	, ModifiedDate=@ModifiedDate, SnoPrefix=@SnoPrefix, SnoSuffix=@SnoSuffix, SnoStartFrom=@SnoStartFrom where Company_Id=@Company_Id AND Brand_Id=@Brand_Id and Trans_Id=@Trans_Id set @ReferenceId=@@Rowcount return @ReferenceId end";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }


            try
            {
                cmd.CommandText = "ALTER Proc [dbo].[sp_Inv_ModelMaster_SelectRow] @Company_Id int, @Brand_Id int, @Trans_Id int, @IsActive bit, @Optype int, @model_No varchar(50)='' as begin if(@Optype=1) begin select Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate From Inv_ModelMaster end if(@Optype=2) begin select Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate From Inv_ModelMaster where Company_Id=@Company_Id and IsActive=@IsActive end if(@Optype=3) begin select Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.CreatedBy)) as Created_User , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.ModifiedBy)) as Modified_User From Inv_ModelMaster where Company_Id=@Company_Id and Brand_Id=@Brand_Id and IsActive=@IsActive Order by Trans_Id desc end if(@Optype=4) begin select cost_price, Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate, SnoPrefix, SnoSuffix, SnoStartFrom From Inv_ModelMaster where Company_Id=@Company_Id and Brand_Id=@Brand_Id and Trans_Id=@Trans_Id and IsActive=@IsActive end if(@Optype=5) begin select Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.CreatedBy)) as Created_User , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.ModifiedBy)) as Modified_User From Inv_ModelMaster where Company_Id=@Company_Id and Brand_Id=@Brand_Id and IsActive='True' end if(@Optype=6) begin select Company_Id, Brand_Id,Trans_Id, Model_No, Model_Name , Model_Name_L , Description, Local_Price, Islabel, Sales_Price_1, Sales_Price_2, Sales_Price_3, Field1 , Field2 , Field3 , Field4 , Field5 , Field6 , Field7 , IsActive , CreatedBy , CreatedDate , ModifiedBy , ModifiedDate , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.CreatedBy)) as Created_User , (select set_employeemaster.Emp_Name from set_employeemaster where set_employeemaster.emp_id= (select Set_UserMaster.Emp_Id from Set_UserMaster where Set_UserMaster.User_Id=Inv_ModelMaster.ModifiedBy)) as Modified_User From Inv_ModelMaster where Company_Id=@Company_Id and Brand_Id=@Brand_Id and IsActive=@IsActive and Model_No=@model_No Order by Trans_Id desc end end";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //added on 10-feb-2020
            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Inv_SalesInvoiceHeader_SelectRow] @Company_Id int, @Brand_Id int, @Location_Id int, @Trans_Id int, @Invoice_No nvarchar(255), @SIFromTransType nvarchar(100), @SIFromTransNo nvarchar(50), @Optype int AS BEGIN IF (@Optype = 1) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Invoice_No], [Invoice_Date], [PaymentModeId], [Currency_Id], [SIFromTransType], [SIFromTransNo], [SalesPerson_Id], [PosNo], [Remark], [Account_No], [Invoice_Costing], [Shift], [Post], [Tender], [Amount], [TotalQuantity], [TotalAmount], [NetTaxP], [NetTaxV], [NetAmount], [NetDiscountP], [NetDiscountV], [GrandTotal], [Supplier_Id], [Invoice_Ref_No], [Invoice_Merchant_Id], [Ref_Order_Number], [Condition1], [Condition2], [Condition3], [Condition4], [Condition5], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], [IsActive], ReturnNo FROM Inv_SalesInvoiceHeader WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id ORDER BY Trans_Id DESC END ELSE IF (@Optype = 2) BEGIN SELECT ROW_NUMBER() OVER (ORDER BY Inv_SalesInvoiceHeader.Trans_Id ASC) AS RowNumber, Set_EmployeeMaster.Emp_Name AS EmployeeName, Inv_SalesInvoiceHeader.Company_Id, Inv_SalesInvoiceHeader.Brand_Id, Inv_SalesInvoiceHeader.Location_Id, Ems_ContactMaster.Name AS CustomerName, Inv_SalesInvoiceHeader.Invoice_No, Inv_SalesInvoiceHeader.Invoice_Date, Inv_SalesInvoiceHeader.Condition2, Inv_SalesInvoiceHeader.Field4, Inv_SalesInvoiceHeader.GrandTotal, (Inv_SalesInvoiceHeader.GrandTotal * ((1 / CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Inv_SalesInvoiceHeader.Currency_Id) AS decimal(18, 6))) * CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Set_LocationMaster.Field1) AS decimal(18, 6)))) AS LocalGrandTotal, (SELECT Set_LocationMaster.Field1 FROM Set_LocationMaster WHERE Set_LocationMaster.Location_Id = Inv_SalesInvoiceHeader.Location_Id) AS LocationCurrency, Inv_SalesInvoiceHeader.Trans_Id, Inv_SalesInvoiceHeader.Post, Inv_SalesInvoiceHeader.Currency_Id, inv_salesinvoiceheader.Supplier_Id AS Customer_Id, CASE WHEN Inv_SalesInvoiceHeader.SIFromTransType = 'S' THEN 'Sales Order' WHEN Inv_SalesInvoiceHeader.SIFromTransType = 'J' THEN 'Job Card' WHEN Inv_SalesInvoiceHeader.SIFromTransType = 'W' THEN 'Work Order' ELSE 'Direct' END AS Transtype, Inv_SalesInvoiceHeader.ReturnNo, CASE WHEN (SELECT Set_UserMaster.Emp_Id FROM Set_UserMaster WHERE Set_UserMaster.User_Id = Inv_SalesInvoiceHeader.CreatedBy) = 0 THEN Inv_SalesInvoiceHeader.CreatedBy ELSE (SELECT Set_EmployeeMaster.Emp_Name FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Emp_Id = (SELECT Set_UserMaster.Emp_Id FROM Set_UserMaster WHERE Set_UserMaster.User_Id = Inv_SalesInvoiceHeader.CreatedBy)) END AS InvoiceCreatedBy, CASE WHEN ((SELECT ParameterValue FROM Inv_ParameterMaster WHERE Inv_ParameterMaster.Company_Id = @Company_Id AND Inv_ParameterMaster.Brand_Id = @Brand_Id AND Inv_ParameterMaster.Location_Id = @Location_Id AND Inv_ParameterMaster.ParameterName = 'Is Delivery Voucher allow') = 'True') AND (Inv_SalesInvoiceHeader.SIFromTransType = 'S') THEN CAST('True' AS bit) ELSE CAST('False' AS bit) END AS IsDeliveryPrint, Inv_SalesInvoiceHeader.Field7, (SELECT TOP 1 Inv_SalesInvoiceDetail.Post FROM Inv_SalesInvoiceDetail WHERE Inv_SalesInvoiceDetail.Invoice_No = Inv_SalesInvoiceHeader.Trans_Id) AS ReturnPostStatus, (SELECT SUM((Inv_SalesInvoiceDetail.UnitPrice - Inv_SalesInvoiceDetail.DiscountV + Inv_SalesInvoiceDetail.TaxV) * Inv_SalesInvoiceDetail.ReturnQty) FROM Inv_SalesInvoiceDetail WHERE Inv_SalesInvoiceDetail.Invoice_No = Inv_SalesInvoiceHeader.Trans_Id) AS ReturnAmount, Inv_SalesInvoiceHeader.return_Is_Active, CASE WHEN Inv_SalesInvoiceHeader.SIFromTransType = 'S' THEN (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Inv_salesOrderHeader.SalesOrderNo) FROM Inv_salesOrderHeader WHERE Inv_salesOrderHeader.Trans_id IN (SELECT DISTINCT Inv_SalesInvoiceDetail.SIFromTransNo FROM Inv_SalesInvoiceDetail WHERE Inv_SalesInvoiceDetail.Invoice_No = Inv_SalesInvoiceHeader.Trans_Id) FOR xml PATH ('')), 1, 1, '')) WHEN Inv_SalesInvoiceHeader.SIFromTransType = 'J' THEN (SELECT SM_JobCards_Header.Job_No FROM SM_JobCards_Header WHERE SM_JobCards_Header.Trans_Id = Inv_SalesInvoiceHeader.SIFromTransNo) WHEN Inv_SalesInvoiceHeader.SIFromTransType = 'W' THEN (SELECT SM_WorkOrder.Work_Order_No FROM SM_WorkOrder WHERE SM_WorkOrder.Trans_Id = Inv_SalesInvoiceHeader.SIFromTransNo) END AS OrderList, (SELECT Set_Payment_Mode_Master.Field1 FROM Set_Payment_Mode_Master WHERE Set_Payment_Mode_Master.Pay_Mode_Id = (SELECT TOP 1 Inv_PaymentTrn.PaymentModeId FROM Inv_PaymentTrn WHERE Inv_PaymentTrn.TypeTrans = 'SI' AND Inv_PaymentTrn.TransNo = Inv_SalesInvoiceHeader.Trans_Id)) AS PaymentType, CASE WHEN Inv_SalesInvoiceHeader.Condition3 <> ' ' AND Inv_SalesInvoiceHeader.Condition3 <> '0' THEN (SELECT SM_JobCards_Header.Job_No FROM SM_JobCards_Header WHERE SM_JobCards_Header.Trans_Id = Inv_SalesInvoiceHeader.Condition3) ELSE ' ' END AS Job_No FROM Inv_SalesInvoiceHeader INNER JOIN Set_EmployeeMaster ON Set_EmployeeMaster.emp_id = Inv_SalesInvoiceHeader.SalesPerson_Id LEFT JOIN Ems_ContactMaster ON Ems_ContactMaster.Trans_Id = Inv_SalesInvoiceHeader.Supplier_Id INNER JOIN Set_LocationMaster ON Inv_SalesInvoiceHeader.Location_Id = Set_LocationMaster.Location_Id WHERE Inv_SalesInvoiceHeader.Company_Id = @Company_Id AND Inv_SalesInvoiceHeader.Brand_Id = @Brand_Id AND Inv_SalesInvoiceHeader.Location_Id = @Location_Id AND Inv_SalesInvoiceHeader.IsActive = 'True' ORDER BY Inv_SalesInvoiceHeader.Invoice_Date DESC END ELSE IF (@Optype = 3) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Invoice_No], [Invoice_Date], [PaymentModeId], [Currency_Id], [SIFromTransType], [SIFromTransNo], [SalesPerson_Id], [PosNo], [Remark], [Account_No], [Invoice_Costing], [Shift], [Post], [Tender], [Amount], [TotalQuantity], [TotalAmount], [NetTaxP], [NetTaxV], [NetAmount], [NetDiscountP], [NetDiscountV], [GrandTotal], [Supplier_Id], [Invoice_Ref_No], [Invoice_Merchant_Id], [Ref_Order_Number], [Condition1], [Condition2], [Condition3], [Condition4], [Condition5], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], [IsActive], returnno, (SELECT Emp_Name FROM Set_EmployeeMaster WHERE Emp_Id = Inv_SalesInvoiceHeader.SalesPerson_Id) AS EmployeeName, (SELECT name FROM Ems_ContactMaster WHERE Trans_Id = Inv_SalesInvoiceHeader.Supplier_Id) AS CustomerName, (SELECT Set_EmployeeMaster.Emp_Name FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = Inv_SalesInvoiceHeader.company_id AND Set_EmployeeMaster.Emp_Code = Inv_SalesInvoiceHeader.CreatedBy) AS CreatedUser, (SELECT Set_EmployeeMaster.Emp_Name FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = Inv_SalesInvoiceHeader.company_id AND Set_EmployeeMaster.Emp_Code = Inv_SalesInvoiceHeader.ModifiedBy) AS ModifiedUser, (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Inv_salesOrderHeader.SalesOrderNo) FROM Inv_salesOrderHeader WHERE Inv_salesOrderHeader.Trans_id IN (SELECT DISTINCT Inv_SalesInvoiceDetail.SIFromTransNo FROM Inv_SalesInvoiceDetail WHERE Inv_SalesInvoiceDetail.Invoice_No = Inv_SalesInvoiceHeader.Trans_Id) FOR xml PATH ('')), 1, 1, '')) AS OrderList FROM Inv_SalesInvoiceHeader WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'False' ORDER BY Trans_Id DESC END ELSE IF (@Optype = 4) BEGIN SELECT Inv_SalesInvoiceHeader.[Company_Id], Inv_SalesInvoiceHeader.[Brand_Id], Inv_SalesInvoiceHeader.[Location_Id], Inv_SalesInvoiceHeader.[Trans_Id], Inv_SalesInvoiceHeader.[Invoice_No], Inv_SalesInvoiceHeader.[Invoice_Date], Inv_SalesInvoiceHeader.[PaymentModeId], Inv_SalesInvoiceHeader.[Currency_Id], Inv_SalesInvoiceHeader.[SIFromTransType], Inv_SalesInvoiceHeader.[SIFromTransNo], Inv_SalesInvoiceHeader.[SalesPerson_Id], Inv_SalesInvoiceHeader.[PosNo], Inv_SalesInvoiceHeader.[Remark], Inv_SalesInvoiceHeader.[Account_No], Inv_SalesInvoiceHeader.[Invoice_Costing], Inv_SalesInvoiceHeader.[Shift], Inv_SalesInvoiceHeader.[Post], Inv_SalesInvoiceHeader.[Tender], Inv_SalesInvoiceHeader.[Amount], Inv_SalesInvoiceHeader.[TotalQuantity], Inv_SalesInvoiceHeader.[TotalAmount], Inv_SalesInvoiceHeader.[NetTaxP], Inv_SalesInvoiceHeader.[NetTaxV], Inv_SalesInvoiceHeader.[NetAmount], Inv_SalesInvoiceHeader.[NetDiscountP], Inv_SalesInvoiceHeader.[NetDiscountV], Inv_SalesInvoiceHeader.[GrandTotal], Inv_SalesInvoiceHeader.[Supplier_Id], Inv_SalesInvoiceHeader.[Invoice_Ref_No], Inv_SalesInvoiceHeader.[Invoice_Merchant_Id], Inv_SalesInvoiceHeader.[Ref_Order_Number], Inv_SalesInvoiceHeader.[Condition1], Inv_SalesInvoiceHeader.[Condition2], Inv_SalesInvoiceHeader.[Condition3], Inv_SalesInvoiceHeader.[Condition4], Inv_SalesInvoiceHeader.[Condition5], Inv_SalesInvoiceHeader.[Field1], Inv_SalesInvoiceHeader.[Field2], Inv_SalesInvoiceHeader.[Field3], Inv_SalesInvoiceHeader.[Field4], Inv_SalesInvoiceHeader.[Field5], Inv_SalesInvoiceHeader.[Field6], Inv_SalesInvoiceHeader.[Field7], (SELECT TOP 1 address_name FROM set_addressmaster WHERE set_addressmaster.trans_id = Inv_SalesInvoiceHeader.Field1) AS billingAddressName, (SELECT TOP 1 address_name FROM set_addressmaster WHERE set_addressmaster.trans_id = Inv_SalesInvoiceHeader.Field3) AS shippingAddressName, Set_EmployeeMaster.Emp_Code AS salesPersonCode, Set_EmployeeMaster.Emp_Name AS salesPersonName, (SELECT CASE WHEN Sys_Country_Currency.field1 IS NULL THEN '0' ELSE Sys_Country_Currency.field1 END AS decimal FROM Sys_CurrencyMaster LEFT JOIN Sys_Country_Currency ON Sys_Country_Currency.Currency_Id = Sys_CurrencyMaster.Currency_ID WHERE Sys_CurrencyMaster.Currency_Id = Inv_SalesInvoiceHeader.currency_id) AS currencyDecimalCount, (SELECT Set_Payment_Mode_Master.Field1 FROM Set_Payment_Mode_Master WHERE Set_Payment_Mode_Master.Pay_Mode_Id = (SELECT TOP 1 Inv_PaymentTrn.PaymentModeId FROM Inv_PaymentTrn WHERE Inv_PaymentTrn.TypeTrans = 'SI' AND Inv_PaymentTrn.TransNo = Inv_SalesInvoiceHeader.Trans_Id)) AS PaymentType, Inv_SalesInvoiceHeader.[CreatedBy], Inv_SalesInvoiceHeader.[CreatedDate], Inv_SalesInvoiceHeader.[ModifiedBy], Inv_SalesInvoiceHeader.[ModifiedDate], Inv_SalesInvoiceHeader.[IsActive], Inv_SalesInvoiceHeader.returnno, Inv_SalesInvoiceHeader.contactid, (CASE WHEN sys_currencyMaster.Field2 IS NULL OR sys_currencyMaster.Field2 = '' THEN '0' ELSE sys_currencyMaster.Field2 END) AS denomination, Set_EmployeeMaster.Emp_Name AS EmployeeName, customer.name AS CustomerName, ShipCustomer.name AS ShipCustomerName, Sys_CurrencyMaster.Currency_Name, ems_contactmaster.Name AS contactName, Inv_SalesInvoiceHeader.Trans_Type FROM Inv_SalesInvoiceHeader LEFT JOIN sys_currencyMaster ON Sys_CurrencyMaster.Currency_ID = Inv_SalesInvoiceHeader.Currency_Id LEFT JOIN Set_EmployeeMaster ON Set_EmployeeMaster.emp_id = Inv_SalesInvoiceHeader.SalesPerson_Id LEFT JOIN ems_contactmaster ON ems_contactmaster.Trans_Id = Inv_SalesInvoiceHeader.contactid LEFT JOIN Ems_ContactMaster customer ON customer.Trans_Id = Inv_SalesInvoiceHeader.Supplier_Id LEFT JOIN Ems_ContactMaster ShipCustomer ON ShipCustomer.Trans_Id = Inv_SalesInvoiceHeader.Field2 WHERE Inv_SalesInvoiceHeader.IsActive = 'True' AND Inv_SalesInvoiceHeader.Trans_Id = @Trans_Id END ELSE IF (@Optype = 5) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Invoice_No], [Invoice_Date], [PaymentModeId], [Currency_Id], [SIFromTransType], [SIFromTransNo], [SalesPerson_Id], [PosNo], [Remark], [Account_No], [Invoice_Costing], [Shift], [Post], [Tender], [Amount], [TotalQuantity], [TotalAmount], [NetTaxP], [NetTaxV], [NetAmount], [NetDiscountP], [NetDiscountV], [GrandTotal], [Supplier_Id], [Invoice_Ref_No], [Invoice_Merchant_Id], [Ref_Order_Number], [Condition1], [Condition2], [Condition3], [Condition4], [Condition5], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], [IsActive], returnno, (SELECT name FROM Ems_ContactMaster WHERE Trans_Id = Inv_SalesInvoiceHeader.Supplier_Id) AS CustomerName FROM Inv_SalesInvoiceHeader WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'True' AND Invoice_No = @Invoice_No ORDER BY Trans_Id DESC END ELSE IF (@Optype = 6) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Invoice_No], [Invoice_Date], [PaymentModeId], [Currency_Id], [SIFromTransType], [SIFromTransNo], [SalesPerson_Id], [PosNo], [Remark], [Account_No], [Invoice_Costing], [Shift], [Post], [Tender], [Amount], [TotalQuantity], [TotalAmount], [NetTaxP], [NetTaxV], [NetAmount], [NetDiscountP], [NetDiscountV], [GrandTotal], [Supplier_Id], [Invoice_Ref_No], [Invoice_Merchant_Id], [Ref_Order_Number], [Condition1], [Condition2], [Condition3], [Condition4], [Condition5], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], [IsActive], returnno FROM Inv_SalesInvoiceHeader WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'True' AND SIFromTransType = @SIFromTransType AND SIFromTransNo = @SIFromTransNo ORDER BY Trans_Id DESC END ELSE IF (@Optype = 7) BEGIN SELECT MAX(Trans_Id) FROM Inv_SalesInvoiceHeader WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id END ELSE IF (@Optype = 8) BEGIN SELECT SH.Trans_Id, SH.Invoice_No, SH.Invoice_Date, sh.Currency_Id, Sh.Supplier_Id, (SELECT Ems_ContactMaster.Name FROM Ems_ContactMaster WHERE Ems_ContactMaster.Trans_Id = sh.Supplier_Id) AS Name, PM.ProductId, PM.ProductCode, PM.EProductName, ((sd.UnitPrice - sd.DiscountV) * sd.Quantity) AS Amount, (((sd.UnitPrice - sd.DiscountV) * sd.Quantity) * ((1 / CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = SH.Currency_Id) AS decimal(18, 6))) * CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Set_LocationMaster.Field1) AS decimal(18, 6)))) AS LocalAmount, CASE WHEN @SIFromTransType = 'Sales' THEN CAST(PM.Field4 AS decimal(18, 6)) WHEN @SIFromTransType = 'Technical' THEN CAST(PM.Field5 AS decimal(18, 6)) WHEN @SIFromTransType = 'Developer' THEN CAST(PM.DeveloperCommission AS decimal(18, 6)) ELSE 1 END AS Comission_Percentage, CASE WHEN @SIFromTransType = 'Sales' THEN (((((sd.UnitPrice - sd.DiscountV) * sd.Quantity) * ((1 / CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = SH.Currency_Id) AS decimal(18, 6))) * CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Set_LocationMaster.Field1) AS decimal(18, 6)))) * CAST(pm.Field4 AS decimal(18, 6))) / 100) WHEN @SIFromTransType = 'Technical' THEN (((((sd.UnitPrice - sd.DiscountV) * sd.Quantity) * ((1 / CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = SH.Currency_Id) AS decimal(18, 6))) * CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Set_LocationMaster.Field1) AS decimal(18, 6)))) * CAST(pm.Field5 AS decimal(18, 6))) / 100) WHEN @SIFromTransType = 'Developer' THEN (((((sd.UnitPrice - sd.DiscountV) * sd.Quantity) * ((1 / CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = SH.Currency_Id) AS decimal(18, 6))) * CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Set_LocationMaster.Field1) AS decimal(18, 6)))) * CAST(pm.DeveloperCommission AS decimal(18, 6))) / 100) ELSE (((((sd.UnitPrice - sd.DiscountV) * sd.Quantity) * ((1 / CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = SH.Currency_Id) AS decimal(18, 6))) * CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Set_LocationMaster.Field1) AS decimal(18, 6)))) * 1) / 100) END AS Comission_Amount, SH.SalesPerson_Id, (SELECT Inv_SalesOrderHeader.Agent_Id FROM Inv_SalesOrderHeader WHERE Inv_SalesOrderHeader.Trans_Id = sd.SIFromTransNo) AS AgentId, (SELECT Ems_ContactMaster.name FROM Ems_ContactMaster WHERE Ems_ContactMaster.Trans_Id = ((SELECT Inv_SalesOrderHeader.Agent_Id FROM Inv_SalesOrderHeader WHERE Inv_SalesOrderHeader.Trans_Id = sd.SIFromTransNo) )) AS Agent_name, (SELECT DISTINCT Inv_SalesOrderDetail.AgentCommission FROM Inv_SalesOrderDetail WHERE Inv_SalesOrderDetail.SalesOrderNo = SD.SIFromTransNo AND Inv_SalesOrderDetail.Product_Id = sd.Product_Id) AS AgentCommission, CASE WHEN sd.ReturnQty IS NULL THEN 'False' WHEN sd.ReturnQty IS NOT NULL AND SD.ReturnQty > 0 THEN 'True' ELSE 'False' END AS Is_Return, Pm.DeveloperCommission, CASE WHEN (SELECT COUNT(*) FROM Prj_Project_Team LEFT JOIN set_employeemaster ON Prj_Project_Team.Emp_Id = set_employeemaster.Emp_Id LEFT JOIN Prj_Project_Master ON Prj_Project_Master.Project_Id = Prj_Project_Team.Project_Id WHERE Prj_Project_Team.Project_Id = Pm.projectid AND Prj_Project_Team.Field5 = 'True' AND Set_EmployeeMaster.Field2 = 'False' AND Set_EmployeeMaster.IsActive = 'True' AND Set_EmployeeMaster.Emp_Type = 'On Role' AND Prj_Project_Master.isactive = 'True') > 0 THEN Pm.projectid ELSE 0 END AS projectid, Pm.Field5 AS TechnicalCommission FROM Inv_SalesInvoiceHeader AS SH INNER JOIN Inv_SalesInvoiceDetail AS SD ON SH.Trans_id = SD.Invoice_no INNER JOIN Inv_ProductMaster AS PM ON sd.Product_Id = PM.ProductId INNER JOIN Set_LocationMaster ON Set_LocationMaster.Location_Id = sh.Location_Id WHERE SH.Company_Id = @Company_Id AND SH.Brand_Id = @Brand_Id AND SH.Location_Id = @Location_Id AND SH.SIFromTransType = 'S' AND SH.IsActive = 'True' AND sh.Post = 'True' AND SH.Trans_Id NOT IN (SELECT DISTINCT Inv_SalesCommission_Detail.Invoice_Id FROM Inv_SalesCommission_Detail WHERE Inv_SalesCommission_Detail.Field1 = @SIFromTransType) ORDER BY sh.Invoice_Date END ELSE IF (@Optype = 9) BEGIN SELECT DISTINCT SH.Trans_Id, SH.Invoice_No FROM Inv_SalesInvoiceHeader AS SH INNER JOIN Inv_SalesInvoiceDetail AS SD ON SH.Trans_id = SD.Invoice_no INNER JOIN Inv_ProductMaster AS PM ON sd.Product_Id = PM.ProductId WHERE SH.Company_Id = @Company_Id AND SH.Brand_Id = @Brand_Id AND SH.Location_Id = @Location_Id AND SH.IsActive = 'True' AND sh.Post = 'True' AND SH.Trans_Id NOT IN (SELECT DISTINCT Inv_SalesCommission_Detail.Invoice_Id FROM Inv_SalesCommission_Detail WHERE Inv_SalesCommission_Detail.Field1 = @SIFromTransType) END ELSE IF (@Optype = 10) BEGIN SELECT SH.Trans_Id, SH.Invoice_No, SH.Invoice_Date, sh.Currency_Id, Sh.Supplier_Id, (SELECT Ems_ContactMaster.Name FROM Ems_ContactMaster WHERE Ems_ContactMaster.Trans_Id = sh.Supplier_Id) AS Name, PM.ProductId, PM.ProductCode, PM.EProductName, ((sd.UnitPrice - sd.DiscountV) * sd.Quantity) AS Amount, (((sd.UnitPrice - sd.DiscountV) * sd.Quantity) * ((1 / CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = SH.Currency_Id) AS decimal(18, 6))) * CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Set_LocationMaster.Field1) AS decimal(18, 6)))) AS LocalAmount, CASE WHEN @SIFromTransType = 'Sales' THEN PM.Field4 WHEN @SIFromTransType = 'Technical' THEN PM.Field5 WHEN @SIFromTransType = 'Developer' THEN CAST(PM.DeveloperCommission AS decimal(18, 6)) ELSE 1 END AS Comission_Percentage, CASE WHEN @SIFromTransType = 'Sales' THEN (((((sd.UnitPrice - sd.DiscountV) * sd.Quantity) * ((1 / CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = SH.Currency_Id) AS decimal(18, 6))) * CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Set_LocationMaster.Field1) AS decimal(18, 6)))) * CAST(pm.Field4 AS decimal(18, 6))) / 100) WHEN @SIFromTransType = 'Technical' THEN (((((sd.UnitPrice - sd.DiscountV) * sd.Quantity) * ((1 / CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = SH.Currency_Id) AS decimal(18, 6))) * CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Set_LocationMaster.Field1) AS decimal(18, 6)))) * CAST(pm.Field5 AS decimal(18, 6))) / 100) WHEN @SIFromTransType = 'Developer' THEN (((((sd.UnitPrice - sd.DiscountV) * sd.Quantity) * ((1 / CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = SH.Currency_Id) AS decimal(18, 6))) * CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Set_LocationMaster.Field1) AS decimal(18, 6)))) * CAST(pm.DeveloperCommission AS decimal(18, 6))) / 100) ELSE (((((sd.UnitPrice - sd.DiscountV) * sd.Quantity) * ((1 / CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = SH.Currency_Id) AS decimal(18, 6))) * CAST((SELECT Sys_CurrencyMaster.Currency_Value FROM Sys_CurrencyMaster WHERE Sys_CurrencyMaster.Currency_ID = Set_LocationMaster.Field1) AS decimal(18, 6)))) * 1) / 100) END AS Comission_Amount, SH.SalesPerson_Id, (SELECT Inv_SalesOrderHeader.Agent_Id FROM Inv_SalesOrderHeader WHERE Inv_SalesOrderHeader.Trans_Id = sd.SIFromTransNo) AS AgentId, (SELECT Ems_ContactMaster.name FROM Ems_ContactMaster WHERE Ems_ContactMaster.Trans_Id = ((SELECT Inv_SalesOrderHeader.Agent_Id FROM Inv_SalesOrderHeader WHERE Inv_SalesOrderHeader.Trans_Id = sd.SIFromTransNo) )) AS Agent_name, (SELECT DISTINCT Inv_SalesOrderDetail.AgentCommission FROM Inv_SalesOrderDetail WHERE Inv_SalesOrderDetail.SalesOrderNo = SD.SIFromTransNo AND Inv_SalesOrderDetail.Product_Id = sd.Product_Id) AS AgentCommission, CASE WHEN sd.ReturnQty IS NULL THEN 'False' WHEN sd.ReturnQty IS NOT NULL AND SD.ReturnQty > 0 THEN 'True' ELSE 'False' END AS Is_Return, Pm.Field5 AS TechnicalCommission, Pm.DeveloperCommission, CASE WHEN (SELECT COUNT(*) FROM Prj_Project_Team LEFT JOIN set_employeemaster ON Prj_Project_Team.Emp_Id = set_employeemaster.Emp_Id LEFT JOIN Prj_Project_Master ON Prj_Project_Master.Project_Id = Prj_Project_Team.Project_Id WHERE Prj_Project_Team.Project_Id = Pm.projectid AND Prj_Project_Team.Field5 = 'True' AND Set_EmployeeMaster.Field2 = 'False' AND Set_EmployeeMaster.IsActive = 'True' AND Set_EmployeeMaster.Emp_Type = 'On Role' AND Prj_Project_Master.isactive = 'True') > 0 THEN Pm.projectid ELSE 0 END AS projectid FROM Inv_SalesInvoiceHeader AS SH INNER JOIN Inv_SalesInvoiceDetail AS SD ON SH.Trans_id = SD.Invoice_no INNER JOIN Inv_ProductMaster AS PM ON sd.Product_Id = PM.ProductId INNER JOIN Set_LocationMaster ON Set_LocationMaster.Location_Id = sh.Location_Id WHERE SH.Company_Id = @Company_Id AND SH.Brand_Id = @Brand_Id AND SH.Location_Id = @Location_Id AND SH.SIFromTransType = 'S' AND SH.IsActive = 'True' AND sh.Post = 'True' AND SH.Trans_Id NOT IN (SELECT DISTINCT Inv_SalesCommission_Detail.Invoice_Id FROM Inv_SalesCommission_Detail WHERE Inv_SalesCommission_Detail.Field1 = @SIFromTransType AND Inv_SalesCommission_Detail.Voucher_No <> @Trans_Id) ORDER BY sh.Invoice_Date END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //added on 19-feb-2020
            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Ac_Voucher_Detail_SelectRow] @Company_Id int, @Brand_Id int, @Location_Id int, @Trans_Id int, @Voucher_No int, @Optype int AS BEGIN IF (@Optype = 6) BEGIN SELECT dbo.Ac_Voucher_Header.Company_Id, dbo.Ac_Voucher_Header.Brand_Id, dbo.Ac_Voucher_Header.Location_Id, dbo.Ac_Voucher_Header.Finance_Code, dbo.Ac_Voucher_Header.Voucher_No, dbo.Ac_Voucher_Header.Voucher_Date, dbo.Ac_Voucher_Header.Voucher_Type, dbo.Ac_Voucher_Header.Post, dbo.Ac_Voucher_Detail.Account_No, dbo.Ac_Voucher_Detail.Other_Account_No, dbo.Ac_Voucher_Detail.Foreign_Amount, dbo.Ac_Voucher_Detail.CreatedBy, dbo.Ac_Voucher_Detail.Ref_Id, dbo.Ac_Voucher_Detail.Ref_Type, dbo.Ac_Voucher_Detail.ModifiedBy, dbo.Ac_Voucher_Detail.Debit_Amount, dbo.Ac_Voucher_Detail.Credit_Amount, dbo.Ac_Voucher_Detail.Narration, dbo.Ac_Voucher_Header.IsActive, dbo.Ac_Voucher_Header.Trans_Id AS Header_Trans_Id, dbo.Ac_Voucher_Detail.Trans_Id AS Detail_Trans_Id, Ac_ChartOfAccount.Account_No AS ACNo, Ac_ChartOfAccount.AccountName, (dbo.Ac_Voucher_Detail.Debit_Amount - dbo.Ac_Voucher_Detail.Credit_Amount) AS BalanceAmount, Ac_Voucher_Detail.Field2 AS BankReconcilation, (SELECT Set_LocationMaster.Location_Name FROM Set_LocationMaster WHERE Set_LocationMaster.Location_Id = Ac_Voucher_Header.Location_Id) AS LocationName, (SELECT Ems_ContactMaster.Name FROM Ems_ContactMaster WHERE Ems_ContactMaster.Trans_Id = Ac_Voucher_Detail.Other_Account_No) AS Other_Account_Name, (SELECT Ems_ContactMaster.Field1 FROM Ems_ContactMaster WHERE Ems_ContactMaster.Trans_Id = Ac_Voucher_Detail.Other_Account_No) AS Email_Id, (SELECT Ems_ContactMaster.Field2 FROM Ems_ContactMaster WHERE Ems_ContactMaster.Trans_Id = Ac_Voucher_Detail.Other_Account_No) AS Phone_No FROM dbo.Ac_Voucher_Header INNER JOIN dbo.Ac_Voucher_Detail ON dbo.Ac_Voucher_Header.Trans_Id = dbo.Ac_Voucher_Detail.Voucher_No INNER JOIN Ac_ChartOfAccount ON Ac_Voucher_Detail.Account_no = Ac_ChartOfAccount.Trans_Id WHERE Ac_Voucher_Header.IsActive = 'True' AND Ac_Voucher_Header.ReconciledFromFinance = 'True' AND (Ac_Voucher_Header.Field3 = '' OR Ac_Voucher_Header.Field3 IS NULL OR Ac_Voucher_Header.Field3 = 'Approved') ORDER BY Ac_Voucher_Header.Trans_Id ASC END ELSE IF (@Optype = 1) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Voucher_No], [Serial_No], [Account_No], [Other_Account_No], [Ref_Id], [Ref_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [Debit_Amount], [Credit_Amount], [Narration], [CostCenter_ID], [Emp_Id], [Currency_Id], [Exchange_Rate], [Foreign_Amount], [CompanyCurrDebit], [CompanyCurrCredit], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Ac_Voucher_Detail WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'True' ORDER BY Trans_Id DESC END ELSE IF (@Optype = 2) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Voucher_No], [Serial_No], [Account_No], [Other_Account_No], [Ref_Id], [Ref_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [Debit_Amount], [Credit_Amount], [Narration], [CostCenter_ID], [Emp_Id], [Currency_Id], [Exchange_Rate], [Foreign_Amount], [CompanyCurrDebit], [CompanyCurrCredit], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Ac_Voucher_Detail WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'False' ORDER BY Trans_Id DESC END ELSE IF (@Optype = 3) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Voucher_No], [Serial_No], [Account_No], [Other_Account_No], [Ref_Id], [Ref_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [Debit_Amount], [Credit_Amount], [Narration], [CostCenter_ID], [Emp_Id], [Currency_Id], [Exchange_Rate], [Foreign_Amount], [CompanyCurrDebit], [CompanyCurrCredit], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Ac_Voucher_Detail WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'True' AND Trans_Id = @Trans_Id ORDER BY Trans_Id DESC END ELSE IF (@Optype = 4) BEGIN SELECT ACD.[Company_Id], ACD.[Brand_Id], ACD.[Location_Id], ACD.[Trans_Id], ACD.[Voucher_No], ACD.[Serial_No], ACD.[Account_No], ACD.[Other_Account_No], ACD.[Ref_Id], ACD.[Ref_Type], ACD.[Cheque_Issue_Date], ACD.[Cheque_Clear_Date], ACD.[Cheque_No], [Debit_Amount], [Credit_Amount], [Narration], [CostCenter_ID], ACD.[Emp_Id], ACD.[Currency_Id], ACD.[Exchange_Rate], [Foreign_Amount], [CompanyCurrDebit], [CompanyCurrCredit], ACD.[Field1], ACD.[Field2], ACD.[Field3], ACD.[Field4], ACD.[Field5], ACD.[Field6], ACD.[Field7], ACD.[IsActive], ACD.[CreatedBy], ACD.[CreatedDate], ACD.[ModifiedBy], ACD.[ModifiedDate], CASE WHEN SEM.Emp_Name IS NOT NULL THEN 'Employee' ELSE CASE WHEN PVM.Name IS NOT NULL THEN 'Vehicle' ELSE 'Supplier' END END Type FROM Ac_Voucher_Detail ACD LEFT JOIN Set_EmployeeMaster SEM ON SEM.Emp_Id = ACD.Other_Account_No LEFT JOIN Prj_VehicleMaster PVM ON PVM.Vehicle_Id = ACD.Other_Account_No WHERE ACD.Company_Id = @Company_Id AND ACD.IsActive = 'True' AND Voucher_No = @Voucher_No ORDER BY Trans_Id ASC END ELSE IF (@Optype = 5) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Voucher_No], [Serial_No], [Account_No], [Other_Account_No], [Ref_Id], [Ref_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [Debit_Amount], [Credit_Amount], [Narration], [CostCenter_ID], [Emp_Id], [Currency_Id], [Exchange_Rate], [Foreign_Amount], [CompanyCurrDebit], [CompanyCurrCredit], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Ac_Voucher_Detail WHERE IsActive = 'True' ORDER BY Trans_Id DESC END ELSE IF (@Optype = 7) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Voucher_No], [Serial_No], [Account_No], [Other_Account_No], [Ref_Id], [Ref_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [Debit_Amount], [Credit_Amount], [Narration], [CostCenter_ID], [Emp_Id], [Currency_Id], [Exchange_Rate], [Foreign_Amount], [CompanyCurrDebit], [CompanyCurrCredit], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Ac_Voucher_Detail ORDER BY Trans_Id DESC END ELSE IF (@Optype = 8) BEGIN SELECT dbo.Ac_Voucher_Detail.Trans_Id, dbo.Ac_Voucher_Detail.Company_Id, dbo.Ac_Voucher_Detail.Brand_Id, dbo.Ac_Voucher_Detail.Location_Id, dbo.Ac_Voucher_Header.Voucher_No, dbo.Ac_Voucher_Header.Voucher_Date, dbo.Ac_Voucher_Header.Voucher_Type, dbo.Ac_Voucher_Detail.Debit_Amount, dbo.Ac_Voucher_Detail.Credit_Amount, dbo.Ac_Voucher_Detail.Account_No, dbo.Ac_Voucher_Detail.Narration, dbo.Ac_Voucher_Header.ReconciledFromFinance, dbo.Ac_Voucher_Detail.Field3 AS ReconciledBy, dbo.Ac_Voucher_Detail.Field4 AS ReconciledDate FROM dbo.Ac_Voucher_Detail INNER JOIN dbo.Ac_Voucher_Header ON dbo.Ac_Voucher_Detail.Voucher_No = dbo.Ac_Voucher_Header.Trans_Id WHERE Ac_Voucher_Header.ReconciledFromFinance = 'True' AND Ac_Voucher_Header.IsActive = 'True' AND Ac_Voucher_Detail.Company_Id = @Company_Id AND Ac_Voucher_Detail.Brand_Id = @Brand_Id AND Ac_Voucher_Detail.Location_Id = @Location_Id END ELSE IF (@Optype = 9) BEGIN SELECT dbo.Ac_Voucher_Detail.Trans_Id, dbo.Ac_Voucher_Detail.Company_Id, dbo.Ac_Voucher_Detail.Brand_Id, dbo.Ac_Voucher_Detail.Location_Id, dbo.Ac_Voucher_Header.Voucher_No, dbo.Ac_Voucher_Header.Voucher_Date, dbo.Ac_Voucher_Header.Voucher_Type, dbo.Ac_Voucher_Detail.Debit_Amount, dbo.Ac_Voucher_Detail.Credit_Amount, dbo.Ac_Voucher_Detail.Account_No, dbo.Ac_Voucher_Detail.Narration, dbo.Ac_Voucher_Header.ReconciledFromFinance, dbo.Ac_Voucher_Detail.Field3 AS ReconciledBy, dbo.Ac_Voucher_Detail.Field4 AS ReconciledDate FROM dbo.Ac_Voucher_Detail INNER JOIN dbo.Ac_Voucher_Header ON dbo.Ac_Voucher_Detail.Voucher_No = dbo.Ac_Voucher_Header.Trans_Id WHERE Ac_Voucher_Header.ReconciledFromFinance = 'True' AND Ac_Voucher_Header.IsActive = 'True' AND Ac_Voucher_Detail.Company_Id = @Company_Id AND Ac_Voucher_Detail.Brand_Id = @Brand_Id AND Ac_Voucher_Detail.Location_Id = @Location_Id AND dbo.Ac_Voucher_Detail.Field3 = '' AND dbo.Ac_Voucher_Detail.Field4 = '' END ELSE IF (@Optype = 10) BEGIN SELECT dbo.Ac_Voucher_Detail.Trans_Id, dbo.Ac_Voucher_Detail.Company_Id, dbo.Ac_Voucher_Detail.Brand_Id, dbo.Ac_Voucher_Detail.Location_Id, dbo.Ac_Voucher_Header.Voucher_No, dbo.Ac_Voucher_Header.Voucher_Date, dbo.Ac_Voucher_Header.Voucher_Type, dbo.Ac_Voucher_Detail.Debit_Amount, dbo.Ac_Voucher_Detail.Credit_Amount, dbo.Ac_Voucher_Detail.Account_No, dbo.Ac_Voucher_Detail.Narration, dbo.Ac_Voucher_Header.ReconciledFromFinance, dbo.Ac_Voucher_Detail.Field3 AS ReconciledBy, dbo.Ac_Voucher_Detail.Field4 AS ReconciledDate FROM dbo.Ac_Voucher_Detail INNER JOIN dbo.Ac_Voucher_Header ON dbo.Ac_Voucher_Detail.Voucher_No = dbo.Ac_Voucher_Header.Trans_Id WHERE Ac_Voucher_Header.ReconciledFromFinance = 'True' AND Ac_Voucher_Header.IsActive = 'True' AND Ac_Voucher_Detail.Company_Id = @Company_Id AND Ac_Voucher_Detail.Brand_Id = @Brand_Id AND Ac_Voucher_Detail.Location_Id = @Location_Id AND dbo.Ac_Voucher_Detail.Field3 != '' AND dbo.Ac_Voucher_Detail.Field4 != '' END ELSE IF (@Optype = 11) BEGIN SELECT SUM(Debit_Amount) AS DebitTotal, SUM(Credit_Amount) AS CreditTotal FROM Ac_Voucher_Detail WHERE Voucher_No = @Voucher_No END ELSE IF (@Optype = 12) BEGIN SELECT ACD.[Company_Id], ACD.[Brand_Id], ACD.[Location_Id], ACD.[Trans_Id], ACD.[Voucher_No], ACD.[Serial_No], ACD.[Account_No], ACD.[Other_Account_No], ACD.[Ref_Id], ACD.[Ref_Type], ACD.[Cheque_Issue_Date], ACD.[Cheque_Clear_Date], ACD.[Cheque_No], [Debit_Amount], [Credit_Amount], [Narration], [CostCenter_ID], ACD.[Emp_Id], ACD.[Currency_Id], ACD.[Exchange_Rate], [Foreign_Amount], [CompanyCurrDebit], [CompanyCurrCredit], ACD.[Field1], ACD.[Field2], ACD.[Field3], ACD.[Field4], ACD.[Field5], ACD.[Field6], ACD.[Field7], ACD.[IsActive], ACD.[CreatedBy], ACD.[CreatedDate], ACD.[ModifiedBy], ACD.[ModifiedDate], CASE WHEN SEM.Emp_Name IS NOT NULL THEN 'Employee' ELSE CASE WHEN PVM.Name IS NOT NULL THEN 'Vehicle' ELSE 'Supplier' END END Type FROM Ac_Voucher_Detail ACD LEFT JOIN Set_EmployeeMaster SEM ON SEM.Emp_Id = ACD.Other_Account_No LEFT JOIN Prj_VehicleMaster PVM ON PVM.Vehicle_Id = ACD.Other_Account_No WHERE ACD.IsActive = 'True' AND Voucher_No = @Voucher_No ORDER BY Trans_Id ASC END IF (@Optype = 13) BEGIN SELECT ACD.[Company_Id], ACD.[Brand_Id], ACD.[Location_Id], ACD.[Trans_Id], ACD.[Voucher_No], ACD.[Serial_No], ACD.[Account_No], ACD.[Other_Account_No], ACD.[Ref_Id], ACD.[Ref_Type], ACD.[Cheque_Issue_Date], ACD.[Cheque_Clear_Date], ACD.[Cheque_No], [Debit_Amount], [Credit_Amount], [Narration], [CostCenter_ID], ACD.[Emp_Id], ACD.[Currency_Id], ACD.[Exchange_Rate], [Foreign_Amount], [CompanyCurrDebit], [CompanyCurrCredit], ACD.[Field1], ACD.[Field2], ACD.[Field3], ACD.[Field4], ACD.[Field5], ACD.[Field6], ACD.[Field7], ACD.[IsActive], ACD.[CreatedBy], ACD.[CreatedDate], ACD.[ModifiedBy], ACD.[ModifiedDate], Ac_ChartOfAccount.AccountName, (SELECT TOP 1 Field1 FROM dbo.Sys_Country_Currency WHERE currency_id = Set_LocationMaster.Field1) AS LDecimalCount, (SELECT TOP 1 Field1 FROM dbo.Sys_Country_Currency WHERE currency_id = acd.Currency_Id) AS FDecimalCount, (SELECT TOP 1 currency_code FROM dbo.Sys_CurrencyMaster WHERE currency_id = acd.Currency_Id) AS Currency_Code, Ems_ContactMaster.Name AS other_account_name, CASE WHEN SEM.Emp_Name IS NOT NULL THEN 'Employee' ELSE CASE WHEN PVM.Name IS NOT NULL THEN 'Vehicle' ELSE 'Supplier' END END Type FROM Ac_Voucher_Detail ACD LEFT JOIN set_locationmaster ON set_LocationMaster.Location_Id = ACD.Location_Id LEFT JOIN Set_EmployeeMaster SEM ON SEM.Emp_Id = ACD.Other_Account_No LEFT JOIN Prj_VehicleMaster PVM ON PVM.Vehicle_Id = ACD.Other_Account_No LEFT JOIN Ac_ChartOfAccount ON Ac_ChartOfAccount.Trans_Id = ACD.Account_No LEFT JOIN (SELECT * FROM ac_accountmaster WHERE Ref_Type = 'Supplier') Ac_AccountMaster ON Ac_AccountMaster.Trans_Id = ACD.Other_Account_No LEFT JOIN Ems_ContactMaster ON Ems_ContactMaster.Trans_Id = Ac_AccountMaster.Ref_Id WHERE ACD.IsActive = 'True' AND Voucher_No = @Voucher_No ORDER BY Trans_Id ASC END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Ac_Voucher_Header_SelectRow] @Company_Id int, @Brand_Id int, @Location_Id int, @Trans_Id int, @Voucher_No nvarchar(255), @FinancialYear int, @Optype int AS BEGIN IF (@Optype = 1) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Finance_Code], [Location_To], [Department_Id], [Ref_Id], [Ref_Type], [Inv_Number], [Inv_Date], [Voucher_No], [Voucher_Date], [Voucher_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [RefrenceNo], [Currency_Id], [Exchange_Rate], [Narration], [Post], [Cancel], [ReconciledFromFinance], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], (SELECT SUM(Ac_Voucher_Detail.Debit_Amount) FROM Ac_Voucher_Detail WHERE Ac_Voucher_Detail.Voucher_No = Ac_Voucher_Header.Trans_Id) AS DebitSum, (SELECT SUM(Ac_Voucher_Detail.Credit_Amount) FROM Ac_Voucher_Detail WHERE Ac_Voucher_Detail.Voucher_No = Ac_Voucher_Header.Trans_Id) AS CreditSum FROM Ac_Voucher_Header WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'True' AND ReconciledFromFinance = 'True' AND Finance_Code = @FinancialYear ORDER BY Voucher_Date DESC END ELSE IF (@Optype = 2) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Finance_Code], [Location_To], [Department_Id], [Ref_Id], [Ref_Type], [Inv_Number], [Inv_Date], [Voucher_No], [Voucher_Date], [Voucher_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [RefrenceNo], [Currency_Id], [Exchange_Rate], [Narration], [Post], [Cancel], [ReconciledFromFinance], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Ac_Voucher_Header WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'False' AND ReconciledFromFinance = 'True' AND Finance_Code = @FinancialYear ORDER BY Voucher_Date DESC END ELSE IF (@Optype = 3) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Finance_Code], [Location_To], [Department_Id], [Ref_Id], [Ref_Type], [Inv_Number], [Inv_Date], [Voucher_No], [Voucher_Date], [Voucher_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [RefrenceNo], [Currency_Id], [Exchange_Rate], [Narration], [Post], [Cancel], [ReconciledFromFinance], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], (SELECT Param_Value FROM Ac_Parameter_Location WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND Param_Name = 'PaymentApproval') AS Param_Value FROM Ac_Voucher_Header WHERE IsActive = 'True' AND Trans_Id = @Trans_Id END ELSE IF (@Optype = 4) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Finance_Code], [Location_To], [Department_Id], [Ref_Id], [Ref_Type], [Inv_Number], [Inv_Date], [Voucher_No], [Voucher_Date], [Voucher_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [RefrenceNo], [Currency_Id], [Exchange_Rate], [Narration], [Post], [Cancel], [ReconciledFromFinance], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Ac_Voucher_Header WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'True' AND ReconciledFromFinance = 'True' AND Voucher_No = @Voucher_No ORDER BY Trans_Id DESC END ELSE IF (@Optype = 5) BEGIN SELECT MAX(Trans_Id) FROM Ac_Voucher_Header END ELSE IF (@Optype = 6) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Finance_Code], [Location_To], [Department_Id], [Ref_Id], [Ref_Type], [Inv_Number], [Inv_Date], [Voucher_No], [Voucher_Date], [Voucher_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [RefrenceNo], [Currency_Id], [Exchange_Rate], [Narration], [Post], [Cancel], [ReconciledFromFinance], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Ac_Voucher_Header WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND Finance_Code = @FinancialYear END ELSE IF (@Optype = 7) BEGIN SELECT dbo.Ac_Voucher_Header.*, (CASE WHEN (SELECT DISTINCT TOP 1 Ac_Voucher_Detail.Other_Account_No FROM Ac_Voucher_Detail WHERE Ac_Voucher_Detail.Voucher_No = Ac_Voucher_Header.Trans_Id AND Ac_Voucher_Detail.Other_Account_No != 0) != 0 THEN (SELECT DISTINCT TOP 1 Ac_Voucher_Detail.Other_Account_No FROM Ac_Voucher_Detail WHERE Ac_Voucher_Detail.Voucher_No = Ac_Voucher_Header.Trans_Id AND Ac_Voucher_Detail.Other_Account_No != 0) ELSE 0 END) AS Other_Account FROM dbo.Ac_Voucher_Header WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'True' AND ReconciledFromFinance = 'True' AND Ac_Voucher_Header.Finance_Code = @FinancialYear END ELSE IF (@Optype = 8) BEGIN SELECT DISTINCT dbo.Ac_Voucher_Header.*, dbo.Ac_Voucher_Detail.Other_Account_No, dbo.Ems_ContactMaster.Name + '(' + Sys_CurrencyMaster.Currency_Name + ')' AS Name FROM dbo.Ac_Voucher_Header INNER JOIN dbo.Ac_Voucher_Detail ON dbo.Ac_Voucher_Header.Trans_Id = dbo.Ac_Voucher_Detail.Voucher_No INNER JOIN Ac_AccountMaster ON Ac_AccountMaster.Trans_Id = Ac_Voucher_Detail.Other_Account_No INNER JOIN Sys_CurrencyMaster ON Sys_CurrencyMaster.Currency_ID = Ac_AccountMaster.Currency_Id INNER JOIN dbo.Ems_ContactMaster ON Ac_AccountMaster.Ref_Id = dbo.Ems_ContactMaster.Trans_Id WHERE Ac_Voucher_Header.Company_Id = @Company_Id AND Ac_Voucher_Header.Brand_Id = @Brand_Id AND Ac_Voucher_Header.Location_Id = @Location_Id AND Ac_Voucher_Header.IsActive = 'True' AND Ac_Voucher_Header.ReconciledFromFinance = 'True' AND Ac_Voucher_Header.Finance_Code = @FinancialYear ORDER BY Ac_Voucher_Header.Voucher_Date DESC END ELSE IF (@Optype = 9) BEGIN DECLARE @customerAc_id int DECLARE @supplierAc_id int DECLARE @employeeAc_id int DECLARE @vechicleAc_id int DECLARE @employeeLoanAc_id int SET @customerAc_id = (SELECT TOP 1 Param_Value FROM Ac_Parameter WHERE Company_Id = @Company_Id AND Param_Name = 'Payment Vouchers' AND IsActive = 'true') SET @supplierAc_id = (SELECT TOP 1 Param_Value FROM Ac_Parameter WHERE Company_Id = @Company_Id AND Param_Name = 'Receive Vouchers' AND IsActive = 'true') SET @employeeAc_id = (SELECT TOP 1 Param_Value FROM Ac_Parameter WHERE Company_Id = @Company_Id AND Param_Name = 'Employee Account' AND IsActive = 'true') SET @vechicleAc_id = (SELECT TOP 1 Param_Value FROM Ac_Parameter WHERE Company_Id = @Company_Id AND Param_Name = 'Vehicle Account' AND IsActive = 'true') SET @employeeLoanAc_id = (SELECT TOP 1 Param_Value FROM Ac_Parameter WHERE Company_Id = @Company_Id AND Param_Name = 'Employee Loan Account' AND IsActive = 'true') SELECT dbo.Ac_Voucher_Header.*, STUFF((SELECT ',' + (CASE WHEN ac_voucher_detail.account_no = @customerAc_id OR ac_voucher_detail.account_no = @supplierAc_id THEN contact.contact_name WHEN ac_voucher_detail.account_no = @employeeAc_id OR ac_voucher_detail.account_no = @employeeLoanAc_id THEN Set_EmployeeMaster.Emp_Name WHEN ac_voucher_detail.account_no = @vechicleAc_id THEN Prj_VehicleMaster.Vehicle_No END) FROM (SELECT DISTINCT Ac_Voucher_Detail.Voucher_No, Ac_Voucher_Detail.Account_No, Ac_Voucher_Detail.Other_Account_No FROM Ac_Voucher_Detail WHERE Ac_Voucher_Detail.IsActive = 'true') Ac_Voucher_Detail LEFT JOIN (SELECT ac_accountMaster.Trans_Id, Ems_ContactMaster.Name + '(' + Sys_CurrencyMaster.Currency_Name + ')' AS contact_name FROM ac_accountMaster INNER JOIN Sys_CurrencyMaster ON Sys_CurrencyMaster.Currency_ID = Ac_AccountMaster.Currency_Id INNER JOIN ems_contactMaster ON ems_contactMaster.Trans_Id = ac_accountMaster.Ref_Id) CONTACT ON Ac_Voucher_Detail.Other_Account_No = CONTACT.Trans_Id LEFT JOIN Set_EmployeeMaster ON Set_EmployeeMaster.Emp_Id = Ac_Voucher_Detail.Other_Account_No LEFT JOIN Prj_VehicleMaster ON Prj_VehicleMaster.Vehicle_Id = Ac_Voucher_Detail.Other_Account_No WHERE Voucher_No = Ac_Voucher_Header.Trans_Id AND Other_Account_No > 0 FOR xml PATH ('')), 1, 1, '') AS Other_Account_Name, STUFF((SELECT ',' + CAST(Other_Account_No AS varchar) FROM (SELECT DISTINCT Ac_Voucher_Detail.Voucher_No, Ac_Voucher_Detail.Account_No, Ac_Voucher_Detail.Other_Account_No FROM Ac_Voucher_Detail WHERE Ac_Voucher_Detail.IsActive = 'true') Ac_Voucher_Detail WHERE Voucher_No = Ac_Voucher_Header.Trans_Id AND Other_Account_No > 0 FOR xml PATH ('')), 1, 1, '') AS Other_Account, (SELECT TOP 1 Ac_Voucher_Detail.account_no FROM Ac_Voucher_Detail WHERE Ac_Voucher_Detail.Voucher_No = Ac_Voucher_Header.Trans_Id AND Ac_Voucher_Detail.Other_Account_No != 0) AS account_no FROM dbo.Ac_Voucher_Header WHERE Ac_Voucher_Header.Company_Id = @Company_Id AND Ac_Voucher_Header.Brand_Id = @Brand_Id AND Ac_Voucher_Header.Location_Id = @Location_Id AND Ac_Voucher_Header.IsActive = 'True' AND Ac_Voucher_Header.ReconciledFromFinance = 'False' AND Ac_Voucher_Header.Finance_Code = @FinancialYear ORDER BY Voucher_Date DESC END ELSE IF (@Optype = 10) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Finance_Code], [Location_To], [Department_Id], [Ref_Id], [Ref_Type], [Inv_Number], [Inv_Date], [Voucher_No], [Voucher_Date], [Voucher_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [RefrenceNo], [Currency_Id], [Exchange_Rate], [Narration], [Post], [Cancel], [ReconciledFromFinance], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Ac_Voucher_Header WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'False' AND ReconciledFromFinance = 'False' AND Finance_Code = @FinancialYear ORDER BY Voucher_Date DESC END ELSE IF (@Optype = 11) BEGIN SELECT TOP 1 Voucher_Date AS Voucher_Date FROM Ac_Voucher_Header ORDER BY Voucher_Date END IF (@Optype = 12) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [Trans_Id], [Finance_Code], [Location_To], [Department_Id], [Ref_Id], [Ref_Type], [Inv_Number], [Inv_Date], [Voucher_No], [Voucher_Date], [Voucher_Type], [Cheque_Issue_Date], [Cheque_Clear_Date], [Cheque_No], [RefrenceNo], [Currency_Id], [Exchange_Rate], [Narration], [Post], [Cancel], [ReconciledFromFinance], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate] FROM Ac_Voucher_Header WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND IsActive = 'True' AND Finance_Code = @FinancialYear ORDER BY Voucher_Date DESC END IF (@Optype = 13) BEGIN SELECT dbo.Ac_Voucher_Header.Company_Id, dbo.Ac_Voucher_Header.Brand_Id, dbo.Ac_Voucher_Header.Location_Id, dbo.Ac_Voucher_Header.Trans_Id, dbo.Ac_Voucher_Header.Finance_Code, dbo.Ac_Voucher_Header.Voucher_No, dbo.Ac_Voucher_Header.Voucher_Date, dbo.Ac_Voucher_Header.Post, dbo.Ac_Voucher_Header.Cancel, dbo.Ac_Voucher_Header.ReconciledFromFinance, dbo.Ac_Voucher_Header.IsActive, dbo.Ac_Voucher_Detail.Account_No FROM dbo.Ac_Voucher_Header INNER JOIN dbo.Ac_Voucher_Detail ON dbo.Ac_Voucher_Header.Trans_Id = dbo.Ac_Voucher_Detail.Voucher_No END IF (@Optype = 14) BEGIN SELECT * FROM Ac_Voucher_Header END ELSE IF (@Optype = 15) BEGIN SELECT AVH.[Company_Id], AVH.[Brand_Id], AVH.[Location_Id], AVH.[Trans_Id], AVH.[Finance_Code], AVH.[Location_To], AVH.[Department_Id], AVH.[Ref_Id], AVH.[Ref_Type], AVH.[Inv_Number], AVH.[Inv_Date], AVH.[Voucher_No], AVH.[Voucher_Date], AVH.[Voucher_Type], AVH.[Cheque_Issue_Date], AVH.[Cheque_Clear_Date], AVH.[Cheque_No], AVH.[RefrenceNo], AVH.[Currency_Id], AVH.[Exchange_Rate], AVH.[Narration], AVH.[Post], AVH.[Cancel], AVH.[ReconciledFromFinance], AVH.[Field1], AVH.[Field2], AVH.[Field3], AVH.[Field4], AVH.[Field5], AVH.[Field6], AVH.[Field7], AVH.[IsActive], AVH.[CreatedBy], AVH.[CreatedDate], AVH.[ModifiedBy], AVH.[ModifiedDate], '' AS Param_Value, Set_LocationMaster.Location_Name FROM Ac_Voucher_Header AVH LEFT JOIN set_locationmaster ON Set_LocationMaster.Location_Id = AVH.Location_Id WHERE Trans_Id = @Trans_Id END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "create Procedure [dbo].[sp_Inv_StockBatchMaster_Delete_ByRefTypeAndId] @Company_Id int, @Brand_Id int, @Location_Id int, @TransType Nvarchar(2), @TransTypeId int, @ReferenceID int output As Begin DELETE FROM Inv_StockBatchMaster Where [Company_Id] = @Company_Id and [Brand_Id] = @Brand_Id and [Location_Id] = @Location_Id and [TransType] = @TransType and [TransTypeId] = @TransTypeId select @ReferenceID=@@ROWCOUNT return @ReferenceID End";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //29-feb-2020
            try
            {
                cmd.CommandText = "ALTER PROC [dbo].[sp_Inv_SalesQuotationHeader_By_PageIndex] @PageIndex int, @PageSize int, @SortExpr nvarchar(50), @SortDire nvarchar(50), @WhereClause nvarchar(max) AS BEGIN DECLARE @StartRowIndex int DECLARE @EndRowIndex int DECLARE @SqlTbl nvarchar(max) IF (@WhereClause = '') BEGIN SET @WhereClause = '1=1' END SET @StartRowIndex = (@PageIndex * @PageSize) + 1; SET @EndRowIndex = (@PageIndex + 1) * @PageSize; SET @SqlTbl = ' Declare @SortExpression nvarchar(50)=''' + @SortExpr + '''; declare @SortDirection nvarchar(10)=''' + @SortDire + '''; Select * from (Select ROW_NUMBER() over ( order by case when @SortExpression= ''SQuotation_No'' and @SortDirection = ''ASC'' then SQuotation_No end asc, case when @SortExpression= ''SQuotation_No'' and @SortDirection = ''DESC'' then SQuotation_No end desc, case when @SortExpression= ''Quotation_Date'' and @SortDirection = ''ASC'' then Quotation_Date end asc, case when @SortExpression= ''Quotation_Date'' and @SortDirection = ''DESC'' then Quotation_Date end desc, case when @SortExpression= ''InquiryNo'' and @SortDirection = ''ASC'' then InquiryNo end asc, case when @SortExpression= ''InquiryNo'' and @SortDirection = ''DESC'' then InquiryNo end desc, case when @SortExpression= ''OrderCompletionDate'' and @SortDirection = ''ASC'' then OrderCompletionDate end asc, case when @SortExpression= ''OrderCompletionDate'' and @SortDirection = ''DESC'' then OrderCompletionDate end desc, case when @SortExpression= ''EmployeeName'' and @SortDirection = ''ASC'' then EmployeeName end asc, case when @SortExpression= ''EmployeeName'' and @SortDirection = ''DESC'' then EmployeeName end desc, case when @SortExpression= ''Customer_Name'' and @SortDirection = ''ASC'' then Customer_Name end asc, case when @SortExpression= ''Customer_Name'' and @SortDirection = ''DESC'' then Customer_Name end desc, case when @SortExpression= ''TotalAmount'' and @SortDirection = ''ASC'' then TotalAmount end asc, case when @SortExpression= ''TotalAmount'' and @SortDirection = ''DESC'' then TotalAmount end desc ) as RowNumber, COUNT(*) over() as TotalCount, SOH.* from ( SELECT SI.[Location_Id], SI.[currency_Id], SI.[SQuotation_Id], SI.[SQuotation_No], SI.[Quotation_Date], SI.[SInquiry_No], Inv_SalesInquiryHeader.SInquiryNo AS InquiryNo, si.field7 AS OrderCompletionDate, dbo.Set_EmployeeMaster.Emp_Name AS EmployeeName, Ems_ContactMaster.Name AS Customer_Name, (SI.Amount + SI.TaxValue - SI.DiscountValue) AS TotalAmount, SI.IsActive, SI.Status, SI.Field4,SI.condition2,SI.condition3, SI.[CreatedBy],Inv_Product_CategoryMaster.Category_Name as CategoryName FROM Inv_SalesQuotationHeader AS SI LEFT JOIN Set_EmployeeMaster ON SI.Emp_Id = dbo.Set_EmployeeMaster.Emp_Id LEFT JOIN Inv_SalesInquiryHeader ON SI.SInquiry_No = Inv_SalesInquiryHeader.SInquiryID LEFT JOIN Ems_ContactMaster ON Ems_ContactMaster.Trans_Id = Inv_SalesInquiryHeader.Customer_Id left join Inv_Product_CategoryMaster on Inv_Product_CategoryMaster.Category_Id = SI.Field5)SOH where ' + @WhereClause + ' ) SOH1 Where RowNumber >=' + CAST(@StartRowIndex AS varchar) + ' and RowNumber <=' + CAST(@EndRowIndex AS varchar) EXECUTE SP_ExecuteSQL @SqlTbl END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //13-Mar-2020
            try
            {
                cmd.CommandText = "CREATE TABLE [dbo].[Inv_PhysicalHeaderLogs]( [trans_id] [int] IDENTITY(1,1) NOT NULL, [ph_no] [int] NOT NULL, [product_id] [int] NOT NULL, [phy_qty] [decimal](18, 0) NOT NULL, [serial_no] [nvarchar](50) NULL, [rack_id] [int] NULL, [isPost] [bit] NULL, [isActive] [bit] NULL, [created_by] [varchar](50) NOT NULL, [createdDate] [datetime] NOT NULL, [modified_by] [varchar](50) NULL, [modifiedDate] [datetime] NULL, CONSTRAINT [PK_Inv_PhysicalHeaderLogs] PRIMARY KEY CLUSTERED ( [trans_id] ASC )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] ) ON [PRIMARY]";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "CREATE NONCLUSTERED INDEX [IX_Inv_PhysicalHeaderLogs] ON [dbo].[Inv_PhysicalHeaderLogs] ( [ph_no] ASC, [product_id] ASC, [serial_no] ASC )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER TABLE [dbo].[Inv_PhysicalHeaderLogs]  WITH CHECK ADD  CONSTRAINT [FK_Inv_PhysicalHeaderLogs_Inv_PhysicalHeaderLogs] FOREIGN KEY([trans_id]) REFERENCES[dbo].[Inv_PhysicalHeaderLogs]([trans_id])";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                cmd.CommandText = "ALTER TABLE [dbo].[Inv_PhysicalHeaderLogs] CHECK CONSTRAINT [FK_Inv_PhysicalHeaderLogs_Inv_PhysicalHeaderLogs]";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //added by jitendra upadhyay on 18-03-2020

            //start
            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Inv_StockDetail_SelectRow] @Company_Id int, @Brand_Id int, @Location_Id int, @Finance_Year_Id int, @ProductId int, @optype int AS BEGIN IF (@optype = 5) BEGIN SELECT Inv_StockDetail.*, Inv_ProductMaster.ProductCode, Inv_ProductMaster.SalesPrice1, Inv_ProductMaster.EProductName, Inv_ModelMaster.Model_No, (SELECT Set_LocationMaster.Location_Name FROM Set_LocationMaster WHERE Set_LocationMaster.Location_Id = Inv_StockDetail.Location_Id) AS LocationName, (SELECT Inv_UnitMaster.Unit_Name FROM Inv_UnitMaster WHERE Inv_UnitMaster.Unit_Id = Inv_ProductMaster.UnitId) AS Unitname, (SELECT Set_LocationMaster.Field1 FROM Set_LocationMaster WHERE Set_LocationMaster.Location_Id = Inv_StockDetail.Location_Id) AS CurrencyID, (CAST(Inv_StockDetail.Quantity AS float) * CAST(Inv_StockDetail.Field1 AS float)) AS LineTotal FROM Inv_StockDetail LEFT JOIN Inv_ProductMaster ON Inv_StockDetail.ProductId = Inv_ProductMaster.ProductId left join Inv_ModelMaster on Inv_ModelMaster.Trans_Id = Inv_ProductMaster.ModelNo WHERE Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.Brand_Id = @Brand_Id AND Inv_StockDetail.Finance_Year_Id = @Finance_Year_Id END IF (@optype = 1) BEGIN SELECT [Company_Id], [Brand_Id], [Location_Id], [ProductId], [OpeningBalance], [RackID], [Quantity], [Minimum_Qty], [Maximum_Qty], [ReserveQty], [DamageQty], [BlockedQty], [OrderQty], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], (CAST(Inv_StockDetail.Quantity AS float) * CAST(Inv_StockDetail.Field1 AS float)) AS LineTotal FROM Inv_StockDetail END IF (@optype = 2) BEGIN SELECT SUBSTRING(Set_LocationMaster.Location_Name, 0, 20) AS Short_Location_Name, Set_LocationMaster.Location_Name, Inv_StockDetail.*, (CAST(Inv_StockDetail.Quantity AS float) * CAST(Inv_StockDetail.Field1 AS float)) AS LineTotal FROM Inv_StockDetail INNER JOIN Set_LocationMaster ON Inv_StockDetail.Location_Id = Set_LocationMaster.Location_Id WHERE Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.ProductId = @ProductId AND Inv_StockDetail.Finance_Year_Id = @Finance_Year_Id END IF (@optype = 3) BEGIN SELECT Inv_StockDetail.*, Inv_ProductMaster.SalesPrice1, Inv_ProductMaster.ProductCode, Inv_ProductMaster.EProductName, Inv_ModelMaster.Model_No, (SELECT Set_LocationMaster.Location_Name FROM Set_LocationMaster WHERE Set_LocationMaster.Location_Id = Inv_StockDetail.Location_Id) AS LocationName, (SELECT Inv_UnitMaster.Unit_Name FROM Inv_UnitMaster WHERE Inv_UnitMaster.Unit_Id = Inv_ProductMaster.UnitId) AS Unitname, (SELECT Set_LocationMaster.Field1 FROM Set_LocationMaster WHERE Set_LocationMaster.Location_Id = Inv_StockDetail.Location_Id) AS CurrencyID, (CAST(Inv_StockDetail.Quantity AS float) * CAST(Inv_StockDetail.Field1 AS float)) AS LineTotal FROM Inv_StockDetail LEFT JOIN Inv_ProductMaster ON Inv_StockDetail.ProductId = Inv_ProductMaster.ProductId left join Inv_ModelMaster on Inv_ModelMaster.Trans_Id = Inv_ProductMaster.ModelNo WHERE Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.Brand_Id = @Brand_Id AND Inv_StockDetail.Location_Id = @Location_Id AND Inv_StockDetail.Finance_Year_Id = @Finance_Year_Id END IF (@optype = 4) BEGIN SELECT Inv_Product_CompanyBrand.*, Inv_ProductMaster.ProductCode, Inv_ProductMaster.EProductName, (CASE WHEN Inv_StockDetail.ProductId <> '' THEN 0 ELSE 1 END) AS InStock, Inv_StockDetail.Quantity AS SysQty, Inv_StockDetail.OpeningBalance AS Quantity, Inv_StockDetail.Location_Id, Inv_StockDetail.Field1 AS UnitPrice, (SELECT Set_LocationMaster.Location_Name FROM Set_LocationMaster WHERE Set_LocationMaster.Location_Id = Inv_StockDetail.Location_Id) AS LocationName, (SELECT Inv_UnitMaster.Unit_Name FROM Inv_UnitMaster WHERE Inv_UnitMaster.Unit_Id = Inv_ProductMaster.UnitId) AS Unitname, Inv_ProductMaster.UnitId, (SELECT Set_LocationMaster.Field1 FROM Set_LocationMaster WHERE Set_LocationMaster.Location_Id = Inv_StockDetail.Location_Id) AS CurrencyID, CASE WHEN Inv_StockDetail.Quantity IS NULL THEN CAST('True' AS bit) ELSE CAST('False' AS bit) END AS txtQtyVisibleStatus, CASE WHEN Inv_StockDetail.Quantity IS NULL THEN CAST('False' AS bit) ELSE CAST('True' AS bit) END AS lblQtyVisibleStatus, CASE WHEN Inv_StockDetail.Quantity IS NULL AND Inv_ProductMaster.Maintainstock = 'SNO' THEN CAST('False' AS bit) ELSE CAST('True' AS bit) END AS txtQtyEnableStatus, CASE WHEN Inv_StockDetail.Quantity IS NOT NULL THEN CAST('False' AS bit) WHEN Inv_StockDetail.Quantity IS NULL AND Inv_ProductMaster.MaintainStock = 'SNO' THEN CAST('True' AS bit) ELSE CAST('False' AS bit) END AS lnkserialbtnVisibleStatus, (CAST(Inv_StockDetail.Quantity AS float) * CAST(Inv_StockDetail.Field1 AS float)) AS LineTotal FROM Inv_Product_CompanyBrand INNER JOIN Inv_ProductMaster ON Inv_Product_CompanyBrand.ProductId = Inv_ProductMaster.ProductId AND Inv_ProductMaster.IsActive = 'True' LEFT JOIN Inv_StockDetail ON Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.Brand_Id = @Brand_Id AND Inv_StockDetail.Location_Id = @Location_Id AND Inv_Product_CompanyBrand.ProductId = Inv_StockDetail.ProductId AND inv_stockDetail.Finance_Year_Id = @Finance_Year_Id WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id AND Inv_Product_CompanyBrand.BrandId = @Brand_Id AND Inv_ProductMaster.ItemType = 'S' AND Inv_ProductMaster.Field1 = ' ' AND Inv_ProductMaster.Field3 = 'True' END IF (@optype = 6) BEGIN SELECT Inv_StockDetail.Field1, Inv_StockDetail.Field2, Inv_StockDetail.Quantity, Inv_StockDetail.OpeningBalance FROM Inv_StockDetail WHERE Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id AND ProductId = @ProductId AND Finance_Year_Id = @Finance_Year_Id END IF (@optype = 7) BEGIN SELECT Inv_StockDetail.ProductId FROM Inv_StockDetail WHERE ProductId = @ProductId END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //end

            //start - 18-Mar-2020
            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Inv_SalesDeliveryVoucher_SelectRow_Report] @Company_Id int, @Brand_Id int, @Location_Id int, @Trans_Id int AS BEGIN SELECT Inv_SalesDeliveryVoucher_Header.Company_Id, Inv_SalesDeliveryVoucher_Header.Brand_Id, Inv_SalesDeliveryVoucher_Header.Location_Id, Inv_SalesDeliveryVoucher_Header.Trans_Id, Inv_SalesDeliveryVoucher_Header.Voucher_No, Inv_SalesDeliveryVoucher_Header.Voucher_Date, Inv_SalesDeliveryVoucher_Header.SalesOrder_Id, Inv_SalesDeliveryVoucher_Header.Customer_Id, Inv_SalesDeliveryVoucher_Header.Salesperson_Id, Inv_SalesDeliveryVoucher_Header.Post, Inv_SalesDeliveryVoucher_Header.Remarks, Inv_SalesDeliveryVoucher_Header.Field1, Inv_SalesDeliveryVoucher_Header.Field2, Inv_SalesDeliveryVoucher_Header.Field3, Inv_SalesDeliveryVoucher_Header.Field4, Inv_SalesDeliveryVoucher_Header.Field5, Inv_SalesDeliveryVoucher_Header.Field6, Inv_SalesDeliveryVoucher_Header.Field7, Inv_SalesDeliveryVoucher_Header.IsActive, Inv_SalesDeliveryVoucher_Header.CreatedBy, Inv_SalesDeliveryVoucher_Header.CreatedDate, Inv_SalesDeliveryVoucher_Header.ModifiedBy, Inv_SalesDeliveryVoucher_Header.ModifiedDate, Inv_SalesOrderHeader.SalesOrderNo AS SalesOrderNo, Inv_SalesOrderHeader.SalesOrderDate AS SalesOrderDate, Set_EmployeeMaster.Emp_Name AS Emp_Name, Ems_ContactMaster.Name AS CustomerName, cm.Name as contactPerson, Inv_SalesDeliveryVoucher_Detail.Serial_No, Inv_ProductMaster.ProductCode, Inv_ProductMaster.EProductName, Inv_UnitMaster.Unit_Name, Inv_SalesDeliveryVoucher_Detail.Order_Qty, Inv_SalesDeliveryVoucher_Detail.Delievered_Qty, Set_LocationMaster.Location_Name AS HeaderName, Set_LocationMaster.Location_Name_L AS HeaderName_L, Set_LocationMaster.Field2 AS Imageurl, '~\\CompanyResource\\' + cast(Set_LocationMaster.Location_Id as varchar) + '\\' + Set_LocationMaster.Field2 as cmpLogoPath, Set_AddressMaster.Address, Set_AddressMaster.Street, Set_AddressMaster.Block, Set_AddressMaster.Avenue, (CASE WHEN ISNUMERIC(Set_AddressMaster.StateId) = 1 THEN Sys_StateMaster.State_Name ELSE Set_AddressMaster.StateId END) AS StateId, (CASE WHEN ISNUMERIC(Set_AddressMaster.cityid) = 1 THEN Sys_CityMaster.City_Name ELSE Set_AddressMaster.CityId END) AS CityId, Set_AddressMaster.CountryId, Set_AddressMaster.PinCode, Set_AddressMaster.PhoneNo1, Set_AddressMaster.PhoneNo2, Set_AddressMaster.MobileNo1, Set_AddressMaster.MobileNo2, Set_AddressMaster.FaxNo, Set_AddressMaster.WebSite, dbo.[udf_GetAddressById](Inv_SalesOrderHeader.shipToAddressId) as shipping_address, (dbo.udf_GetAddressByRefTypeAndId('Customer',Inv_SalesDeliveryVoucher_Header.Customer_Id)) as cust_sales_address, (select top 1 isnull(PhoneNo1,'') + ',' + isnull(MobileNo1,'') FROM dbo.Set_AddressMaster inner join Set_AddressChild on Set_AddressChild.Ref_Id=Set_AddressMaster.Trans_Id WHERE Set_AddressChild.Add_Ref_Id = Inv_SalesDeliveryVoucher_Header.Customer_Id and Set_AddressChild.Add_Type='Customer') as cust_phone, (select top 1 isnull(FaxNo,'') FROM dbo.Set_AddressMaster inner join Set_AddressChild on Set_AddressChild.Ref_Id=Set_AddressMaster.Trans_Id WHERE Set_AddressChild.Add_Ref_Id = Inv_SalesDeliveryVoucher_Header.Customer_Id and Set_AddressChild.Add_Type='Customer') as cust_fax FROM Inv_SalesDeliveryVoucher_Header INNER JOIN Inv_SalesDeliveryVoucher_Detail ON Inv_SalesDeliveryVoucher_Header.Trans_Id = Inv_SalesDeliveryVoucher_Detail.Voucher_No INNER JOIN Inv_SalesOrderHeader ON Inv_SalesDeliveryVoucher_Header.SalesOrder_Id = Inv_SalesOrderHeader.Trans_Id left join Ems_ContactMaster cm on cm.Trans_Id=Inv_SalesOrderHeader.ContactPerson_Id INNER JOIN Set_EmployeeMaster ON Inv_SalesDeliveryVoucher_Header.Salesperson_Id = Set_EmployeeMaster.Emp_Id INNER JOIN Ems_ContactMaster ON Inv_SalesDeliveryVoucher_Header.Customer_Id = Ems_ContactMaster.Trans_Id INNER JOIN Inv_ProductMaster ON Inv_SalesDeliveryVoucher_Detail.Product_Id = Inv_ProductMaster.ProductId INNER JOIN Inv_UnitMaster ON Inv_SalesDeliveryVoucher_Detail.Unit_Id = Inv_UnitMaster.Unit_Id left join Set_LocationMaster on set_locationmaster.location_id=Inv_SalesDeliveryVoucher_Header.Location_Id left JOIN Set_AddressChild ON (Set_LocationMaster.Location_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Location') left JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id left join Sys_StateMaster ON Sys_StateMaster.Trans_Id = CASE WHEN ISNUMERIC(Set_AddressMaster.StateId) = 1 THEN Set_AddressMaster.StateId ELSE 0 END LEFT JOIN Sys_CityMaster ON Sys_CityMaster.Trans_Id = CASE WHEN ISNUMERIC(Set_AddressMaster.CityId) = 1 THEN Set_AddressMaster.CityId ELSE 0 END WHERE Inv_SalesDeliveryVoucher_Header.Company_Id = @Company_Id AND Inv_SalesDeliveryVoucher_Header.Trans_Id = @Trans_Id END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //end
            //added on 06-Apr-2020
            try
            {
                cmd.CommandText = "ALTER PROCEDURE [dbo].[sp_Inv_ProductMaster_SelectRow_by_pageNo] @Company_Id int, @Brand_Id int, @ProductId int, @ProductCode nvarchar(250), @Optype int, @Finance_Year_Id int, @Location_Id int, @PageSize int, @PageNo int, @mBrand_id int, @category_id int, @disContinueOnly bit, @searchProductIdSeries nvarchar(max), @searchField nvarchar(max), @searchOperator bit, @searchValue nvarchar(50), @isRecCountOnly bit, @IsActive bit AS BEGIN DECLARE @paramSalesPriceVal AS int SET @paramSalesPriceVal = (SELECT ISNULL(ParameterValue, 0) FROM Inv_ParameterMaster WHERE ParameterName = 'Sales Price' AND Company_Id = @Company_Id AND Brand_Id = @Brand_Id AND Location_Id = @Location_Id) SET NOCOUNT ON; IF (@Optype = 1) BEGIN SELECT Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, SUBSTRING(PM.EProductName, 0, 10) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.DimDepth, pm.HScode, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.DimLenth, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, pm.IsActive, (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) AS StockQty FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id END IF (@Optype = 2) BEGIN DECLARE @Where nvarchar(max) DECLARE @singleQuote char SET @singleQuote = CHAR(39) DECLARE @Command nvarchar(max) DECLARE @Projection nvarchar(max) IF (@PageSize = 0) SET @PageSize = 10 IF (@IsActive = 'true') SET @Where = 'pm.IsActive = ' + @singleQuote + 'true' + @singleQuote IF (@IsActive = 'false') SET @Where = 'pm.IsActive = ' + @singleQuote + 'false' + @singleQuote IF (@Company_Id <> '0') SET @Where = @Where + ' and Inv_Product_CompanyBrand.Company_Id=' + CAST(@Company_Id AS varchar) IF (@Brand_Id <> '0') SET @Where = @Where + ' and Inv_Product_CompanyBrand.BrandId=' + CAST(@Brand_Id AS varchar) IF (@mBrand_id <> '0') SET @Where = @Where + ' and PM.ProductId in (SELECT dbo.Inv_Product_Brand.ProductId from dbo.Inv_Product_Brand where Company_Id=' + CAST(@Company_Id AS varchar) + ' and Brand_Id=' + CAST(@Brand_Id AS varchar) + ' and PBrandId=' + CAST(@mBrand_id AS varchar) + ')' IF (@category_id <> '0') SET @Where = @Where + ' and PM.ProductId in (SELECT dbo.Inv_Product_Category.ProductId from dbo.Inv_Product_Category where dbo.Inv_Product_Category.Company_Id=' + CAST(@Company_Id AS varchar) + ' and dbo.Inv_Product_Category.Brand_Id=' + CAST(@Brand_Id AS varchar) + ' and dbo.Inv_Product_Category.CategoryId=' + CAST(@category_id AS varchar) + ')' IF (LTRIM(@searchField) <> '') BEGIN SET @Where = @Where + ' and ' + @searchField END IF (@searchProductIdSeries <> ' ') SET @Where = @Where + ' and PM.ProductId=' + CAST(@ProductId AS varchar) IF (@ProductCode <> ' ') SET @Where = @Where + ' and PM.ProductCode=' + @ProductCode IF (@disContinueOnly = 'true') SET @Where = @Where + ' and PM.Field3=' + @singleQuote + ' ' + @singleQuote IF (@isRecCountOnly = 'true') SET @Projection = ' Select count(Pm.ProductId)as totalRec ' ELSE BEGIN SET @Projection = 'SELECT ROW_NUMBER() OVER (ORDER BY pm.ProductId DESC) AS RowNumber, Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, SUBSTRING(PM.EProductName, 0, 120) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.HScode, pm.DimDepth, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, inv_product_Image.Field1 AS PImage, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, CASE WHEN ' + CAST(@paramSalesPriceVal AS varchar) + '= 1 THEN cast(Pm.SalesPrice1 as varchar) WHEN ' + CAST(@paramSalesPriceVal AS varchar) + '= 2 THEN cast(Pm.SalesPrice2 as varchar) WHEN ' + CAST(@paramSalesPriceVal AS varchar) + '= 3 THEN cast(Pm.SalesPrice3 as varchar) ELSE cast(' + CAST(@paramSalesPriceVal AS varchar) + ' as varchar)' + ' END AS ProductSalesPrice, CASE WHEN PM.ItemType = ' + @singleQuote + 'S' + @singleQuote + ' THEN ' + @singleQuote + 'Stockable' + @singleQuote + ' WHEN PM.ItemType = ' + @singleQuote + 'NS' + @singleQuote + ' THEN ' + @singleQuote + 'Non Stockable' + @singleQuote + ' WHEN PM.ItemType = ' + @singleQuote + 'A' + @singleQuote + ' THEN ' + @singleQuote + 'Assemble' + @singleQuote + ' WHEN PM.ItemType = ' + @singleQuote + 'K' + @singleQuote + ' THEN ' + @singleQuote + 'Kit' + @singleQuote + ' END AS ItemTypeValue, CASE WHEN EMP_CREATED.User_Id = ''0'' THEN ' + @singleQuote + 'Superadmin' + @singleQuote + ' ELSE SUBSTRING(EMP_CREATED.Emp_Name, 0, 17) END AS CreatedEmpName, CASE WHEN EMP_MODIFIED.User_Id = ''0'' THEN ' + @singleQuote + 'Superadmin' + @singleQuote + ' ELSE SUBSTRING(EMP_MODIFIED.Emp_Name, 0, 17) END AS ModifiedEmpName, CAST(isnull((SELECT isnull(inv_stockdetail.quantity,0) FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = ' + CAST(@Company_Id AS varchar) + ' AND inv_stockdetail.Brand_Id = ' + CAST(@Brand_Id AS varchar) + ' AND inv_stockdetail.Location_Id = ' + CAST(@Location_Id AS varchar) + ' AND inv_stockdetail.ProductId = PM.ProductId AND Inv_StockDetail.Finance_Year_Id = ' + CAST(@Finance_Year_Id AS varchar) + '),0) AS numeric(18, 3)) AS StockQty, Inv_UnitMaster.Unit_Name AS UnitName, Inv_ModelMaster.Model_No AS ModelNo, (case when convert(int, (ROW_NUMBER() OVER (Order by (select 0)) % ' + CAST(@PageSize AS varchar) + '))=0 then 0 else 1 end) + convert(int, (ROW_NUMBER() OVER (Order by (select 0)) / ' + CAST(@PageSize AS varchar) + ')) as PageNo' END SET @Command = @Projection + ' FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId LEFT JOIN (SELECT Set_UserMaster.Emp_Id,set_employeemaster.Emp_Name,Set_UserMaster.User_Id FROM Set_UserMaster INNER JOIN set_employeemaster ON Set_UserMaster.Emp_Id=set_employeemaster.Emp_Id)EMP_CREATED ON PM.CreatedBy = EMP_CREATED.User_Id LEFT JOIN (SELECT Set_UserMaster.Emp_Id,set_employeemaster.Emp_Name,Set_UserMaster.User_Id FROM Set_UserMaster INNER JOIN set_employeemaster ON Set_UserMaster.Emp_Id=set_employeemaster.Emp_Id)EMP_MODIFIED ON PM.ModifiedBy = EMP_MODIFIED.User_Id LEFT JOIN Inv_UnitMaster ON Inv_UnitMaster.Unit_Id = Pm.UnitId LEFT JOIN inv_product_Image ON inv_product_Image.ProductId = Pm.ProductId left join Inv_ModelMaster on Inv_ModelMaster.Trans_Id = Pm.ModelNo' + ' Where ' + @Where SET @Command = 'SELECT * FROM (' + @Command + ')product_new' IF (@PageNo > 0 AND @isRecCountOnly = 0) SET @Command = @Command + ' where case when ' + CAST(@PageNo AS varchar) + '=0 then 1 else pageNo end = case when ' + CAST(@PageNo AS varchar) + '=0 then 1 else ' + CAST(@PageNo AS varchar) + ' end' IF (@isRecCountOnly = 0) SET @Command = @Command + ' ORDER BY ProductId DESC' EXECUTE SP_ExecuteSQL @Command END IF (@Optype = 3) BEGIN SELECT Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, SUBSTRING(PM.EProductName, 0, 10) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.HScode, pm.DimDepth, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.WeighUnitID, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.DimLenth, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, CASE WHEN (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) IS NULL THEN 0 ELSE (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) END AS StockQty FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id AND Inv_Product_CompanyBrand.BrandId = @Brand_Id AND pm.ProductId = @ProductId ORDER BY ProductId DESC END IF (@Optype = 4) BEGIN SELECT Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, (SUBSTRING(PM.EProductName, 0, 10)) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.HScode, pm.DimDepth, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.DimLenth, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, Pm.IsActive, CASE WHEN (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) IS NULL THEN 0 ELSE (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) END AS StockQty FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id AND Inv_Product_CompanyBrand.BrandId = @Brand_Id AND ProductCode = @ProductCode ORDER BY ProductId DESC END IF (@Optype = 5) BEGIN SELECT ROW_NUMBER() OVER (ORDER BY pm.ProductId DESC) AS RowNumber, Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, (SUBSTRING(PM.EProductName, 0, 10)) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.HScode, pm.DimDepth, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.DimLenth, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, CASE WHEN PM.ItemType = 'S' THEN 'Stockable' WHEN PM.ItemType = 'NS' THEN 'Non Stockable' WHEN PM.ItemType = 'A' THEN 'Assemble' WHEN PM.ItemType = 'K' THEN 'Kit' END AS ItemTypeValue, (SELECT Inv_UnitMaster.Unit_Name FROM Inv_UnitMaster WHERE Inv_UnitMaster.Unit_Id = Pm.UnitId) AS UnitName, CASE WHEN (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) IS NULL THEN 0 ELSE (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = PM.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) END AS StockQty, (SELECT Set_EmployeeMaster.Emp_Name FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = pm.Company_Id AND Set_EmployeeMaster.Emp_Code = pm.CreatedBy) AS CreatedEmpName, (SELECT Set_EmployeeMaster.Emp_Name FROM Set_EmployeeMaster WHERE Set_EmployeeMaster.Company_Id = pm.Company_Id AND Set_EmployeeMaster.Emp_Code = pm.ModifiedBy) AS ModifiedEmpName FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id AND Inv_Product_CompanyBrand.BrandId = @Brand_Id AND pm.IsActive = 'False' ORDER BY ProductId DESC END IF (@Optype = 6) BEGIN SELECT ProductId, ProductCode, EProductName, (SUBSTRING(EProductName, 0, 10)) AS ShortProductName, (SELECT Inv_UnitMaster.Unit_Name FROM Inv_UnitMaster WHERE Inv_UnitMaster.Unit_Id = inv_productmaster.UnitId) AS UnitName, IsActive, CASE WHEN (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = inv_productmaster.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) IS NULL THEN 0 ELSE (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = inv_productmaster.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) END AS StockQty FROM inv_productmaster ORDER BY EProductName ASC END IF (@Optype = 7) BEGIN SELECT Inv_StockDetail.ProductId, inv_productmaster.ProductCode, (SUBSTRING(inv_productmaster.EProductName, 0, 10)) AS ShortProductName, inv_productmaster.EProductName, Inv_UnitMaster.Unit_Name, Inv_StockDetail.Field1 AS UnitCost, Inv_StockDetail.Field2 AS AverageCost, Inv_StockDetail.Quantity AS SystemQuantity, 0 AS PhysicalQuantity FROM Inv_StockDetail INNER JOIN inv_productmaster ON Inv_StockDetail.ProductId = inv_productmaster.ProductId INNER JOIN Inv_UnitMaster ON inv_productmaster.UnitId = Inv_UnitMaster.Unit_Id WHERE Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.Brand_Id = @Brand_Id AND Inv_StockDetail.Location_Id = @Location_Id AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id ORDER BY inv_productmaster.ProductId ASC END IF (@Optype = 8) BEGIN SELECT Inv_StockDetail.ProductId, Inv_Product_CategoryMaster.Category_Name, inv_productmaster.ProductCode, inv_productmaster.EProductName, Inv_UnitMaster.Unit_Name, Inv_StockDetail.Field1 AS UnitCost, Inv_StockDetail.Field2 AS AverageCost, Inv_StockDetail.Quantity AS SystemQuantity, 0 AS PhysicalQuantity FROM Inv_StockDetail INNER JOIN inv_productmaster ON Inv_StockDetail.ProductId = inv_productmaster.ProductId INNER JOIN Inv_UnitMaster ON inv_productmaster.UnitId = Inv_UnitMaster.Unit_Id INNER JOIN Inv_Product_Category ON inv_productmaster.ProductId = Inv_Product_Category.ProductId INNER JOIN Inv_Product_CategoryMaster ON Inv_Product_CategoryMaster.Category_Id = Inv_Product_Category.CategoryId WHERE Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.Brand_Id = @Brand_Id AND Inv_StockDetail.Location_Id = @Location_Id AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id ORDER BY inv_productmaster.ProductId ASC END IF (@Optype = 9) BEGIN SELECT Inv_StockDetail.ProductId, Inv_ProductBrandMaster.Brand_Name, inv_productmaster.ProductCode, inv_productmaster.EProductName, Inv_UnitMaster.Unit_Name, Inv_StockDetail.Field1 AS UnitCost, Inv_StockDetail.Field2 AS AverageCost, Inv_StockDetail.Quantity AS SystemQuantity, 0 AS PhysicalQuantity FROM Inv_StockDetail INNER JOIN inv_productmaster ON Inv_StockDetail.ProductId = inv_productmaster.ProductId INNER JOIN Inv_UnitMaster ON inv_productmaster.UnitId = Inv_UnitMaster.Unit_Id INNER JOIN Inv_Product_Brand ON inv_productmaster.ProductId = Inv_Product_Brand.ProductId INNER JOIN Inv_ProductBrandMaster ON Inv_ProductBrandMaster.Brand_Id = Inv_Product_Brand.PBrandId WHERE Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.Brand_Id = @Brand_Id AND Inv_StockDetail.Location_Id = @Location_Id AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id ORDER BY inv_productmaster.ProductId ASC END IF (@Optype = 10) BEGIN SELECT Inv_StockDetail.ProductId, Inv_RackMaster.Rack_Name, inv_productmaster.ProductCode, inv_productmaster.EProductName, Inv_UnitMaster.Unit_Name, Inv_StockDetail.Field1 AS UnitCost, Inv_StockDetail.Field2 AS AverageCost, Inv_StockDetail.Quantity AS SystemQuantity, 0 AS PhysicalQuantity FROM Inv_StockDetail INNER JOIN inv_productmaster ON Inv_StockDetail.ProductId = inv_productmaster.ProductId INNER JOIN Inv_UnitMaster ON inv_productmaster.UnitId = Inv_UnitMaster.Unit_Id INNER JOIN Inv_RackDetail ON inv_productmaster.ProductId = Inv_RackDetail.Product_Id INNER JOIN Inv_RackMaster ON Inv_RackMaster.Rack_ID = Inv_RackDetail.Rack_Id WHERE Inv_StockDetail.Company_Id = @Company_Id AND Inv_StockDetail.Brand_Id = @Brand_Id AND Inv_StockDetail.Location_Id = @Location_Id AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id ORDER BY inv_productmaster.ProductId ASC END IF (@Optype = 11) BEGIN SELECT Company_Id, Brand_Id, ProductCode FROM Inv_ProductMaster WHERE ProductId = @ProductId END IF (@optype = 12) BEGIN SELECT ROW_NUMBER() OVER (ORDER BY pm.ProductId DESC) AS RowNumber, Inv_Product_CompanyBrand.Company_Id AS Company_Id, Inv_Product_CompanyBrand.BrandId AS Brand_Id, Pm.ProductCode, (SUBSTRING(Pm.EProductName, 0, 10)) AS ShortProductName, Pm.ProductId, pm.PartNo, pm.ModelNo, pm.ModelName, pm.EProductName, pm.LProductName, pm.CountryID, pm.UnitId, pm.ItemType, pm.HScode, pm.DimDepth, pm.HasBatchNo, pm.TypeOfBatchNo, pm.HasSerialNo, pm.ReorderQty, pm.CostPrice, pm.Description, pm.SalesPrice1, pm.SalesPrice2, Pm.SalesPrice3, pm.ProductColor, pm.WSalePrice, pm.ReservedQty, pm.DamageQty, pm.ExpiredQty, pm.ExpiredQty, pm.MinimumQty, pm.MaximumQty, pm.Profit, pm.Discount, pm.MaintainStock, pm.URL, pm.ActualWeight, pm.VMWeight, pm.DimLenth, pm.DimHieght, pm.DimLenth, pm.AlternateId1, pm.AlternateId2, pm.AlternateId3, pm.Field1, pm.Field2, pm.Field3, pm.Field4, pm.Field5, pm.Field6, pm.Field7, pm.CreatedBy, pm.CreatedDate, pm.ModifiedBy, pm.ModfiedDate, CASE WHEN (SELECT ParameterValue FROM Inv_ParameterMaster WHERE ParameterName = 'Sales Price' AND Company_Id = @Company_Id AND BrandId = @Brand_Id AND Location_Id = @Location_Id) = 1 THEN Pm.SalesPrice1 WHEN (SELECT ParameterValue FROM Inv_ParameterMaster WHERE ParameterName = 'Sales Price' AND Company_Id = @Company_Id AND BrandId = @Brand_Id AND Location_Id = @Location_Id) = 2 THEN Pm.SalesPrice2 WHEN (SELECT ParameterValue FROM Inv_ParameterMaster WHERE ParameterName = 'Sales Price' AND Company_Id = @Company_Id AND BrandId = @Brand_Id AND Location_Id = @Location_Id) = 3 THEN Pm.SalesPrice3 ELSE '0' END AS ProductSalesPrice, CASE WHEN PM.ItemType = 'S' THEN 'Stockable' WHEN PM.ItemType = 'NS' THEN 'Non Stockable' WHEN PM.ItemType = 'A' THEN 'Assemble' WHEN PM.ItemType = 'K' THEN 'Kit' END AS ItemTypeValue, (SELECT Inv_UnitMaster.Unit_Name FROM Inv_UnitMaster WHERE Inv_UnitMaster.Unit_Id = Pm.UnitId) AS UnitName, CASE WHEN (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = Pm.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) IS NULL THEN 0 ELSE (SELECT inv_stockdetail.quantity FROM inv_stockdetail WHERE inv_stockdetail.Company_Id = @Company_Id AND inv_stockdetail.Brand_Id = @Brand_Id AND inv_stockdetail.Location_Id = @Location_Id AND inv_stockdetail.ProductId = Pm.ProductId AND inv_stockdetail.Finance_Year_Id = @Finance_Year_Id) END AS StockQty FROM Inv_ProductMaster AS Pm LEFT JOIN Inv_Product_CompanyBrand ON Pm.ProductId = Inv_Product_CompanyBrand.ProductId WHERE Inv_Product_CompanyBrand.Company_Id = @Company_Id AND Inv_Product_CompanyBrand.BrandId = @Brand_Id AND pm.IsActive = 'True' AND pm.Field1 = ' ' AND Pm.Field3 = 'True' END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }


            //added on 08-04-2020
            try
            {
                strsql = "ALTER PROCEDURE [dbo].[sp_Ac_AllSupplierDetail_SelectRow] @Company_Id int, @Brand_Id int, @Account_No nvarchar(max), @SupplierAccount_No int, @Location_Id nvarchar(max), @FromDate datetime, @ToDate datetime, @Currency_Type int, @FinancialYear int, @Optype int AS BEGIN IF (@Optype = 1) BEGIN SET @FinancialYear = (SELECT Trans_Id FROM dbo.Ac_Finance_Year_Info WHERE Company_Id = @Company_Id AND IsActive = 'true' AND (@FromDate BETWEEN From_Date AND To_Date)) SELECT Company_Id, Brand_Id, Supplier_Id, OtherAccountId, currency_id, currency_code, Name, (CASE WHEN @Currency_Type = 1 THEN Opening_Balance ELSE Company_OpeningBalance END) AS Opening_Final, (CASE WHEN @Currency_Type = 1 THEN Debit_Amount ELSE Company_DebitAmount END) AS Debit_Final, (CASE WHEN @Currency_Type = 1 THEN Credit_Amount ELSE Company_CreditAmount END) AS Credit_Final, (CASE WHEN @Currency_Type = 1 THEN Closing_Balance ELSE Company_ClosingBalance END) AS Closing_Final, Opening_Balance, Debit_Amount, Credit_Amount, Closing_Balance, ForeignOpening_Balance, ForeignDebit_Amount, ForeignCredit_Amount, ForeignClosing_Balance, Company_OpeningBalance, Company_DebitAmount, Company_CreditAmount, Company_ClosingBalance, (CASE WHEN @Currency_Type = 1 THEN Start30 ELSE Comp_Start30 END) AS Start30_Final, (CASE WHEN @Currency_Type = 1 THEN Second60 ELSE comp_second60 END) AS Second60_Final, (CASE WHEN @Currency_Type = 1 THEN Third90 ELSE Comp_third90 END) AS Third90_Final, (CASE WHEN @Currency_Type = 1 THEN Fourth90Above ELSE Comp_fourth90above END) AS Fourth90above_Final, (CASE WHEN @Currency_Type = 1 THEN AgeingBalance ELSE Comp_AgeingBalance END) AS AgeingBalance_Final, Start30, Second60, Third90, Fourth90Above, AgeingBalance, Comp_Start30, Comp_Second60, Comp_Third90, Comp_Fourth90Above, Comp_AgeingBalance FROM (SELECT Set_Suppliers.Company_Id, Set_Suppliers.Brand_Id, Set_Suppliers.Supplier_Id, set_suppliers.OtherAccountId, set_suppliers.currency_id, ems_contactmaster.Name + '(' + Sys_CurrencyMaster.Currency_Name + ')' AS Name, Sys_CurrencyMaster.currency_code, ((ISNULL(trans.cr_opening, 0) + ISNULL(m_ob.m_o_cr, 0)) - (ISNULL(trans.dr_opening, 0) + ISNULL(m_ob.m_o_dr, 0))) AS Opening_Balance, ISNULL(trans.dr, 0) AS Debit_Amount, ISNULL(trans.cr, 0) AS Credit_Amount, (((ISNULL(trans.cr_opening, 0) + ISNULL(m_ob.m_o_cr, 0)) - (ISNULL(trans.dr_opening, 0) + ISNULL(m_ob.m_o_dr, 0))) - ISNULL(trans.dr, 0) + ISNULL(trans.cr, 0)) AS Closing_Balance, ((ISNULL(trans.f_cr_opening, 0) + ISNULL(m_ob.m_f_o_cr, 0)) - (ISNULL(trans.f_dr_opening, 0) + ISNULL(m_ob.m_f_o_dr, 0))) AS ForeignOpening_Balance, ISNULL(trans.f_dr, 0) AS ForeignDebit_Amount, ISNULL(trans.f_cr, 0) AS ForeignCredit_Amount, ((((ISNULL(trans.f_cr_opening, 0) + ISNULL(m_ob.m_f_o_cr, 0)) - (ISNULL(trans.f_dr_opening, 0) + ISNULL(m_ob.m_f_o_dr, 0))) - ISNULL(trans.f_dr, 0) + ISNULL(trans.f_cr, 0))) AS ForeignClosing_Balance, ((ISNULL(trans.cmp_cr_opening, 0) + ISNULL(m_ob.m_cmp_o_cr, 0)) - (ISNULL(trans.cmp_dr_opening, 0) + ISNULL(m_ob.m_cmp_o_dr, 0))) AS Company_OpeningBalance, ISNULL(trans.cmp_dr, 0) AS Company_DebitAmount, ISNULL(trans.cmp_cr, 0) AS Company_CreditAmount, ((ISNULL(trans.cmp_cr, 0)) - (ISNULL(trans.cmp_dr, 0)) + (((ISNULL(trans.cmp_cr_opening, 0) + ISNULL(m_ob.m_cmp_o_cr, 0)) - (ISNULL(trans.cmp_dr_opening, 0) + ISNULL(m_ob.m_cmp_o_dr, 0))))) AS Company_ClosingBalance, 0 AS Start30, 0 AS Second60, 0 AS Third90, 0 AS Fourth90Above, (SELECT ISNULL(SUM(CASE WHEN due_amount > 0 THEN foreign_amount ELSE 0 END) - SUM(CASE WHEN Paid_Receive_Amount > 0 THEN Foreign_Amount ELSE 0 END), 0) FROM Ac_Ageing_Detail left JOIN ac_voucher_header ON ac_voucher_header.trans_id = Ac_Ageing_Detail.VoucherId WHERE Ac_Ageing_Detail.Other_Account_No = set_suppliers.OtherAccountId AND Ac_Ageing_Detail.AgeingType = 'PV' AND Ac_Ageing_Detail.IsActive = 'True' AND isnull(ac_voucher_header.IsActive,'true') = 'true' AND Ac_Ageing_Detail.Location_Id IN (SELECT CAST(Value AS int) FROM F_Split(@Location_Id, ','))) AS AgeingBalance, 0 AS Comp_Start30, 0 AS Comp_Second60, 0 Comp_Third90, 0 Comp_Fourth90Above, (SELECT ISNULL(SUM(CompanyCurrDebit) - SUM(CompanyCurrCredit), 0) FROM Ac_Ageing_Detail WHERE Ac_Ageing_Detail.Other_Account_No = set_suppliers.OtherAccountId AND Ac_Ageing_Detail.AgeingType = 'PV' AND Ac_Ageing_Detail.IsActive = 'True' AND Ac_Ageing_Detail.Location_Id IN (SELECT CAST(Value AS int) FROM F_Split(@Location_Id, ','))) AS Comp_AgeingBalance FROM (SELECT Set_Suppliers.Company_Id, Set_Suppliers.Brand_Id, Set_Suppliers.Supplier_Id, Ac_AccountMaster.Trans_Id AS OtherAccountId, Ac_AccountMaster.Currency_Id FROM Set_Suppliers LEFT JOIN Ac_AccountMaster ON Ac_AccountMaster.Ref_Id = Set_Suppliers.Supplier_Id WHERE Set_Suppliers.Account_No = @SupplierAccount_No AND Set_Suppliers.Company_Id = @Company_Id AND Set_Suppliers.Brand_Id = @Brand_Id AND Ac_AccountMaster.Ref_Type = 'Supplier') set_suppliers LEFT JOIN (SELECT Ac_SubChartOfAccount.Other_account_no, SUM(ISNULL(Ac_SubChartOfAccount.LCr_Amount, 0)) AS m_o_cr, SUM(ISNULL(Ac_SubChartOfAccount.LDr_Amount, 0)) AS m_o_dr, SUM(ISNULL(CAST(Ac_SubChartOfAccount.FCr_Amount AS float), 0)) AS m_f_o_cr, SUM(ISNULL(CAST(Ac_SubChartOfAccount.FDr_Amount AS float), 0)) AS m_f_o_dr, SUM(ISNULL(CAST(Ac_SubChartOfAccount.CompanyCurrDebit AS float), 0)) AS m_cmp_o_dr, SUM(ISNULL(CAST(Ac_SubChartOfAccount.CompanyCurrCredit AS float), 0)) AS m_cmp_o_cr FROM ac_subChartOfAccount WHERE Ac_SubChartOfAccount.isActive = 'true' AND Ac_SubChartOfAccount.AccTransId = @SupplierAccount_No AND Ac_SubChartOfAccount.FinancialYearId = @FinancialYear AND Ac_SubChartOfAccount.Company_Id = @Company_Id AND Ac_SubChartOfAccount.Brand_Id = @Brand_Id AND Ac_SubChartOfAccount.Location_Id IN (SELECT CAST(Value AS int) FROM F_Split(@Location_Id, ',')) GROUP BY Ac_SubChartOfAccount.Company_Id, Ac_SubChartOfAccount.Brand_Id, Ac_SubChartOfAccount.other_account_no) m_ob ON m_ob.other_account_no = set_suppliers.OtherAccountId LEFT JOIN ems_contactmaster ON ems_contactmaster.Trans_Id = set_suppliers.Supplier_Id LEFT JOIN (SELECT VD.Other_Account_No, VD.Company_Id, VD.Brand_Id, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date < @FromDate AND Ac_Voucher_Header.Finance_Code = @FinancialYear THEN VD.Debit_Amount ELSE 0 END)) AS dr_opening, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date < @FromDate AND Ac_Voucher_Header.Finance_Code = @FinancialYear AND VD.Debit_Amount > 0 THEN VD.Foreign_Amount ELSE 0 END)) AS f_dr_opening, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date < @FromDate AND Ac_Voucher_Header.Finance_Code = @FinancialYear AND VD.Debit_Amount > 0 THEN VD.CompanyCurrDebit ELSE 0 END)) AS cmp_dr_opening, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date < @FromDate AND Ac_Voucher_Header.Finance_Code = @FinancialYear THEN VD.Credit_Amount ELSE 0 END)) AS cr_opening, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date < @FromDate AND Ac_Voucher_Header.Finance_Code = @FinancialYear AND VD.Credit_Amount > 0 THEN VD.foreign_amount ELSE 0 END)) AS f_cr_opening, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date < @FromDate AND Ac_Voucher_Header.Finance_Code = @FinancialYear AND VD.Credit_Amount > 0 THEN VD.CompanyCurrCredit ELSE 0 END)) AS cmp_cr_opening, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date >= @FromDate AND Ac_Voucher_Header.Voucher_Date <= @ToDate THEN VD.Debit_Amount ELSE 0 END)) AS dr, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date >= @FromDate AND Ac_Voucher_Header.Voucher_Date <= @ToDate AND VD.Debit_Amount > 0 THEN VD.foreign_amount ELSE 0 END)) AS f_dr, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date >= @FromDate AND Ac_Voucher_Header.Voucher_Date <= @ToDate AND VD.Debit_Amount > 0 THEN VD.CompanyCurrDebit ELSE 0 END)) AS cmp_dr, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date >= @FromDate AND Ac_Voucher_Header.Voucher_Date <= @ToDate THEN VD.credit_Amount ELSE 0 END)) AS cr, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date >= @FromDate AND Ac_Voucher_Header.Voucher_Date <= @ToDate AND VD.credit_Amount > 0 THEN VD.foreign_amount ELSE 0 END)) AS f_cr, SUM((CASE WHEN Ac_Voucher_Header.Voucher_Date >= @FromDate AND Ac_Voucher_Header.Voucher_Date <= @ToDate AND VD.credit_Amount > 0 THEN VD.CompanyCurrCredit ELSE 0 END)) AS cmp_cr FROM Ac_Voucher_Header INNER JOIN Ac_Voucher_Detail AS VD ON Ac_Voucher_Header.Trans_Id = VD.Voucher_No INNER JOIN Ac_AccountMaster ON Ac_AccountMaster.Trans_Id = VD.Other_Account_No INNER JOIN Set_Suppliers ON Set_Suppliers.Supplier_Id = Ac_AccountMaster.Ref_Id WHERE VD.Account_No IN (SELECT CAST(Value AS int) FROM F_Split(@Account_No, ',')) AND VD.Other_Account_No != 0 AND Set_Suppliers.Company_Id = @Company_Id AND Set_Suppliers.Brand_Id = @Brand_Id AND VD.Location_Id IN (SELECT CAST(Value AS int) FROM F_Split(@Location_Id, ',')) AND Ac_Voucher_Header.Isactive = 'True' AND Ac_Voucher_Header.ReconciledFromFinance = 'True' AND Ac_Voucher_Header.Voucher_Date <= @ToDate AND (Ac_Voucher_Header.Field3 = '' OR Ac_Voucher_Header.Field3 IS NULL OR Ac_Voucher_Header.Field3 = 'Approved') GROUP BY VD.Company_Id, VD.Brand_Id, VD.Other_Account_No) trans ON trans.Other_Account_No = Set_Suppliers.OtherAccountId LEFT JOIN Sys_CurrencyMaster ON Sys_CurrencyMaster.Currency_ID = set_suppliers.Currency_Id) tbl_final ORDER BY Name END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }





            //added on 11-04-2020
            try
            {
                strsql = "ALTER PROCEDURE[dbo].[sp_Ac_AccountMaster_SelectRow] (@Trans_Id int, @Ref_Type nvarchar(20), @Ref_Id int, @Currency_Id int, @OptType int, @fYearId int=0,@locId int=0) AS BEGIN IF @OptType = 1 BEGIN SELECT Ac_AccountMaster.*, Sys_CurrencyMaster.Currency_Name, Sys_CurrencyMaster.Currency_Code, Ems_ContactMaster.Name + '(' + Sys_CurrencyMaster.Currency_Name + ')' AS Name FROM dbo.Ac_AccountMaster LEFT JOIN Sys_CurrencyMaster ON Sys_CurrencyMaster.Currency_ID = Ac_AccountMaster.Currency_Id LEFT JOIN Ems_ContactMaster ON Ems_ContactMaster.Trans_Id = Ac_AccountMaster.Ref_Id WHERE Ac_AccountMaster.Trans_Id = @Trans_Id END IF @OptType = 2 BEGIN SELECT Ac_AccountMaster.*, Sys_CurrencyMaster.Currency_Name FROM dbo.Ac_AccountMaster LEFT JOIN Sys_CurrencyMaster ON Sys_CurrencyMaster.Currency_ID = Ac_AccountMaster.Currency_Id WHERE Ref_Type = @Ref_Type AND Is_Active = 'true' END IF @OptType = 3 BEGIN SELECT Ac_AccountMaster.* FROM dbo.Ac_AccountMaster WHERE Ref_Type = @Ref_Type AND Is_Active = 'false' END IF @OptType = 4 BEGIN SELECT Ac_AccountMaster.*, Sys_CurrencyMaster.Currency_Name, Ems_ContactMaster.Name, Set_CustomerMaster_CreditParameter.Credit_Limit, Set_CustomerMaster_CreditParameter.Credit_Days, Set_CustomerMaster_CreditParameter.Field4 AS credit_status, isnull((case when scoa.FDr_Amount>0 then 'DR' else 'CR' end),'DR') as fy_ob_type, isnull((case when scoa.FDr_Amount>0 then scoa.FDr_Amount else scoa.FCr_Amount end),0) as fy_ob, ((scoa.FDr_Amount-scoa.FCr_Amount)/(scoa.LDr_Amount-scoa.LCr_Amount)) as fy_ob_exchange_rate FROM dbo.Ac_AccountMaster LEFT JOIN Sys_CurrencyMaster ON Sys_CurrencyMaster.Currency_ID = Ac_AccountMaster.Currency_Id LEFT JOIN Ems_ContactMaster ON Ems_ContactMaster.Trans_Id = Ac_AccountMaster.Ref_Id LEFT JOIN Set_CustomerMaster_CreditParameter ON Set_CustomerMaster_CreditParameter.Field3 = Ac_AccountMaster.Trans_Id left join (select* from Ac_SubChartOfAccount where FinancialYearId= @fYearId and IsActive = 'true' and Location_Id = @locId)scoa on scoa.Other_Account_No=Ac_AccountMaster.Trans_Id WHERE Ref_Type = @Ref_Type AND Ref_Id = @Ref_Id AND Ac_AccountMaster.Is_Active = 'true' END IF @OptType = 5 BEGIN SELECT Ac_AccountMaster.*, Sys_CurrencyMaster.Currency_Name FROM dbo.Ac_AccountMaster LEFT JOIN Sys_CurrencyMaster ON Sys_CurrencyMaster.Currency_ID = Ac_AccountMaster.Currency_Id WHERE Ref_Type = @Ref_Type AND Ref_Id = @Ref_Id AND Is_Active = 'false' END IF @OptType = 6 BEGIN SELECT Ac_AccountMaster.Trans_Id FROM dbo.Ac_AccountMaster WHERE Ref_Type = @Ref_Type AND Ref_Id = @Ref_Id AND Currency_Id = @Currency_Id AND Is_Active = 'true' END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //added on 15-04-2020

            try
            {
                strsql = "ALTER PROCEDURE [dbo].[sp_Inv_PurchaseInvoiceHeader_SelectRow_Report] @Company_Id int, @Brand_Id int, @Location_ID int, @Trans_Id int AS BEGIN IF (@Trans_Id = 0) BEGIN SELECT PH.*, PD.*, (PH.CostingRate*pd.UnitCost) as ItemUnitCost, (SELECT Pay_Mod_Name FROM Set_Payment_Mode_Master WHERE Pay_Mode_Id = PH.PaymentModeID) AS PaymentModeName, (SELECT Currency_Code FROM Sys_CurrencyMaster WHERE Currency_ID = PH.CurrencyID) AS Currency_Name, (SELECT Name FROM Ems_ContactMaster WHERE (Trans_Id = PH.SupplierId)) AS Supplier_Name, PD.Poid, CASE WHEN PH.Field1 = 'PO' THEN 'PO' ELSE 'Direct' END AS RefType, CASE WHEN PH.Field1 = 'PO' THEN (SELECT PoNO FROM Inv_PurchaseOrderHeader WHERE Company_Id = @Company_Id AND Brand_id = @Brand_id AND Location_Id = @Location_Id AND TransId = PD.Poid) ELSE '-' END AS RefNo, SUBSTRING((SELECT EProductName FROM Inv_ProductMaster WHERE ProductId = PD.ProductId), 0, 50) AS Product_Name, (SELECT productcode FROM Inv_ProductMaster WHERE ProductId = PD.ProductId) AS ProductCode, (PH.GrandTotal - PH.NetTaxValue + PH.NetDiscountValue) AS TotalActualAmount, (SELECT Unit_Name FROM Inv_UnitMaster WHERE Unit_Id = PD.UnitId) AS Unit_Name, (PD.UnitCost * PD.InvoiceQty) AS Amount, ((PD.UnitCost * PD.InvoiceQty) + PD.TaxV) AS PriceAfterTax, (PH.GrandTotal - NetTaxValue) AS PriceAfterDiscount, CASE WHEN PD.POId = 0 THEN '-' ELSE (SELECT PoNO FROM Inv_PurchaseOrderHeader WHERE TransID = PD.POId) END AS DetailOrderNo, (SELECT Set_LocationMaster.Location_Name FROM Set_LocationMaster WHERE Set_LocationMaster.Company_Id = @Company_Id AND Set_LocationMaster.Brand_Id = @Brand_Id AND Set_LocationMaster.Location_Id = PH.Location_ID) AS LOcationName, (SELECT Set_LocationMaster.Field1 FROM Set_LocationMaster WHERE Set_LocationMaster.Company_Id = @Company_Id AND Set_LocationMaster.Brand_Id = @Brand_Id AND Set_LocationMaster.Location_Id = PH.Location_ID) AS LocalCurrency, PD.SerialNo AS ProductSerialNumber, Set_LocationMaster.Location_Name AS HeaderName, Set_LocationMaster.Location_Name_L AS HeaderName_L, Set_LocationMaster.Field2 AS Imageurl, '~\\CompanyResource\\' + CAST(Set_LocationMaster.Location_Id AS varchar) + '\\' + Set_LocationMaster.Field2 AS headerLogoPath, Set_AddressMaster.Address, Set_AddressMaster.Street, Set_AddressMaster.Block, Set_AddressMaster.Avenue, (CASE WHEN ISNUMERIC(Set_AddressMaster.StateId) = 1 THEN Sys_StateMaster.State_Name ELSE Set_AddressMaster.StateId END) AS StateId, (CASE WHEN ISNUMERIC(Set_AddressMaster.cityid) = 1 THEN Sys_CityMaster.City_Name ELSE Set_AddressMaster.CityId END) AS CityId, Set_AddressMaster.CountryId, Set_AddressMaster.PinCode, Set_AddressMaster.PhoneNo1, Set_AddressMaster.PhoneNo2, Set_AddressMaster.MobileNo1, Set_AddressMaster.MobileNo2, Set_AddressMaster.FaxNo, Set_AddressMaster.WebSite FROM Inv_PurchaseInvoiceHeader AS PH INNER JOIN Inv_PurchaseInvoiceDetail AS PD ON (PH.Company_Id = PD.Company_Id AND PH.Brand_Id = PD.Brand_Id AND PH.Location_ID = PD.Location_ID AND PH.TransID = PD.InvoiceNo) LEFT JOIN Set_LocationMaster ON ph.Location_Id = Set_LocationMaster.Location_Id LEFT JOIN Set_AddressChild ON Set_LocationMaster.Location_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Location' LEFT JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id LEFT JOIN Sys_StateMaster ON Sys_StateMaster.Trans_Id = CASE WHEN ISNUMERIC(Set_AddressMaster.StateId) = 1 THEN Set_AddressMaster.StateId ELSE 0 END LEFT JOIN Sys_CityMaster ON Sys_CityMaster.Trans_Id = CASE WHEN ISNUMERIC(Set_AddressMaster.CityId) = 1 THEN Set_AddressMaster.CityId ELSE 0 END WHERE PH.Company_Id = @Company_Id AND PH.brand_Id = @brand_Id AND Ph.Location_Id = @Location_Id ORDER BY ph.InvoiceDate END IF (@Trans_Id <> 0) BEGIN SELECT PH.*, PD.*, (PH.CostingRate*pd.UnitCost) as ItemUnitCost, (SELECT Pay_Mod_Name FROM Set_Payment_Mode_Master WHERE Pay_Mode_Id = PH.PaymentModeID) AS PaymentModeName, (SELECT Currency_Code FROM Sys_CurrencyMaster WHERE Currency_ID = PH.CurrencyID) AS Currency_Name, (SELECT Name FROM Ems_ContactMaster WHERE (Trans_Id = PH.SupplierId)) AS Supplier_Name, PD.Poid, CASE WHEN PH.Field1 = 'PO' THEN 'PO' ELSE 'Direct' END AS RefType, CASE WHEN PH.Field1 = 'PO' THEN (SELECT PoNO FROM Inv_PurchaseOrderHeader WHERE Company_Id = @Company_Id AND Brand_id = @Brand_id AND Location_Id = @Location_Id AND TransId = PD.Poid) ELSE '-' END AS RefNo, SUBSTRING((SELECT EProductName FROM Inv_ProductMaster WHERE ProductId = PD.ProductId), 0, 50) AS Product_Name, (SELECT productcode FROM Inv_ProductMaster WHERE ProductId = PD.ProductId) AS ProductCode, (PH.GrandTotal - PH.NetTaxValue + PH.NetDiscountValue) AS TotalActualAmount, (SELECT Unit_Name FROM Inv_UnitMaster WHERE Unit_Id = PD.UnitId) AS Unit_Name, (PD.UnitCost * PD.InvoiceQty) AS Amount, ((PD.UnitCost * PD.InvoiceQty) + PD.TaxV) AS PriceAfterTax, (PH.GrandTotal - NetTaxValue) AS PriceAfterDiscount, CASE WHEN PD.POId = 0 THEN '-' ELSE (SELECT PoNO FROM Inv_PurchaseOrderHeader WHERE TransID = PD.POId) END AS DetailOrderNo, (SELECT Set_LocationMaster.Location_Name FROM Set_LocationMaster WHERE Set_LocationMaster.Company_Id = @Company_Id AND Set_LocationMaster.Brand_Id = @Brand_Id AND Set_LocationMaster.Location_Id = PH.Location_ID) AS LOcationName, (SELECT Set_LocationMaster.Field1 FROM Set_LocationMaster WHERE Set_LocationMaster.Company_Id = @Company_Id AND Set_LocationMaster.Brand_Id = @Brand_Id AND Set_LocationMaster.Location_Id = PH.Location_ID) AS LocalCurrency, ROW_NUMBER() OVER (ORDER BY (SELECT 1) ASC) AS ProductSerialNumber, Set_LocationMaster.Location_Name AS HeaderName, Set_LocationMaster.Location_Name_L AS HeaderName_L, Set_LocationMaster.Field2 AS Imageurl, '~\\CompanyResource\\' + CAST(Set_LocationMaster.Location_Id AS varchar) + '\\' + Set_LocationMaster.Field2 AS headerLogoPath, Set_AddressMaster.Address, Set_AddressMaster.Street, Set_AddressMaster.Block, Set_AddressMaster.Avenue, (CASE WHEN ISNUMERIC(Set_AddressMaster.StateId) = 1 THEN Sys_StateMaster.State_Name ELSE Set_AddressMaster.StateId END) AS StateId, (CASE WHEN ISNUMERIC(Set_AddressMaster.cityid) = 1 THEN Sys_CityMaster.City_Name ELSE Set_AddressMaster.CityId END) AS CityId, Set_AddressMaster.CountryId, Set_AddressMaster.PinCode, Set_AddressMaster.PhoneNo1, Set_AddressMaster.PhoneNo2, Set_AddressMaster.MobileNo1, Set_AddressMaster.MobileNo2, Set_AddressMaster.FaxNo, Set_AddressMaster.WebSite FROM Inv_PurchaseInvoiceHeader AS PH INNER JOIN Inv_PurchaseInvoiceDetail AS PD ON (PH.Company_Id = PD.Company_Id AND PH.Brand_Id = PD.Brand_Id AND PH.Location_ID = PD.Location_ID AND PH.TransID = PD.InvoiceNo) LEFT JOIN Set_LocationMaster ON ph.Location_Id = Set_LocationMaster.Location_Id LEFT JOIN Set_AddressChild ON (Set_LocationMaster.Location_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Location') LEFT JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id LEFT JOIN Sys_StateMaster ON Sys_StateMaster.Trans_Id = CASE WHEN ISNUMERIC(Set_AddressMaster.StateId) = 1 THEN Set_AddressMaster.StateId ELSE 0 END LEFT JOIN Sys_CityMaster ON Sys_CityMaster.Trans_Id = CASE WHEN ISNUMERIC(Set_AddressMaster.CityId) = 1 THEN Set_AddressMaster.CityId ELSE 0 END WHERE PH.Company_Id = @Company_Id AND PH.brand_Id = @brand_Id AND Ph.Location_Id = @Location_Id AND PH.TransID = @Trans_Id ORDER BY ph.InvoiceDate END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //added on 21-04-2020

            try
            {
                strsql = "ALTER PROCEDURE [dbo].[sp_Ac_AccountMaster_SelectRow] (@Trans_Id int, @Ref_Type nvarchar(20), @Ref_Id int, @Currency_Id int, @OptType int, @fYearId int=0,@locId int=0) AS BEGIN IF @OptType = 1 BEGIN SELECT Ac_AccountMaster.*, Sys_CurrencyMaster.Currency_Name, Sys_CurrencyMaster.Currency_Code, Ems_ContactMaster.Name + '(' + Sys_CurrencyMaster.Currency_Name + ')' AS Name FROM dbo.Ac_AccountMaster LEFT JOIN Sys_CurrencyMaster ON Sys_CurrencyMaster.Currency_ID = Ac_AccountMaster.Currency_Id LEFT JOIN Ems_ContactMaster ON Ems_ContactMaster.Trans_Id = Ac_AccountMaster.Ref_Id WHERE Ac_AccountMaster.Trans_Id = @Trans_Id END IF @OptType = 2 BEGIN SELECT Ac_AccountMaster.*, Sys_CurrencyMaster.Currency_Name FROM dbo.Ac_AccountMaster LEFT JOIN Sys_CurrencyMaster ON Sys_CurrencyMaster.Currency_ID = Ac_AccountMaster.Currency_Id WHERE Ref_Type = @Ref_Type AND Is_Active = 'true' END IF @OptType = 3 BEGIN SELECT Ac_AccountMaster.* FROM dbo.Ac_AccountMaster WHERE Ref_Type = @Ref_Type AND Is_Active = 'false' END IF @OptType = 4 BEGIN SELECT Ac_AccountMaster.*, Sys_CurrencyMaster.Currency_Name, Ems_ContactMaster.Name, Set_CustomerMaster_CreditParameter.Credit_Limit, Set_CustomerMaster_CreditParameter.Credit_Days, Set_CustomerMaster_CreditParameter.Field4 AS credit_status, isnull((case when scoa.FDr_Amount>0 then 'DR' else 'CR' end),'DR') as fy_ob_type, isnull((case when scoa.FDr_Amount>0 then scoa.FDr_Amount else scoa.FCr_Amount end),0) as fy_ob, ((scoa.FDr_Amount-scoa.FCr_Amount)/(scoa.LDr_Amount-scoa.LCr_Amount)) as fy_ob_exchange_rate FROM dbo.Ac_AccountMaster LEFT JOIN Sys_CurrencyMaster ON Sys_CurrencyMaster.Currency_ID = Ac_AccountMaster.Currency_Id LEFT JOIN Ems_ContactMaster ON Ems_ContactMaster.Trans_Id = Ac_AccountMaster.Ref_Id LEFT JOIN Set_CustomerMaster_CreditParameter ON Set_CustomerMaster_CreditParameter.Field3 = Ac_AccountMaster.Trans_Id left join (select * from Ac_SubChartOfAccount where FinancialYearId=@fYearId and IsActive='true' and Location_Id=@locId)scoa on scoa.Other_Account_No=Ac_AccountMaster.Trans_Id WHERE Ref_Type = @Ref_Type AND Ref_Id = @Ref_Id AND Ac_AccountMaster.Is_Active = 'true' END IF @OptType = 5 BEGIN SELECT Ac_AccountMaster.*, Sys_CurrencyMaster.Currency_Name FROM dbo.Ac_AccountMaster LEFT JOIN Sys_CurrencyMaster ON Sys_CurrencyMaster.Currency_ID = Ac_AccountMaster.Currency_Id WHERE Ref_Type = @Ref_Type AND Ref_Id = @Ref_Id AND Is_Active = 'false' END IF @OptType = 6 BEGIN SELECT Ac_AccountMaster.Trans_Id FROM dbo.Ac_AccountMaster WHERE Ref_Type = @Ref_Type AND Ref_Id = @Ref_Id AND Currency_Id = @Currency_Id AND Is_Active = 'true' END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //added on 07-05-2020
            try
            {
                strsql = "ALTER PROCEDURE [dbo].[sp_Att_Log_Report] @From_Date datetime, @To_Date datetime, @Location_Id varchar(max), @Emp_Id varchar(max), @vType nvarchar(50) AS BEGIN DECLARE @data TABLE ( company_id int, Trans_Id int, Device_Id int, Emp_Id int, Event_Date datetime, Event_Time datetime, Func_Code varchar(50), Type varchar(100), Verified_Type varchar(100), IsActive bit, CreatedBy varchar(50), CreatedDate datetime, ModifiedBy varchar(50), ModifiedDate datetime, Emp_Name varchar(250), Emp_Code varchar(50), Device_Name varchar(250), Location_Name varchar(250), CompId varchar(250), HeaderName varchar(250), HeaderName_L varchar(250), Address varchar(250) ) IF (@vType = '--By All--') BEGIN INSERT INTO @data SELECT Att_AttendanceLog.Company_Id, Att_AttendanceLog.Trans_Id, Att_AttendanceLog.Device_Id, Att_AttendanceLog.Emp_Id, CONVERT(date, Att_AttendanceLog.Event_Date, 105) AS Event_Date, Att_AttendanceLog.Event_Time, Att_AttendanceLog.Func_Code, Att_AttendanceLog.Type, Att_AttendanceLog.Verified_Type, Att_AttendanceLog.IsActive, case when Set_UserMaster.Emp_Id='0' then 'Superadmin' else emp_createdby.Emp_Name end as CreatedBy, Att_AttendanceLog.CreatedDate, Att_AttendanceLog.ModifiedBy, Att_AttendanceLog.ModifiedDate, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Att_deviceMaster.Device_Name, Set_LocationMaster.Location_Name, company.* FROM Att_AttendanceLog LEFT OUTER JOIN Set_EmployeeMaster ON Att_AttendanceLog.Emp_Id = Set_EmployeeMaster.Emp_Id left join Set_UserMaster on Set_UserMaster.USER_ID=Att_AttendanceLog.CreatedBy left join Set_EmployeeMaster emp_createdby on emp_createdby.Emp_Id=Set_UserMaster.Emp_Id LEFT JOIN Set_LocationMaster ON Set_LocationMaster.Location_Id = Set_EmployeeMaster.Location_Id LEFT JOIN Att_deviceMaster ON Att_deviceMaster.Device_Id = Att_AttendanceLog.Device_Id INNER JOIN (SELECT Set_CompanyMaster.Company_Id AS CompId, Set_CompanyMaster.Company_Name AS HeaderName, Set_CompanyMaster.Company_Name_L AS HeaderName_L, Set_AddressMaster.Address FROM Set_CompanyMaster FULL OUTER JOIN Set_AddressChild ON Set_CompanyMaster.Company_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Company' FULL OUTER JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id) company ON company.CompId = Att_AttendanceLog.Company_Id WHERE (CAST(FLOOR(CAST(Att_AttendanceLog.Event_Date AS float)) AS datetime) >= @From_Date) AND (CAST(FLOOR(CAST(Att_AttendanceLog.Event_Date AS float)) AS datetime) <= @To_Date) AND Att_AttendanceLog.IsActive = 'true' AND CASE WHEN @Emp_Id = '' THEN 1 ELSE Att_AttendanceLog.Emp_Id END IN (SELECT CAST(Value AS int) AS location FROM F_Split(@Emp_Id, ',')) AND CASE WHEN @Location_Id = '' THEN 1 ELSE Set_EmployeeMaster.Location_Id END IN (SELECT CAST(Value AS int) AS location FROM F_Split(@location_id, ',')) ORDER BY Att_AttendanceLog.Event_Date, Att_AttendanceLog.Event_Time END ELSE BEGIN INSERT INTO @data SELECT Att_AttendanceLog.Company_Id, Att_AttendanceLog.Trans_Id, Att_AttendanceLog.Device_Id, Att_AttendanceLog.Emp_Id, CONVERT(date, Att_AttendanceLog.Event_Date, 105) AS Event_Date, Att_AttendanceLog.Event_Time, Att_AttendanceLog.Func_Code, Att_AttendanceLog.Type, Att_AttendanceLog.Verified_Type, Att_AttendanceLog.IsActive, case when Set_UserMaster.Emp_Id='0' then 'Superadmin' else emp_createdby.Emp_Name end as CreatedBy, Att_AttendanceLog.CreatedDate, Att_AttendanceLog.ModifiedBy, Att_AttendanceLog.ModifiedDate, Set_EmployeeMaster.Emp_Name, Set_EmployeeMaster.Emp_Code, Att_deviceMaster.Device_Name, Set_LocationMaster.Location_Name, company.* FROM Att_AttendanceLog LEFT OUTER JOIN Set_EmployeeMaster ON Att_AttendanceLog.Emp_Id = Set_EmployeeMaster.Emp_Id left join Set_UserMaster on Set_UserMaster.USER_ID=Att_AttendanceLog.CreatedBy left join Set_EmployeeMaster emp_createdby on emp_createdby.Emp_Id=Set_UserMaster.Emp_Id LEFT JOIN Set_LocationMaster ON Set_LocationMaster.Location_Id = Set_EmployeeMaster.Location_Id LEFT JOIN Att_deviceMaster ON Att_deviceMaster.Device_Id = Att_AttendanceLog.Device_Id INNER JOIN (SELECT Set_CompanyMaster.Company_Id AS CompId, Set_CompanyMaster.Company_Name AS HeaderName, Set_CompanyMaster.Company_Name_L AS HeaderName_L, Set_AddressMaster.Address FROM Set_CompanyMaster FULL OUTER JOIN Set_AddressChild ON Set_CompanyMaster.Company_Id = Set_AddressChild.Add_Ref_Id AND Set_AddressChild.Add_Type = 'Company' FULL OUTER JOIN Set_AddressMaster ON Set_AddressChild.Ref_Id = Set_AddressMaster.Trans_Id) company ON company.CompId = Att_AttendanceLog.Company_Id WHERE (CAST(FLOOR(CAST(Att_AttendanceLog.Event_Date AS float)) AS datetime) >= @From_Date) AND (CAST(FLOOR(CAST(Att_AttendanceLog.Event_Date AS float)) AS datetime) <= @To_Date) AND Att_AttendanceLog.IsActive = 'true' AND Att_AttendanceLog.Verified_Type = @vType AND CASE WHEN @Emp_Id = '' THEN 1 ELSE Att_AttendanceLog.Emp_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Emp_Id, ',')) AND CASE WHEN @Location_Id = '' THEN 1 ELSE Set_EmployeeMaster.Location_Id END IN (SELECT CAST(Value AS int) FROM F_Split(@Location_Id, ',')) ORDER BY Att_AttendanceLog.Event_Date, Att_AttendanceLog.Event_Time END SELECT * FROM @data END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            try
            {
                strsql = "ALTER Procedure [dbo].[sp_Ems_GroupMaster_SelectRow] @Group_Id int, @Parent_Id int, @Group_Name nvarchar(MAX), @Optype int As Begin if(@Optype=1) Begin SELECT Ems_GroupMaster.Group_Id,Ems_GroupMaster.Group_Name, Ems_GroupMaster.Group_Name_L, Ems_GroupMaster.Parent_Id, Ems_GroupMaster.IsActive, Ems_GroupMaster.CreatedBy, Ems_GroupMaster.CreatedDate, Ems_GroupMaster.ModifiedBy, Ems_GroupMaster.ModifiedDate, Ems_GroupMaster_1.Group_Name AS ParentGroupName FROM Ems_GroupMaster left outer JOIN Ems_GroupMaster AS Ems_GroupMaster_1 ON Ems_GroupMaster.Parent_Id = Ems_GroupMaster_1.Group_Id order by ModifiedDate desc End ELSE IF (@Optype=2) Begin SELECT Ems_GroupMaster.Group_Id,Ems_GroupMaster.Group_Name, Ems_GroupMaster.Group_Name_L, Ems_GroupMaster.Parent_Id, Ems_GroupMaster.IsActive, Ems_GroupMaster.CreatedBy, Ems_GroupMaster.CreatedDate, Ems_GroupMaster.ModifiedBy, Ems_GroupMaster.ModifiedDate, Ems_GroupMaster_1.Group_Name AS ParentGroupName FROM Ems_GroupMaster left outer JOIN Ems_GroupMaster AS Ems_GroupMaster_1 ON Ems_GroupMaster.Parent_Id = Ems_GroupMaster_1.Group_Id WHERE Ems_GroupMaster.IsActive='True' order by ModifiedDate desc End ELSE IF (@Optype=3) Begin SELECT Ems_GroupMaster.Group_Id,Ems_GroupMaster.Group_Name, Ems_GroupMaster.Group_Name_L, Ems_GroupMaster.Parent_Id, Ems_GroupMaster.IsActive, Ems_GroupMaster.CreatedBy, Ems_GroupMaster.CreatedDate, Ems_GroupMaster.ModifiedBy, Ems_GroupMaster.ModifiedDate, Ems_GroupMaster_1.Group_Name AS ParentGroupName FROM Ems_GroupMaster left outer JOIN Ems_GroupMaster AS Ems_GroupMaster_1 ON Ems_GroupMaster.Parent_Id = Ems_GroupMaster_1.Group_Id WHERE Ems_GroupMaster.IsActive='False' order by ModifiedDate desc End	ELSE IF (@Optype=4) Begin SELECT Ems_GroupMaster.Group_Id,Ems_GroupMaster.Group_Name, Ems_GroupMaster.Group_Name_L, Ems_GroupMaster.Parent_Id, Ems_GroupMaster.IsActive,Ems_GroupMaster.Field2, Ems_GroupMaster.CreatedBy, Ems_GroupMaster.CreatedDate,Ems_GroupMaster.field1, Ems_GroupMaster.ModifiedBy, Ems_GroupMaster.ModifiedDate, Ems_GroupMaster_1.Group_Name AS ParentGroupName FROM Ems_GroupMaster left outer JOIN Ems_GroupMaster AS Ems_GroupMaster_1 ON Ems_GroupMaster.Parent_Id = Ems_GroupMaster_1.Group_Id WHERE Ems_GroupMaster.IsActive='True' and Ems_GroupMaster.Group_Id=@Group_Id order by ModifiedDate desc End	ELSE IF (@Optype=5) Begin SELECT Ems_GroupMaster.Group_Id,Ems_GroupMaster.Group_Name, Ems_GroupMaster.Group_Name_L, Ems_GroupMaster.Parent_Id, Ems_GroupMaster.IsActive, Ems_GroupMaster.CreatedBy, Ems_GroupMaster.CreatedDate, Ems_GroupMaster.ModifiedBy, Ems_GroupMaster.ModifiedDate, Ems_GroupMaster_1.Group_Name AS ParentGroupName FROM Ems_GroupMaster left outer JOIN Ems_GroupMaster AS Ems_GroupMaster_1 ON Ems_GroupMaster.Parent_Id = Ems_GroupMaster_1.Group_Id WHERE Ems_GroupMaster.IsActive='True' and Ems_GroupMaster.Group_Name=@Group_Name order by ModifiedDate desc End ELSE IF (@Optype=6) Begin SELECT * from Ems_GroupMaster where Parent_Id='0' and IsActive='True' Order by Group_Name Asc End	ELSE IF (@Optype=7) Begin SELECT * from Ems_GroupMaster where Parent_Id=@Parent_Id and IsActive='True' Order by Group_Name Asc End End";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }

            //added on 12-05-20
            try
            {
                strsql = "alter ProcEDURE [dbo].[Inv_PhyHeaderLogsPost] @VoucherId int, @ModifiedBy	nvarchar(50), @ModifiedDate	datetime,	@retval int output AS BEGIN BEGIN TRY begin tran update Inv_PhysicalDetail set Inv_PhysicalDetail.PhysicalQuantity = pd.PhysicalQuantity + tbl.phy_qty, Inv_PhysicalDetail.RackId=tbl.rack_id, Inv_PhysicalDetail.ModifiedBy=@ModifiedBy, Inv_PhysicalDetail.ModifiedDate=@ModifiedDate from Inv_PhysicalDetail pd inner join (SELECT phl.ph_no, phl.product_id, SUM(phy_qty) as phy_qty, max(rack_id) as rack_id FROM dbo.Inv_PhysicalHeaderLogs phl WHERE phl.isActive='true' and phl.isPost='false' group by phl.ph_no,phl.product_id having SUM(phy_qty)>0)tbl on pd.Header_Id=tbl.ph_no and pd.ProductId=tbl.product_id where pd.Header_Id=@VoucherId SET @retval = @@RowCount update Inv_PhysicalHeaderLogs set isPost='true',modified_by=@ModifiedBy,modifiedDate=@ModifiedDate where ph_no=@VoucherId and isActive='true' commit RETURN @retval END TRY BEGIN CATCH SET @retval = @@RowCount RETURN @retval END CATCH END";
                cmd.ExecuteNonQuery();
            }
            catch
            {
                strsql = "create ProcEDURE [dbo].[Inv_PhyHeaderLogsPost] @VoucherId int, @ModifiedBy	nvarchar(50), @ModifiedDate	datetime,	@retval int output AS BEGIN BEGIN TRY begin tran update Inv_PhysicalDetail set Inv_PhysicalDetail.PhysicalQuantity = pd.PhysicalQuantity + tbl.phy_qty, Inv_PhysicalDetail.RackId=tbl.rack_id, Inv_PhysicalDetail.ModifiedBy=@ModifiedBy, Inv_PhysicalDetail.ModifiedDate=@ModifiedDate from Inv_PhysicalDetail pd inner join (SELECT phl.ph_no, phl.product_id, SUM(phy_qty) as phy_qty, max(rack_id) as rack_id FROM dbo.Inv_PhysicalHeaderLogs phl WHERE phl.isActive='true' and phl.isPost='false' group by phl.ph_no,phl.product_id having SUM(phy_qty)>0)tbl on pd.Header_Id=tbl.ph_no and pd.ProductId=tbl.product_id where pd.Header_Id=@VoucherId SET @retval = @@RowCount update Inv_PhysicalHeaderLogs set isPost='true',modified_by=@ModifiedBy,modifiedDate=@ModifiedDate where ph_no=@VoucherId and isActive='true' commit RETURN @retval END TRY BEGIN CATCH SET @retval = @@RowCount RETURN @retval END CATCH END";
                cmd.ExecuteNonQuery();
            }

            try
            {
                strsql = "ALTER procedure [dbo].[sp_Inv_PhysicalHeaderLogs_insert] @ph_no int ,@product_id int ,@phy_qty decimal(18,0) ,@serial_no nvarchar(50) ,@rack_id int ,@isPost bit ,@isActive bit ,@created_by nvarchar(20) ,@createdDate datetime ,@modified_by nvarchar(20) ,@modifiedDate datetime ,@trans_id int out as begin insert into [Inv_PhysicalHeaderLogs]([ph_no] ,[product_id] ,[phy_qty] ,[serial_no] ,[rack_id] ,[isPost] ,[isActive] ,[created_by] ,[createdDate] ,[modified_by] ,[modifiedDate]) values(@ph_no ,@product_id ,@phy_qty ,@serial_no ,@rack_id ,@isPost ,@isActive ,@created_by ,@createdDate ,@modified_by ,@modifiedDate) set @trans_id = SCOPE_IDENTITY(); return @trans_id; end";
                cmd.ExecuteNonQuery();
            }
            catch
            {
                strsql = "Create procedure [dbo].[sp_Inv_PhysicalHeaderLogs_insert] @ph_no int ,@product_id int ,@phy_qty decimal(18,0) ,@serial_no nvarchar(50) ,@rack_id int ,@isPost bit ,@isActive bit ,@created_by nvarchar(20) ,@createdDate datetime ,@modified_by nvarchar(20) ,@modifiedDate datetime ,@trans_id int out as begin insert into [Inv_PhysicalHeaderLogs]([ph_no] ,[product_id] ,[phy_qty] ,[serial_no] ,[rack_id] ,[isPost] ,[isActive] ,[created_by] ,[createdDate] ,[modified_by] ,[modifiedDate]) values(@ph_no ,@product_id ,@phy_qty ,@serial_no ,@rack_id ,@isPost ,@isActive ,@created_by ,@createdDate ,@modified_by ,@modifiedDate) set @trans_id = SCOPE_IDENTITY(); return @trans_id; end";
                cmd.ExecuteNonQuery();
            }

            //added on 22-07-2020
            try
            {
                strsql = "ALTER PROCEDURE [dbo].[sp_Inv_ProductTaxMaster_SelectAll] @CategoryId int, @ProductId int, @HSNCode nvarchar(100), @LocationId int AS BEGIN SELECT DISTINCT * FROM (SELECT IPM.ProductId AS Product_Id, IPM.EProductName AS ProductName, IPCM.Category_Id, IPCM.Category_Name, IPM.HScode, (STUFF((SELECT ',' + stm.Tax_Name + '-' + cast(iptm.Tax_Percentage as varchar) + '%' FROM dbo.Inv_ProductTaxMaster iptm inner join Sys_TaxMaster stm on iptm.Tax_Id=stm.Trans_Id where iptm.Product_Id=ipm.ProductId and iptm.location_id=@LocationId FOR XML PATH('') ), 1, 1, '')) as tax_detail FROM Inv_ProductMaster IPM LEFT JOIN Inv_Product_Category IPC ON IPM.ProductId = IPC.ProductId LEFT JOIN Inv_Product_CategoryMaster IPCM ON IPCM.Category_Id = IPC.CategoryId) A WHERE (CASE WHEN @CategoryId = 0 THEN 0 ELSE Category_Id END) = @CategoryId AND (CASE WHEN @ProductId = 0 THEN 0 ELSE Product_Id END) = @ProductId AND (CASE WHEN @HSNCode = '' OR @HSNCode IS NULL THEN '' ELSE HScode END) = @HSNCode END";
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {

            }



            try
            {
                strsql = "ALTER PROCEDURE [dbo].[sp_Set_UserMaster_SelectRow] @User_Id nvarchar(max), @Password nvarchar(max), @Company_Id int, @Optype int AS BEGIN IF (@Optype = 1) BEGIN SELECT Set_UserMaster.[User_Id], Set_UserMaster.[Company_Id], Set_UserMaster.[Emp_Id], Set_UserMaster.[Role_Id], Set_EmployeeMaster.Emp_Name AS EmpName, (SELECT Role_Name FROM Set_RoleMaster WHERE Role_Id = Set_UserMaster.Role_Id) AS Role_Name, Set_UserMaster.[Password], Set_UserMaster.[Is_Modified], Set_UserMaster.[Field1], Set_UserMaster.[Field2], Set_UserMaster.[Field3], Set_UserMaster.[Field4], Set_UserMaster.[Field5], Set_UserMaster.[Field6], Set_UserMaster.[Field7], Set_UserMaster.[IsActive], Set_UserMaster.[CreatedBy], Set_UserMaster.[CreatedDate], Set_UserMaster.[ModifiedBy], Set_UserMaster.[ModifiedDate], Set_UserMaster.[IsGlobalAccess] FROM Set_UserMaster LEFT JOIN Set_EmployeeMaster ON Set_UserMaster.Emp_Id = Set_EmployeeMaster.Emp_Id WHERE (Set_UserMaster.User_Id = @User_Id OR Set_EmployeeMaster.Email_Id = @User_Id) AND Set_UserMaster.Password = @Password AND Set_UserMaster.IsActive = 'True' AND Set_UserMaster.Company_Id = @Company_Id END IF (@Optype = 2) BEGIN SELECT Set_UserMaster.[User_Id], Set_UserMaster.[Company_Id], Set_UserMaster.[Emp_Id], Set_UserMaster.[Role_Id], Set_EmployeeMaster.Emp_Name AS EmpName, Set_EmployeeMaster.DOJ AS EmpDOJ, Set_EmployeeMaster.Emp_Name_L AS EmpName_L, Set_EmployeeMaster.Emp_Image AS Emp_Image, Set_DesignationMaster.Designation AS Emp_Designation, Set_DesignationMaster.Designation_L AS Emp_Designation_L, ' ' AS Role_Name, [Password], [Is_Modified], Set_UserMaster.[Field1], Set_UserMaster.[Field2], Set_UserMaster.[Field3], Set_UserMaster.[Field4], Set_UserMaster.[Field5], Set_UserMaster.[Field6], Set_UserMaster.[Field7], Set_UserMaster.[IsActive], Set_UserMaster.[CreatedBy], Set_UserMaster.[CreatedDate], Set_UserMaster.[ModifiedBy], Set_UserMaster.[ModifiedDate], Set_UserMaster.[IsGlobalAccess], CASE WHEN Set_UserMaster.is_modified = 'False' THEN ISNULL((SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.Role_id) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT CAST(Value AS int) FROM F_Split(Set_UserMaster.Role_Id, ',')) FOR xml PATH ('')), 1, 1, '')), 0) ELSE ISNULL((SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.Role_id) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT DISTINCT (Set_UserPermission.Field1) FROM Set_UserPermission WHERE Set_UserPermission.User_Id = Set_UserMaster.User_Id) FOR xml PATH ('')), 1, 1, '')), 0) END AS DistinctRoleId FROM Set_UserMaster LEFT JOIN Set_EmployeeMaster ON Set_EmployeeMaster.Emp_Id = Set_UserMaster.Emp_Id LEFT JOIN Set_DesignationMaster ON Set_DesignationMaster.Designation_Id = Set_EmployeeMaster.Designation_Id WHERE User_Id = @User_Id END IF (@Optype = 3) BEGIN SELECT Set_User.[User_Id], Set_User.[Company_Id], Set_User.[Emp_Id], Set_User.[Role_Id], (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Role_Name) FROM Set_RoleMaster WHERE Role_Id IN (SELECT CAST(Value AS int) AS location FROM F_Split(Set_User.Role_Id, ',')) FOR xml PATH ('')), 1, 1, '')) AS Role_Name, Set_User.[Password], Set_User.[Is_Modified], Set_User.[Field1], Set_User.[Field2], Set_User.[Field3], Set_User.[Field4], Set_User.[Field5], Set_User.[Field6], Set_User.[Field7], Set_User.[IsActive], Set_User.[CreatedBy], Set_User.[CreatedDate], Set_User.[ModifiedBy], Set_User.[ModifiedDate], [IsGlobalAccess], Set_EmployeeMaster.Emp_Name FROM Set_UserMaster AS Set_User LEFT JOIN Set_EmployeeMaster ON Set_EmployeeMaster.Emp_Id = Set_User.Emp_Id WHERE Set_User.IsActive = 'False' AND Set_User.company_id = @Company_Id END IF (@Optype = 4) BEGIN SELECT Set_User.User_Id, Set_User.Company_Id, Set_User.Emp_Id, Set_User.Role_Id, CASE WHEN Set_User.is_modified = 'False' THEN (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.Role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT CAST(Value AS int) FROM F_Split(Set_User.Role_Id, ',')) FOR xml PATH ('')), 1, 1, '')) ELSE (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT DISTINCT (Set_UserPermission.Field1) FROM Set_UserPermission WHERE Set_UserPermission.User_Id = Set_User.User_Id) FOR xml PATH ('')), 1, 1, '')) END AS Role_Name, Set_User.Password, Set_User.Is_Modified, Set_User.Field1, Set_User.Field2, Set_User.Field3, Set_User.Field4, Set_User.Field5, Set_User.Field6, Set_User.Field7, Set_User.IsActive, Set_User.CreatedBy, Set_User.CreatedDate, Set_User.ModifiedBy, Set_User.ModifiedDate, Set_User.IsGlobalAccess, Set_EmployeeMaster_1.Emp_Name, Set_EmployeeMaster_1.Brand_Id, Set_EmployeeMaster_1.Location_Id, Set_EmployeeMaster_1.Department_Id FROM Set_UserMaster AS Set_User INNER JOIN Set_EmployeeMaster AS Set_EmployeeMaster_1 ON Set_User.Emp_Id = Set_EmployeeMaster_1.Emp_Id WHERE Set_User.IsActive = 'True' AND Set_User.Company_Id = @Company_Id AND Set_EmployeeMaster_1.Field2 = 'False' ORDER BY Set_EmployeeMaster_1.Emp_Name END IF (@Optype = 5) BEGIN SELECT Set_User.User_Id, Set_User.Company_Id, Set_User.Emp_Id, Set_User.Role_Id, CASE WHEN Set_User.is_modified = 'False' THEN (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.Role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT CAST(Value AS int) FROM F_Split(Set_User.Role_Id, ',')) FOR xml PATH ('')), 1, 1, '')) ELSE (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT DISTINCT (Set_UserPermission.Field1) FROM Set_UserPermission WHERE Set_UserPermission.User_Id = Set_User.User_Id) FOR xml PATH ('')), 1, 1, '')) END AS Role_Name, Set_User.Password, Set_User.Is_Modified, Set_User.Field1, Set_User.Field2, Set_User.Field3, Set_User.Field4, Set_User.Field5, Set_User.Field6, Set_User.Field7, Set_User.IsActive, Set_User.CreatedBy, Set_User.CreatedDate, Set_User.ModifiedBy, Set_User.ModifiedDate, Set_User.IsGlobalAccess, (SELECT Emp_Name FROM Set_EmployeeMaster WHERE (Emp_Id = Set_User.Emp_Id)) AS Emp_Name, Set_EmployeeMaster_1.Brand_Id, Set_EmployeeMaster_1.Location_Id FROM Set_UserMaster AS Set_User INNER JOIN Set_EmployeeMaster AS Set_EmployeeMaster_1 ON Set_User.Emp_Id = Set_EmployeeMaster_1.Emp_Id WHERE Set_User.IsActive = 'True' AND Set_User.Company_Id = @company_id AND Set_EmployeeMaster_1.Field2 = 'False' END IF (@Optype = 6) BEGIN SELECT [User_Id], [Company_Id], [Emp_Id], [Role_Id], (SELECT Emp_Name FROM Set_EmployeeMaster WHERE Emp_Id = Set_UserMaster.Emp_Id) AS EmpName, (SELECT Emp_Code FROM Set_EmployeeMaster WHERE Emp_Id = Set_UserMaster.Emp_Id) AS Emp_Code, (SELECT DOJ FROM Set_EmployeeMaster WHERE Emp_Id = Set_UserMaster.Emp_Id) AS EmpDOJ, (SELECT Emp_Name_L FROM Set_EmployeeMaster WHERE Emp_Id = Set_UserMaster.Emp_Id) AS EmpName_L, (SELECT Emp_Image FROM Set_EmployeeMaster WHERE Emp_Id = Set_UserMaster.Emp_Id) AS Emp_Image, (SELECT Designation FROM Set_DesignationMaster WHERE Designation_Id = (SELECT Designation_Id FROM Set_EmployeeMaster WHERE Emp_Id = Set_UserMaster.Emp_Id) AND IsActive = 'True') AS Emp_Designation, (SELECT Designation_L FROM Set_DesignationMaster WHERE Designation_Id = (SELECT Designation_Id FROM Set_EmployeeMaster WHERE Emp_Id = Set_UserMaster.Emp_Id) AND IsActive = 'True') AS Emp_Designation_L, CASE WHEN Set_UserMaster.is_modified = 'False' THEN (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.Role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT CAST(Value AS int) FROM F_Split(Set_UserMaster.Role_Id, ',')) FOR xml PATH ('')), 1, 1, '')) ELSE (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT DISTINCT (Set_UserPermission.Field1) FROM Set_UserPermission WHERE Set_UserPermission.User_Id = Set_UserMaster.User_Id) FOR xml PATH ('')), 1, 1, '')) END AS Role_Name, [Password], [Is_Modified], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], [IsGlobalAccess] FROM Set_UserMaster WHERE User_Id = @User_Id AND Company_Id = @Company_Id END IF (@Optype = 7) BEGIN SELECT [User_Id], [Company_Id], [Emp_Id], [Role_Id], (SELECT Emp_Name FROM Set_EmployeeMaster WHERE Emp_Id = Set_UserMaster.Emp_Id) AS EmpName, CASE WHEN Set_UserMaster.is_modified = 'False' THEN (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.Role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT CAST(Value AS int) FROM F_Split(Set_UserMaster.Role_Id, ',')) FOR xml PATH ('')), 1, 1, '')) ELSE (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT DISTINCT (Set_UserPermission.Field1) FROM Set_UserPermission WHERE Set_UserPermission.User_Id = Set_UserMaster.User_Id) FOR xml PATH ('')), 1, 1, '')) END AS Role_Name, [Password], [Is_Modified], [Field1], [Field2], [Field3], [Field4], [Field5], [Field6], [Field7], [IsActive], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate], [IsGlobalAccess] FROM Set_UserMaster END IF (@Optype = 8) BEGIN SELECT Set_User.User_Id, Set_User.Company_Id, Set_User.Emp_Id, Set_User.Role_Id, CASE WHEN Set_User.is_modified = 'False' THEN (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.Role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT CAST(Value AS int) FROM F_Split(Set_User.Role_Id, ',')) FOR xml PATH ('')), 1, 1, '')) ELSE (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT DISTINCT (Set_UserPermission.Field1) FROM Set_UserPermission WHERE Set_UserPermission.User_Id = Set_User.User_Id) FOR xml PATH ('')), 1, 1, '')) END AS Role_Name, Set_User.Password, Set_User.Is_Modified, Set_User.Field1, Set_User.Field2, Set_User.Field3, Set_User.Field4, Set_User.Field5, Set_User.Field6, Set_User.Field7, Set_User.IsActive, Set_User.CreatedBy, Set_User.CreatedDate, Set_User.ModifiedBy, Set_User.ModifiedDate, Set_User.IsGlobalAccess, (SELECT Emp_Name FROM Set_EmployeeMaster WHERE (Emp_Id = Set_User.Emp_Id)) AS Emp_Name, Set_EmployeeMaster_1.Brand_Id, Set_EmployeeMaster_1.Location_Id FROM Set_UserMaster AS Set_User INNER JOIN Set_EmployeeMaster AS Set_EmployeeMaster_1 ON Set_User.Emp_Id = Set_EmployeeMaster_1.Emp_Id WHERE Set_User.IsActive = 'True' END IF (@Optype = 9) BEGIN SELECT dbo.Set_UserMaster.*, CASE WHEN Set_UserMaster.is_modified = 'False' THEN (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.Role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT CAST(Value AS int) FROM F_Split(Set_UserMaster.Role_Id, ',')) FOR xml PATH ('')), 1, 1, '')) ELSE (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT DISTINCT (Set_UserPermission.Field1) FROM Set_UserPermission WHERE Set_UserPermission.User_Id = Set_UserMaster.User_Id) FOR xml PATH ('')), 1, 1, '')) END AS Role_Name, dbo.Set_EmployeeMaster.Emp_Name AS EmpName, dbo.Set_EmployeeMaster.Field2 AS EmployeeField2, dbo.Set_EmployeeMaster.IsActive AS EmployeeIsActive FROM dbo.Set_UserMaster INNER JOIN dbo.Set_EmployeeMaster ON dbo.Set_UserMaster.Emp_Id = dbo.Set_EmployeeMaster.Emp_Id WHERE (Set_UserMaster.User_Id = @User_Id OR Set_EmployeeMaster.Email_Id = @User_Id) AND Set_UserMaster.Password = @Password AND Set_UserMaster.IsActive = 'True' AND Set_UserMaster.Company_Id = @Company_Id AND Set_EmployeeMaster.IsActive = 'True' AND Set_EmployeeMaster.Field2 = 'False' END IF (@Optype = 10) BEGIN SELECT dbo.Set_UserMaster.*, CASE WHEN Set_UserMaster.is_modified = 'False' THEN (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.Role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT CAST(Value AS int) FROM F_Split(Set_UserMaster.Role_Id, ',')) FOR xml PATH ('')), 1, 1, '')) ELSE (SELECT STUFF((SELECT DISTINCT ',' + RTRIM(Set_RoleMaster.role_name) FROM Set_RoleMaster WHERE Set_RoleMaster.Role_Id IN (SELECT DISTINCT (Set_UserPermission.Field1) FROM Set_UserPermission WHERE Set_UserPermission.User_Id = Set_UserMaster.User_Id) FOR xml PATH ('')), 1, 1, '')) END AS Role_Name, dbo.Set_EmployeeMaster.Emp_Name, dbo.set_employeemaster.location_id, dbo.set_employeemaster.Brand_id, dbo.Set_EmployeeMaster.Field2 AS EmployeeField2, dbo.Set_EmployeeMaster.IsActive AS EmployeeIsActive, Set_EmployeeMaster.Email_Id FROM dbo.Set_UserMaster INNER JOIN dbo.Set_EmployeeMaster ON dbo.Set_UserMaster.Emp_Id = dbo.Set_EmployeeMaster.Emp_Id WHERE (Set_UserMaster.User_Id = @User_Id OR Set_EmployeeMaster.Email_Id = @User_Id) AND Set_UserMaster.IsActive = 'True' AND Set_UserMaster.Company_Id = @Company_Id AND Set_EmployeeMaster.IsActive = 'True' AND Set_EmployeeMaster.Field2 = 'False' END IF (@Optype = 11) BEGIN SELECT User_Id, IsGlobalAccess FROM Set_UserMaster WHERE IsActive = 'True' AND Company_Id = @Company_Id AND USER_ID = @User_Id END END";
                cmd.ExecuteNonQuery();
            }
            catch
            {

            }





        }


    }
    public bool checkparameter(string strParam, string strLocationId)
    {
        bool Result = false;

        string strsql = "select param_name from Set_ApplicationParameter where Param_Name='" + strParam + "' and location_id=" + strLocationId + "";
        if (objDa.return_DataTable(strsql).Rows.Count > 0)
        {
            Result = true;
        }

        return Result;
    }

    protected void btnTableBackup_Click(object sender, EventArgs e)
    {
        SqlConnection con = new SqlConnection(Session["DBConnection"].ToString());

        if (txtTransdate.Text == "")
        {
            DisplayMessage("Enter Transaction date");
            txtTransdate.Focus();
            return;
        }

        DateTime Maxdate = new DateTime();
        DateTime Mindate = new DateTime();
        try
        {
            Maxdate = Convert.ToDateTime(txtTransdate.Text);
        }
        catch
        {
            DisplayMessage("Enter Valid date");
            txtTransdate.Focus();
            return;
        }
        int counter = 0;

        con.Open();
        SqlTransaction trns;
        trns = con.BeginTransaction();


        try
        {
            string strColumnName = string.Empty;
            string strTableName = string.Empty;

            foreach (ListItem li in ListTableList.Items)
            {

                if (li.Selected)
                {
                    if (li.Value.Trim() == "Log_DB")
                    {
                        strColumnName = "OperatedDate";
                    }
                    if (li.Value.Trim() == "Att_AttendanceRegister")
                    {
                        strColumnName = "att_date";
                    }
                    if (li.Value.Trim() == "Att_AttendanceLog")
                    {
                        strColumnName = "Event_date";
                    }
                    if (li.Value.Trim() == "Att_Device_Operation")
                    {
                        strColumnName = "Effective_Date";
                    }
                    if (li.Value.Trim() == "Att_ScheduleDescription")
                    {
                        strColumnName = "att_date";
                    }

                    try
                    {
                        Mindate = Convert.ToDateTime(objDa.get_SingleValue("select min(" + strColumnName + ") from " + li.Value.Trim() + "", ref trns));
                    }
                    catch
                    {
                        continue;
                    }


                    if (Convert.ToInt32(objDa.get_SingleValue("select count(*) FROM " + li.Value.Trim() + " WHERE cast(" + strColumnName + " as date)<=cast('" + Maxdate + "' as date)")) > 0)
                    {
                        counter++;
                        //taking backup of main table and making another table
                        objDa.execute_Command("SELECT * INTO " + li.Value.Trim() + "_" + Mindate.ToString("ddMMMyyyy") + "_" + Maxdate.ToString("ddMMMyyyy") + " FROM " + li.Value.Trim() + " WHERE cast(" + strColumnName + " as date)<=cast('" + Maxdate + "' as date)", ref trns);

                        //deleting data from base table according selected date criteria

                        objDa.execute_Command("delete FROM " + li.Value.Trim() + " WHERE cast(" + strColumnName + " as date)<=cast('" + Maxdate + "' as date)", ref trns);
                    }

                }
            }

            trns.Commit();
            if (con.State == System.Data.ConnectionState.Open)
            {
                con.Close();
            }
            trns.Dispose();
            con.Dispose();
        }
        catch (Exception ex)
        {
            DisplayMessage(Common.ConvertErrorMessage(ex.Message.ToString(), ex));

            trns.Rollback();
            if (con.State == System.Data.ConnectionState.Open)
            {

                con.Close();
            }
            trns.Dispose();
            con.Dispose();
            return;
        }

        DisplayMessage(counter.ToString() + " table Affected");

        btnTableReset_Click(null, null);

    }

    protected void btnTableReset_Click(object sender, EventArgs e)
    {
        txtTransdate.Text = "";
        foreach (ListItem li in ListTableList.Items)
        {
            li.Selected = false;

        }
    }

    #region Client Database Clean And Drop
    protected void btnClientDatabase_Click(object sender,EventArgs e)
    {
        btnBackupDb_Click(null, null);
        try
        {
            MasterDataAccess objMDa = new MasterDataAccess(ConfigurationManager.ConnectionStrings["PegaConnection1"].ToString());
            string con = Session["DBConnection"].ToString();
            SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder(con);
            // Extract the database name
            string databaseName = builder.InitialCatalog; // Or builder["Initial Catalog"]

            string es_con= Session["DBConnection_ES"].ToString();
            SqlConnectionStringBuilder builder2 = new SqlConnectionStringBuilder(es_con);
            // Extract the es_database name
            string databaseName_es= builder2.InitialCatalog; // Or builder["Initial Catalog"]

            Session.Clear();
            Session.Abandon();
            //objMDa.execute_Command("USE master; DROP DATABASE " + databaseName + "");
            PassDataToSql[] paramList = new PassDataToSql[3];
            paramList[0] = new PassDataToSql("@DatabaseName", databaseName, PassDataToSql.ParaTypeList.Nvarchar, PassDataToSql.ParaDirectonList.Input);
            paramList[1] = new PassDataToSql("@DatabaseName_es", databaseName_es, PassDataToSql.ParaTypeList.Nvarchar, PassDataToSql.ParaDirectonList.Input);
            paramList[2] = new PassDataToSql("@ReferenceId", "0", PassDataToSql.ParaTypeList.Int, PassDataToSql.ParaDirectonList.Output);
            objMDa.execute_Sp("ClientDatabase_Drop", paramList);            
            Response.Redirect("~/CloudLogin.aspx");
        }
        catch(Exception ex)
        {

        }
    }

    protected void btnClientTransaction_Click(object sender,EventArgs e)
    {
        try
        {
            objDa.execute_Command("Delete From Inv_StockDetail");
            objDa.execute_Command("Delete  From Inv_ProductLedger");
            objDa.execute_Command("Delete From Inv_PurchaseRequestDetail");
            objDa.execute_Command("Delete  From Inv_PurchaserequestDetail");
            objDa.execute_Command("Delete From Inv_PurchaseReturnDetail");
            objDa.execute_Command("Delete  From Inv_PurchaseInvoiceDetail");
            objDa.execute_Command("Delete  From Inv_PurchaseReturnHeader");
            objDa.execute_Command("Delete From Inv_PurchaseInvoiceHeader");             
            objDa.execute_Command("Delete From Inv_PurchaseOrderDetail");
            objDa.execute_Command("Delete  From Inv_PurchaseOrderHeader");
            objDa.execute_Command("Delete From Inv_PurchaseQuoteHeader");
            objDa.execute_Command("Delete  From Inv_PurchaseQuoteDetail");
            objDa.execute_Command("Delete From Inv_PurchaseInquiryHeader");
            objDa.execute_Command("Delete  From Inv_PurchaseInquiryDetail");
            objDa.execute_Command("Delete From Inv_PurchaseInquiry_Supplier");
            objDa.execute_Command("Delete  From Inv_SalesInquiryHeader");
            objDa.execute_Command("Delete From Inv_SalesInqDetail");
            objDa.execute_Command("Delete  From Inv_SalesQuotation_FollowUp");
            objDa.execute_Command("Delete From Inv_SalesQuotationDetail");
            objDa.execute_Command("Delete  From Inv_SalesQuotationHeader");
            objDa.execute_Command("Delete From Inv_SalesDeliveryVoucher_Detail");
            objDa.execute_Command("Delete From Inv_SalesDeliveryVoucher_Header");
            objDa.execute_Command("Delete From Inv_SalesOrderDetail");
            objDa.execute_Command("Delete  From Inv_SalesOrderHeader");
            objDa.execute_Command("Delete From Inv_SalesReturnDetail");
            objDa.execute_Command("Delete  From Inv_SalesReturnHeader");
            objDa.execute_Command("Delete From Inv_SalesInvoiceDetail");
            objDa.execute_Command("Delete  From Inv_SalesInvoiceHeader");

            DisplayMessage("Transaction Clean Successfully");
        }
        catch(Exception ex)
        {

        }

    }
    #endregion
}
